Shift Management — Extended Business Rules (Weekly Hours + Core Hours)
A) New Concepts & Fields

Weekly Hours (RequiredWeeklyHours)
Total hours an employee must work across the shift’s work week (e.g., Sun–Thu). Integer/decimal (e.g., 40.0).

Core Hours per Day (CoreStart, CoreEnd)
A mandatory presence window each working day (per shift). Employees must be present during core hours even if the shift allows flexible/grace windows outside core.

Working Days
Boolean flags per weekday (Sun…Sat) indicating the shift applies that day.

Time Zone
Shift calculations respect the branch time zone.

Store Core Hours per day either:

one pair applied to all working days; or

per-weekday overrides (CoreStart[Mon], CoreEnd[Mon], …).
Choose one model and keep it consistent.

B) Data Model Additions (logical)

Shifts

RequiredWeeklyHours (nullable decimal)

HasCoreHours (bool)

CoreStart/CoreEnd (time) or a separate table ShiftCoreHoursByDay for per-day overrides

WorkingDaysMask (bitmask) or discrete booleans (IsSun, IsMon, …)

ShiftPeriods (unchanged): up to two periods per day (Start/End), support night span.

ShiftOptions (unchanged): AllowFlexible, GraceMinutes, CheckInRequired, AutoCheckOut, HoursOnly, NightShift flag (derived if End < Start), Flex windows, etc.

C) Evaluation Order (per day)

Is this a working day? If not, ignore daily rules (but weekly hours can include overtime on non-working days only if company policy allows—default: not counted).

Mode:

Hours-Only: daily compliance by WorkedHours ≥ RequiredDailyHours (if set) and weekly by sum ≥ RequiredWeeklyHours (if set). Core hours rules still apply if defined.

Time-Based (single/two periods): apply flex/grace → determine expected daily window(s) → compute lateness/early-leave vs. periods.

Core Hours: must be present during CoreStart–CoreEnd (or corresponding per-weekday core window) regardless of flex/grace.

Daily Total: compute WorkedHoursDay.

Weekly Total: sum WorkedHoursDay for the defined week → compare to RequiredWeeklyHours if set.

D) Core Hours Rules

Mandatory Presence: If HasCoreHours = true, employee must have overlapping presence covering the entire core window for that day.

Independence from Flex/Grace:

Flex/grace can shift check-in expectations, but cannot excuse absence within core hours.

If check-in occurs after CoreStart → Late to core violation, even if within grace.

Hours-Only Shifts: Core hours still apply; the employee may work any time around core, but must be present during core.

Two-Period Shifts:

Core window can sit inside either period or span across both.

If core spans across a gap, employee must be present during all core times; break inside core is not permitted unless the break is explicitly configured and excludes core.

Night Shifts:

Core hours can cross midnight. Evaluate in local time for the shift day anchor (start day). If core spans days, ensure presence across boundary.

E) Weekly Hours Rules

Target: If RequiredWeeklyHours is set, the sum of valid daily worked hours across configured working days must be ≥ RequiredWeeklyHours.

Deficit & Surplus:

Deficit (< target) → weekly shortfall violation.

Surplus (> target) can be treated as overtime only if policy allows (default: recorded as surplus, not automatically overtime).

Partial Weeks (leave/holiday): exclude approved leave/holiday from denominator by policy; do not penalize the weekly target if paid leave is approved (configurable).

Non-Working Days: Hours on non-working days do not count toward RequiredWeeklyHours unless policy enables counting (configurable).

F) Interaction with Existing Options
1) Flexible Hours & Grace

Flex/grace may shift acceptable check-in time before/after nominal start but never waive core hours presence.

Lateness logic:

Shift Lateness: check-in later than (Start + Grace) for time-based shifts.

Core Lateness: check-in after CoreStart (no grace unless a separate core-grace is configured—default: none).

If both apply, record both violations separately.

2) Auto Check-Out

Still allowed. Auto checkout sets the recorded end at shift EndTime (or period end).

Weekly hours sum uses recorded/auto end; manual check-out overrides auto.

3) Hours-Only Shifts

Daily: WorkedHoursDay ≥ RequiredDailyHours (if configured).

Weekly: Σ WorkedHoursDay ≥ RequiredWeeklyHours.

Core hours must still be fully covered when HasCoreHours = true.

4) Two Periods

Daily total = sum of both periods’ overlapped worked time.

Core hours may sit inside one or both; employee must be present across core entirety.

5) Night Shifts

Day boundary handling for daily totals and core windows uses branch time zone; if End < Start, treat as cross-midnight.

Weekly rollup allocates hours to the anchored day (the day the shift starts) unless policy says calendar day split.

G) Validation Rules

Mutual Exclusivity: A shift must be either time-based (with 1–2 periods) or hours-only; not both.

Core within Working Day: CoreStart < CoreEnd (or valid cross-midnight pair for night shifts).

Core vs Periods (time-based): If core is defined, ensure core lies within the union of periods (or flag configuration error).

Weekly Hours with Hours-Only: If Hours-Only and RequiredWeeklyHours set, at least one of RequiredDailyHours or policy for weekly distribution must exist to avoid orphan weekly target.

Grace Limits: GraceMinutes non-negative and ≤ policy max (e.g., 30–60).

Flex Windows: If using flex bands (Before/After), ensure they don’t push expected presence outside defined periods unless policy allows “floating period” logic.

H) Calculation Details
Daily Worked Hours

Sum of all valid check-in/out intervals intersecting the assigned shift window(s).

For hours-only, sum entire day’s worked intervals (capped by company max per day if needed).

Core Compliance

The union of employee presence intervals must cover the CoreStart–CoreEnd interval. Any uncovered minutes → core deficit.

Weekly Rollup

WeeklyWorked = Σ WorkedHoursDay (working days only, unless configured otherwise)

Compliance:

If RequiredWeeklyHours present → WeeklyWorked ≥ RequiredWeeklyHours.

Record WeeklyDeficit = max(0, RequiredWeeklyHours − WeeklyWorked).

I) Exceptions & Overrides

Approved Exceptions (e.g., training, business travel) can mark core or weekly checks as satisfied for the impacted period.

Retroactive Changes: Any shift change (core/periods/weekly target) requires recalculation of affected records within the effective date range.

J) UI / UX Hints (for your Angular forms)

Field descriptions (examples):

Required Weekly Hours: “Total hours required across the work week (e.g., 40).”

Core Hours: “Mandatory presence interval each working day; flex/grace does not waive this.”

Hours-Only: “Employees must complete the required hours; no fixed start/end times.”

Two Periods: “Define morning/evening blocks; total hours sum across both.”

Night Shift: “Shift spans midnight; times are evaluated in branch time zone.”

Grace Period (min): “Minutes allowed after start without lateness; not applied to core hours.”

K) Acceptance Criteria (what to test)

Core hours violation is raised even when check-in is within shift grace.

Hours-only + core hours: compliant daily hours but absent during core → marked non-compliant for the day.

Two-period day where core spans both periods → requires continuous presence across core (no gap).

Night shift with core crossing midnight → presence checked across boundary correctly.

Weekly target met by distributing hours across working days; surplus logged but not auto-overtime (default).

Config validation prevents core window outside defined periods (time-based mode).