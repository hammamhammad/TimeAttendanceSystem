// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeAttendanceSystem.Infrastructure.Persistence;

#nullable disable

namespace TimeAttendanceSystem.Infrastructure.Migrations
{
    [DbContext(typeof(TimeAttendanceDbContext))]
    [Migration("20250926082524_AddEmployeeVacationsTable")]
    partial class AddEmployeeVacationsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Attendance.AttendanceRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ActualCheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualCheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ApprovedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("date");

                    b.Property<decimal>("BreakHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EarlyLeaveMinutes")
                        .HasColumnType("int");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinalized")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsManualOverride")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LateMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("OverrideAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<long?>("OverrideByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("OverrideNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("OvertimeAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("OvertimeCalculationNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long?>("OvertimeConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<int>("OvertimeDayType")
                        .HasColumnType("int");

                    b.Property<decimal>("OvertimeHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("OvertimeRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(4,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PostShiftOvertimeHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PreShiftOvertimeHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<TimeOnly?>("ScheduledEndTime")
                        .HasColumnType("time");

                    b.Property<decimal>("ScheduledHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<TimeOnly?>("ScheduledStartTime")
                        .HasColumnType("time");

                    b.Property<long?>("ShiftAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("WorkingHours")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceDate")
                        .HasDatabaseName("IX_AttendanceRecords_AttendanceDate");

                    b.HasIndex("OvertimeConfigurationId")
                        .HasDatabaseName("IX_AttendanceRecords_OvertimeConfiguration");

                    b.HasIndex("OvertimeDayType")
                        .HasDatabaseName("IX_AttendanceRecords_OvertimeDayType");

                    b.HasIndex("ShiftAssignmentId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_AttendanceRecords_Status");

                    b.HasIndex("EmployeeId", "AttendanceDate")
                        .IsUnique()
                        .HasDatabaseName("IX_AttendanceRecords_Employee_Date");

                    b.HasIndex("IsApproved", "IsFinalized")
                        .HasDatabaseName("IX_AttendanceRecords_Approval_Status");

                    b.ToTable("AttendanceRecords", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Attendance.AttendanceTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("date");

                    b.Property<long?>("AttendanceRecordId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EnteredByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("TransactionTimeLocal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransactionTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<long?>("VerifiedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceDate")
                        .HasDatabaseName("IX_AttendanceTransactions_AttendanceDate");

                    b.HasIndex("AttendanceRecordId");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("IX_AttendanceTransactions_DeviceId");

                    b.HasIndex("EnteredByUserId");

                    b.HasIndex("IsManual")
                        .HasDatabaseName("IX_AttendanceTransactions_IsManual");

                    b.HasIndex("IsVerified")
                        .HasDatabaseName("IX_AttendanceTransactions_IsVerified");

                    b.HasIndex("TransactionType")
                        .HasDatabaseName("IX_AttendanceTransactions_TransactionType");

                    b.HasIndex("VerifiedByUserId");

                    b.HasIndex("EmployeeId", "AttendanceDate", "TransactionTimeUtc")
                        .HasDatabaseName("IX_AttendanceTransactions_Employee_Date_Time");

                    b.ToTable("AttendanceTransactions", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Attendance.WorkingDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AttendanceRecordId")
                        .HasColumnType("bigint");

                    b.Property<int>("BreakPeriodCount")
                        .HasColumnType("int");

                    b.Property<string>("CalculationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("CoreHoursCompliant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("CoreHoursWorked")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EarlyStartHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("EfficiencyPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsCalculationComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LateEndHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("LongestBreakDuration")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PremiumOvertimeHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("ProductiveWorkingTime")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("RegularOvertimeHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("TotalBreakTime")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("TotalTimeOnPremises")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("TrackingGaps")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("WorkEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkStartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceRecordId")
                        .IsUnique()
                        .HasDatabaseName("IX_WorkingDays_AttendanceRecordId");

                    b.HasIndex("CoreHoursCompliant")
                        .HasDatabaseName("IX_WorkingDays_CoreHoursCompliant");

                    b.HasIndex("IsCalculationComplete")
                        .HasDatabaseName("IX_WorkingDays_IsCalculationComplete");

                    b.ToTable("WorkingDays", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Branches.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Branches", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Branches.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DescriptionAr")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("ManagerEmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameAr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ParentDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerEmployeeId")
                        .HasDatabaseName("IX_Departments_ManagerEmployeeId");

                    b.HasIndex("ParentDepartmentId")
                        .HasDatabaseName("IX_Departments_ParentDepartmentId");

                    b.HasIndex("BranchId", "Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Departments_BranchId_Code");

                    b.HasIndex("BranchId", "IsActive", "SortOrder")
                        .HasDatabaseName("IX_Departments_BranchId_IsActive_SortOrder");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Common.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<long?>("ActorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PayloadJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("CreatedAtUtc");

                    b.HasIndex("EntityName");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Employees.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmploymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("JobTitleAr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ManagerEmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("WorkLocationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentId1");

                    b.HasIndex("ManagerEmployeeId");

                    b.HasIndex("BranchId", "EmployeeNumber")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Employees.EmployeeUserLink", b =>
                {
                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("EmployeeId", "UserId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeUserLinks", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Settings.OffDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasComment("Specific branch ID for branch-specific off days");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description or notes about the off day configuration");

                    b.Property<DateTime>("EffectiveFromDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date from which this configuration becomes effective");

                    b.Property<DateTime?>("EffectiveToDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date until which this configuration is valid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End date for custom period off days");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Whether this off day configuration is currently active");

                    b.Property<bool>("IsCompanyWide")
                        .HasColumnType("bit")
                        .HasComment("Whether this applies to all branches");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFriday")
                        .HasColumnType("bit")
                        .HasComment("Whether Friday is an off day");

                    b.Property<bool>("IsMonday")
                        .HasColumnType("bit")
                        .HasComment("Whether Monday is an off day");

                    b.Property<bool>("IsSaturday")
                        .HasColumnType("bit")
                        .HasComment("Whether Saturday is an off day");

                    b.Property<bool>("IsSunday")
                        .HasColumnType("bit")
                        .HasComment("Whether Sunday is an off day");

                    b.Property<bool>("IsThursday")
                        .HasColumnType("bit")
                        .HasComment("Whether Thursday is an off day");

                    b.Property<bool>("IsTuesday")
                        .HasColumnType("bit")
                        .HasComment("Whether Tuesday is an off day");

                    b.Property<bool>("IsWednesday")
                        .HasColumnType("bit")
                        .HasComment("Whether Wednesday is an off day");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Name/description of the off day configuration");

                    b.Property<string>("NameAr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Arabic name of the off day configuration");

                    b.Property<int>("OffDayType")
                        .HasColumnType("int")
                        .HasComment("Type of off day configuration (weekly/custom period)");

                    b.Property<bool>("OverridesPublicHolidays")
                        .HasColumnType("bit")
                        .HasComment("Whether this off day overrides public holidays");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasComment("Priority when multiple configurations overlap");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start date for custom period off days");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("IX_OffDays_BranchId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_OffDays_IsActive");

                    b.HasIndex("IsCompanyWide")
                        .HasDatabaseName("IX_OffDays_IsCompanyWide");

                    b.HasIndex("OffDayType")
                        .HasDatabaseName("IX_OffDays_OffDayType");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_OffDays_Priority");

                    b.HasIndex("EffectiveFromDate", "EffectiveToDate")
                        .HasDatabaseName("IX_OffDays_EffectiveDates");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("IX_OffDays_DateRange");

                    b.ToTable("OffDays", null, t =>
                        {
                            t.HasCheckConstraint("CK_OffDays_BranchSpecific", "([IsCompanyWide] = 1 AND [BranchId] IS NULL) OR ([IsCompanyWide] = 0 AND [BranchId] IS NOT NULL)");

                            t.HasCheckConstraint("CK_OffDays_CustomPeriodDates", "[OffDayType] != 1 OR ([StartDate] IS NOT NULL AND [EndDate] IS NOT NULL AND [EndDate] > [StartDate])");

                            t.HasCheckConstraint("CK_OffDays_EffectiveDates", "[EffectiveToDate] IS NULL OR [EffectiveToDate] > [EffectiveFromDate]");

                            t.HasCheckConstraint("CK_OffDays_Priority", "[Priority] >= 1");

                            t.HasCheckConstraint("CK_OffDays_WeeklyPattern", "[OffDayType] != 0 OR ([IsSunday] = 1 OR [IsMonday] = 1 OR [IsTuesday] = 1 OR [IsWednesday] = 1 OR [IsThursday] = 1 OR [IsFriday] = 1 OR [IsSaturday] = 1)");
                        });
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Settings.OvertimeConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("ConsiderFlexibleTime")
                        .HasColumnType("bit")
                        .HasComment("Whether to consider flexible time rules when calculating overtime");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveFromDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date from which this configuration becomes effective");

                    b.Property<DateTime?>("EffectiveToDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date until which this configuration is valid (null = indefinite)");

                    b.Property<bool>("EnablePostShiftOvertime")
                        .HasColumnType("bit");

                    b.Property<bool>("EnablePreShiftOvertime")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Whether this configuration is currently active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxPostShiftOvertimeHours")
                        .HasColumnType("decimal(4,2)")
                        .HasComment("Maximum post-shift overtime hours allowed per day");

                    b.Property<decimal>("MaxPreShiftOvertimeHours")
                        .HasColumnType("decimal(4,2)")
                        .HasComment("Maximum pre-shift overtime hours allowed per day");

                    b.Property<int>("MinimumOvertimeMinutes")
                        .HasColumnType("int")
                        .HasComment("Minimum minutes of overtime before it counts (e.g., 15)");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NormalDayRate")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Overtime rate multiplier for normal working days (e.g., 1.5 for 150%)");

                    b.Property<decimal>("OffDayRate")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Overtime rate multiplier for off days/weekends (e.g., 2.5 for 250%)");

                    b.Property<int>("OvertimeGracePeriodMinutes")
                        .HasColumnType("int")
                        .HasComment("Grace period in minutes before overtime calculation begins");

                    b.Property<string>("PolicyNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Additional notes about overtime policies");

                    b.Property<decimal>("PublicHolidayRate")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Overtime rate multiplier for public holidays (e.g., 2.0 for 200%)");

                    b.Property<bool>("RequireApproval")
                        .HasColumnType("bit")
                        .HasComment("Whether overtime requires manager approval");

                    b.Property<int>("RoundingIntervalMinutes")
                        .HasColumnType("int")
                        .HasComment("Rounding interval for overtime hours (0 = no rounding)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("WeekendAsOffDay")
                        .HasColumnType("bit")
                        .HasComment("Whether weekends are automatically considered off days");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_OvertimeConfigurations_IsActive");

                    b.HasIndex("EffectiveFromDate", "EffectiveToDate")
                        .HasDatabaseName("IX_OvertimeConfigurations_EffectiveDates");

                    b.ToTable("OvertimeConfigurations", null, t =>
                        {
                            t.HasCheckConstraint("CK_OvertimeConfigurations_EffectiveDates", "[EffectiveToDate] IS NULL OR [EffectiveToDate] > [EffectiveFromDate]");

                            t.HasCheckConstraint("CK_OvertimeConfigurations_MaxPostShiftOvertimeHours", "[MaxPostShiftOvertimeHours] >= 0");

                            t.HasCheckConstraint("CK_OvertimeConfigurations_MaxPreShiftOvertimeHours", "[MaxPreShiftOvertimeHours] >= 0");

                            t.HasCheckConstraint("CK_OvertimeConfigurations_MinimumOvertimeMinutes", "[MinimumOvertimeMinutes] >= 0");

                            t.HasCheckConstraint("CK_OvertimeConfigurations_NormalDayRate", "[NormalDayRate] > 0");

                            t.HasCheckConstraint("CK_OvertimeConfigurations_OffDayRate", "[OffDayRate] > 0");

                            t.HasCheckConstraint("CK_OvertimeConfigurations_OvertimeGracePeriodMinutes", "[OvertimeGracePeriodMinutes] >= 0");

                            t.HasCheckConstraint("CK_OvertimeConfigurations_PublicHolidayRate", "[PublicHolidayRate] > 0");

                            t.HasCheckConstraint("CK_OvertimeConfigurations_RoundingIntervalMinutes", "[RoundingIntervalMinutes] >= 0");
                        });
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Settings.PublicHoliday", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasComment("Specific branch ID for regional holidays");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("Country code for international holiday support");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Day")
                        .HasColumnType("int")
                        .HasComment("Day of month for recurring holidays (1-31)");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int")
                        .HasComment("Day of week for floating holidays");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description or notes about the holiday");

                    b.Property<int?>("EffectiveFromYear")
                        .HasColumnType("int")
                        .HasComment("Year from which this holiday becomes effective");

                    b.Property<int?>("EffectiveToYear")
                        .HasColumnType("int")
                        .HasComment("Year until which this holiday is valid");

                    b.Property<int>("HolidayType")
                        .HasColumnType("int")
                        .HasComment("Type of holiday recurrence pattern");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Whether this holiday is currently active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNational")
                        .HasColumnType("bit")
                        .HasComment("Whether this holiday applies to all branches");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Month")
                        .HasColumnType("int")
                        .HasComment("Month for recurring holidays (1-12)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Name of the public holiday");

                    b.Property<string>("NameAr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Arabic name of the public holiday");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasComment("Priority when multiple holidays fall on same date");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("SpecificDate")
                        .HasColumnType("datetime2")
                        .HasComment("Specific date for one-time holidays");

                    b.Property<int?>("WeekOccurrence")
                        .HasColumnType("int")
                        .HasComment("Week occurrence for floating holidays (1-5, -1 for last)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("IX_PublicHolidays_BranchId");

                    b.HasIndex("HolidayType")
                        .HasDatabaseName("IX_PublicHolidays_HolidayType");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_PublicHolidays_IsActive");

                    b.HasIndex("IsNational")
                        .HasDatabaseName("IX_PublicHolidays_IsNational");

                    b.HasIndex("SpecificDate")
                        .HasDatabaseName("IX_PublicHolidays_SpecificDate");

                    b.HasIndex("EffectiveFromYear", "EffectiveToYear")
                        .HasDatabaseName("IX_PublicHolidays_EffectiveYears");

                    b.HasIndex("Month", "Day")
                        .HasDatabaseName("IX_PublicHolidays_MonthDay");

                    b.ToTable("PublicHolidays", null, t =>
                        {
                            t.HasCheckConstraint("CK_PublicHolidays_BranchSpecific", "([IsNational] = 1 AND [BranchId] IS NULL) OR ([IsNational] = 0 AND [BranchId] IS NOT NULL)");

                            t.HasCheckConstraint("CK_PublicHolidays_Day", "[Day] IS NULL OR ([Day] >= 1 AND [Day] <= 31)");

                            t.HasCheckConstraint("CK_PublicHolidays_EffectiveYears", "[EffectiveToYear] IS NULL OR [EffectiveToYear] > [EffectiveFromYear]");

                            t.HasCheckConstraint("CK_PublicHolidays_Month", "[Month] IS NULL OR ([Month] >= 1 AND [Month] <= 12)");

                            t.HasCheckConstraint("CK_PublicHolidays_Priority", "[Priority] >= 1");

                            t.HasCheckConstraint("CK_PublicHolidays_WeekOccurrence", "[WeekOccurrence] IS NULL OR ([WeekOccurrence] BETWEEN -1 AND 5 AND [WeekOccurrence] != 0)");
                        });
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Shifts.Shift", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllowFlexibleHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<TimeOnly?>("CoreEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("CoreStart")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("FlexMinutesAfter")
                        .HasColumnType("int");

                    b.Property<int?>("FlexMinutesBefore")
                        .HasColumnType("int");

                    b.Property<int?>("GracePeriodMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("HasCoreHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAutoCheckOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCheckInRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("RequiresCheckInOut");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFriday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsMonday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsNightShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSaturday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSunday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsThursday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsTuesday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsWednesday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("RequiredHours")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("RequiredWeeklyHours")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Shifts", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Shifts.ShiftAssignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AssignedByUserId")
                        .HasColumnType("bigint")
                        .HasComment("ID of the user who created this assignment");

                    b.Property<int>("AssignmentType")
                        .HasColumnType("int")
                        .HasComment("Type of assignment: Employee (1), Department (2), or Branch (3)");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint")
                        .HasComment("Branch ID for branch-level assignments (null for employee/department assignments)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasComment("Department ID for department-level assignments (null for employee/branch assignments)");

                    b.Property<DateTime>("EffectiveFromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EffectiveFromDate")
                        .HasComment("Date when this assignment becomes active");

                    b.Property<DateTime?>("EffectiveToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EffectiveToDate")
                        .HasComment("Optional end date for temporary assignments");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasComment("Employee ID for employee-level assignments (null for department/branch assignments)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional notes about the assignment");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10)
                        .HasComment("Assignment priority for conflict resolution (higher values take precedence)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("ShiftId")
                        .HasColumnType("bigint")
                        .HasComment("Foreign key to the Shift entity being assigned");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("Assignment status: Pending (1), Active (2), Inactive (3), Expired (4), Cancelled (5)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShiftId")
                        .HasDatabaseName("IX_ShiftAssignments_ShiftId")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("AssignmentType", "BranchId", "EffectiveFromDate")
                        .HasDatabaseName("IX_ShiftAssignments_Branch_EffectiveFromDate")
                        .HasFilter("[IsDeleted] = 0 AND [AssignmentType] = 3 AND [BranchId] IS NOT NULL");

                    b.HasIndex("AssignmentType", "DepartmentId", "EffectiveFromDate")
                        .HasDatabaseName("IX_ShiftAssignments_Department_EffectiveFromDate")
                        .HasFilter("[IsDeleted] = 0 AND [AssignmentType] = 2 AND [DepartmentId] IS NOT NULL");

                    b.HasIndex("AssignmentType", "EmployeeId", "EffectiveFromDate")
                        .HasDatabaseName("IX_ShiftAssignments_Employee_EffectiveFromDate")
                        .HasFilter("[IsDeleted] = 0 AND [AssignmentType] = 1 AND [EmployeeId] IS NOT NULL");

                    b.HasIndex("Priority", "Status", "EffectiveFromDate")
                        .HasDatabaseName("IX_ShiftAssignments_Priority_Status_EffectiveFromDate")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("Status", "EffectiveFromDate", "EffectiveToDate")
                        .HasDatabaseName("IX_ShiftAssignments_Status_EffectiveFromDate_EffectiveToDate")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("ShiftAssignments", null, t =>
                        {
                            t.HasCheckConstraint("CK_ShiftAssignments_BranchTypeMatch", "([AssignmentType] = 3 AND [BranchId] IS NOT NULL AND [EmployeeId] IS NULL AND [DepartmentId] IS NULL) OR\r\n              ([AssignmentType] != 3)");

                            t.HasCheckConstraint("CK_ShiftAssignments_DepartmentTypeMatch", "([AssignmentType] = 2 AND [DepartmentId] IS NOT NULL AND [EmployeeId] IS NULL AND [BranchId] IS NULL) OR\r\n              ([AssignmentType] != 2)");

                            t.HasCheckConstraint("CK_ShiftAssignments_EmployeeTypeMatch", "([AssignmentType] = 1 AND [EmployeeId] IS NOT NULL AND [DepartmentId] IS NULL AND [BranchId] IS NULL) OR\r\n              ([AssignmentType] != 1)");

                            t.HasCheckConstraint("CK_ShiftAssignments_EndDateAfterEffectiveDate", "[EffectiveToDate] IS NULL OR [EffectiveToDate] > [EffectiveFromDate]");

                            t.HasCheckConstraint("CK_ShiftAssignments_SingleTargetType", "(CASE WHEN [AssignmentType] = 1 THEN 1 ELSE 0 END) +\r\n              (CASE WHEN [AssignmentType] = 2 THEN 1 ELSE 0 END) +\r\n              (CASE WHEN [AssignmentType] = 3 THEN 1 ELSE 0 END) = 1");

                            t.HasCheckConstraint("CK_ShiftAssignments_ValidPriority", "[Priority] >= 0 AND [Priority] <= 100");
                        });
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Shifts.ShiftPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<decimal>("Hours")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNightPeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PeriodOrder")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("ShiftId")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId", "PeriodOrder")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("ShiftPeriods", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.BlacklistedToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAtUtc");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("BlacklistedTokens", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.LoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AttemptedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AttemptedAtUtc");

                    b.HasIndex("IpAddress");

                    b.HasIndex("UserId");

                    b.HasIndex("Username");

                    b.HasIndex("Username", "AttemptedAtUtc");

                    b.ToTable("LoginAttempts", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.PasswordHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ChangedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChangedAtUtc");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordHistory", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.TwoFactorBackupCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UsedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Code")
                        .IsUnique();

                    b.ToTable("TwoFactorBackupCodes", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastFailedLoginAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockoutEndUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PasswordChangedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("en");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorSecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.UserBranchScope", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("UserBranchScopes", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.UserSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceFingerprint")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCurrentSession")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccessedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAtUtc");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.HasIndex("UserId", "IsActive");

                    b.ToTable("UserSessions", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.VacationTypes.VacationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAr")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("IX_VacationTypes_BranchId")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_VacationTypes_IsActive")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("BranchId", "IsActive")
                        .HasDatabaseName("IX_VacationTypes_BranchId_IsActive")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("BranchId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_VacationTypes_BranchId_Name_Unique")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("VacationTypes", (string)null);
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Vacations.EmployeeVacation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("UTC timestamp when record was created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("User who created the record");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasComment("Employee identifier for vacation assignment");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End date of vacation period");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether vacation is approved and affects attendance");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("datetime2")
                        .HasComment("UTC timestamp when record was last modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("User who last modified the record");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Optional notes about the vacation");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("Concurrency control timestamp");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start date of vacation period");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int")
                        .HasComment("Total number of vacation days");

                    b.Property<long>("VacationTypeId")
                        .HasColumnType("bigint")
                        .HasComment("Vacation type identifier for categorization");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("IX_EmployeeVacations_EmployeeId")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("IsApproved")
                        .HasDatabaseName("IX_EmployeeVacations_IsApproved")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("VacationTypeId")
                        .HasDatabaseName("IX_EmployeeVacations_VacationTypeId")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("EmployeeId", "EndDate")
                        .HasDatabaseName("IX_EmployeeVacations_Employee_EndDate")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("EmployeeId", "StartDate")
                        .HasDatabaseName("IX_EmployeeVacations_Employee_StartDate")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("IX_EmployeeVacations_DateRange")
                        .HasFilter("IsDeleted = 0 AND IsApproved = 1");

                    b.ToTable("EmployeeVacations", null, t =>
                        {
                            t.HasCheckConstraint("CK_EmployeeVacations_PositiveTotalDays", "TotalDays > 0");

                            t.HasCheckConstraint("CK_EmployeeVacations_ValidDateRange", "EndDate >= StartDate");
                        });
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Attendance.AttendanceRecord", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TimeAttendanceSystem.Domain.Shifts.ShiftAssignment", "ShiftAssignment")
                        .WithMany()
                        .HasForeignKey("ShiftAssignmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employee");

                    b.Navigation("ShiftAssignment");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Attendance.AttendanceTransaction", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Attendance.AttendanceRecord", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AttendanceRecordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TimeAttendanceSystem.Domain.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TimeAttendanceSystem.Domain.Users.User", "EnteredByUser")
                        .WithMany()
                        .HasForeignKey("EnteredByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TimeAttendanceSystem.Domain.Users.User", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("EnteredByUser");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Attendance.WorkingDay", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Attendance.AttendanceRecord", "AttendanceRecord")
                        .WithOne()
                        .HasForeignKey("TimeAttendanceSystem.Domain.Attendance.WorkingDay", "AttendanceRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceRecord");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Branches.Department", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Branches.Branch", "Branch")
                        .WithMany("Departments")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TimeAttendanceSystem.Domain.Branches.Department", "ParentDepartment")
                        .WithMany("SubDepartments")
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Employees.Employee", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Branches.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TimeAttendanceSystem.Domain.Branches.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TimeAttendanceSystem.Domain.Branches.Department", null)
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId1");

                    b.HasOne("TimeAttendanceSystem.Domain.Employees.Employee", "Manager")
                        .WithMany("DirectReports")
                        .HasForeignKey("ManagerEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("Department");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Employees.EmployeeUserLink", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Employees.Employee", "Employee")
                        .WithOne("EmployeeUserLink")
                        .HasForeignKey("TimeAttendanceSystem.Domain.Employees.EmployeeUserLink", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeAttendanceSystem.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Settings.OffDay", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Branches.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_OffDays_Branches");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Settings.PublicHoliday", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Branches.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_PublicHolidays_Branches");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Shifts.ShiftAssignment", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Branches.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ShiftAssignments_Branches");

                    b.HasOne("TimeAttendanceSystem.Domain.Branches.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ShiftAssignments_Departments");

                    b.HasOne("TimeAttendanceSystem.Domain.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ShiftAssignments_Employees");

                    b.HasOne("TimeAttendanceSystem.Domain.Shifts.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ShiftAssignments_Shifts");

                    b.Navigation("Branch");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Shifts.ShiftPeriod", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Shifts.Shift", "Shift")
                        .WithMany("ShiftPeriods")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.BlacklistedToken", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.LoginAttempt", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Users.User", "User")
                        .WithMany("LoginAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.PasswordHistory", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Users.User", "User")
                        .WithMany("PasswordHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.RefreshToken", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.RolePermission", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Users.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeAttendanceSystem.Domain.Users.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.TwoFactorBackupCode", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Users.User", "User")
                        .WithMany("TwoFactorBackupCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.UserBranchScope", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Branches.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeAttendanceSystem.Domain.Users.User", "User")
                        .WithMany("UserBranchScopes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.UserRole", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Users.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeAttendanceSystem.Domain.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.UserSession", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Users.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.VacationTypes.VacationType", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Branches.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Vacations.EmployeeVacation", b =>
                {
                    b.HasOne("TimeAttendanceSystem.Domain.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeVacations_Employees");

                    b.HasOne("TimeAttendanceSystem.Domain.VacationTypes.VacationType", "VacationType")
                        .WithMany()
                        .HasForeignKey("VacationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeVacations_VacationTypes");

                    b.Navigation("Employee");

                    b.Navigation("VacationType");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Attendance.AttendanceRecord", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Branches.Branch", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Branches.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Employees.Employee", b =>
                {
                    b.Navigation("DirectReports");

                    b.Navigation("EmployeeUserLink");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Shifts.Shift", b =>
                {
                    b.Navigation("ShiftPeriods");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TimeAttendanceSystem.Domain.Users.User", b =>
                {
                    b.Navigation("LoginAttempts");

                    b.Navigation("PasswordHistory");

                    b.Navigation("RefreshTokens");

                    b.Navigation("TwoFactorBackupCodes");

                    b.Navigation("UserBranchScopes");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
