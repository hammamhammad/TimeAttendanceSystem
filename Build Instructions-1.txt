System Goals & Non‑Functionals (for AI to honor)

Reliability: 99.9% API uptime target; idempotent writes via request IDs for mobile.

Security & Privacy: OWASP ASVS L2; encrypt secrets at rest; PII minimization; role‑based access + policy authorization.

Scalability: Single DB (Phase‑1) with tenant_scope by Branch; easy lift to per‑tenant DB later.

Extensibility: Clean domain boundaries (Users, Employees, Branches, Roles/Permissions, SSO, Audit).

Localization: Full RTL/LTR support; server returns localized strings only when needed—business data remains language‑agnostic.

Time & Attendance Correctness: Central time zone handling; audit all changes affecting pay.

2) Architecture Overview

API layers:

Presentation (Controllers, Filters, ProblemDetails, ModelValidation)

Application (CQRS commands/queries, DTOs, service interfaces)

Domain (Entities, Value Objects, Policies, Domain Events)

Infrastructure (EF Core, Repositories, Migrations, Email/SMS providers, Cache)

AuthN/AuthZ: JWT access + refresh tokens; optional Microsoft Entra ID (OIDC) later. RBAC (+ optional ABAC claims like branch scope).

Multi‑branch: Soft multi‑tenancy via BranchId + global query filters; system admin bypasses filters.

Observability: Structured logging (Serilog), tracing (OpenTelemetry), metrics (Prometheus exporters).

3) Solution Structure (ask AI to scaffold)
src/
  Api/
    Controllers/
    Filters/
    Middlewares/
    Models/ (Requests, Responses)
    Config/
  Application/
    Abstractions/
    Users/
    Employees/
    Branches/
    Authorization/
  Domain/
    Users/
    Employees/
    Branches/
    Common/
  Infrastructure/
    Persistence/
      Configurations/ (EF IEntityTypeConfiguration<T>)
      Migrations/
    Identity/
    Services/
    Security/
  Shared/
    Localization/
    Contracts/


tests/
  UnitTests/
  IntegrationTests/
4) Phase‑1 Database Design (SQL Server)

Conventions: Id PK (BIGINT IDENTITY or GUID per table); natural keys unique. Every table: CreatedAtUtc, CreatedBy, ModifiedAtUtc, ModifiedBy, IsDeleted BIT, RowVersion ROWVERSION.

Core Tables

Branches

Id, Code (unique), Name, TimeZone (IANA string), IsActive

Departments (Org Units)

Id, BranchId FK→Branches, Name, ParentDepartmentId (nullable self‑FK)

Users (login accounts)

Id, Username (unique), Email (unique), Phone, PasswordHash, PasswordSalt (if not using ASP.NET Identity), TwoFactorEnabled, LockoutEndUtc, MustChangePassword, PreferredLanguage ("ar", "en"), IsActive

Roles

Id, Name (unique) [SystemAdmin, Admin, HROperation], IsSystem (BIT), IsEditable (BIT), IsDeletable (BIT)

Permissions

Id, Key (unique, e.g., user.manage, employee.read), Group, Description

RolePermissions

RoleId, PermissionId (PK on both)

UserRoles

UserId, RoleId (PK on both)

UserBranchScopes (ABAC for branch scoping)

UserId, BranchId (PK on both); SystemAdmin has none/ignored (full access)

Employees (HR profiles)

Id, BranchId, EmployeeNumber (unique per branch), FirstName, LastName, FirstNameAr, LastNameAr, NationalId, Email, Phone, DateOfBirth, Gender, HireDate, EmploymentStatus, JobTitle, JobTitleAr, DepartmentId, ManagerEmployeeId (self‑FK), WorkLocationType (Onsite/Hybrid/Remote), PhotoUrl

EmployeeUserLinks

EmployeeId, UserId (1:1 optional)

AuditLogs

Id, ActorUserId, Action (Create/Update/Delete/Login/etc.), EntityName, EntityId, PayloadJson, IpAddress, UserAgent, CreatedAtUtc

RefreshTokens

Id, UserId, Token, ExpiresAtUtc, RevokedAtUtc, DeviceInfo, CreatedAtUtc

Future tables (not in Phase‑1 delivery but reserve keys): Shifts, ShiftPatterns, Schedules, AttendanceLogs, Devices, LeaveTypes, LeaveRequests, Holidays.

5) Seed Data & Immutability Rules

Seed System Admin role with full permissions; flags: IsSystem=1, IsEditable=0, IsDeletable=0.

Seed Admin role: all permissions except any under user.* (User Management module: roles, users, permissions).

Seed HR Operation role: minimal—employee.read, employee.create, employee.update, employee.export, branch.read, department.read (no delete by default).

Seed an initial SystemAdmin user; password rotation required at first login.

Seed at least one Branch (e.g., HQ with Asia/Riyadh).

Guardrails:

API must reject modifications/deletion to System Admin role or its membership.

Users with System Admin role bypass branch filters; others are restricted to UserBranchScopes.

6) Authorization Model (RBAC + policies)

Permissions taxonomy (Phase‑1 subset):

user.*: user.read, user.create, user.update, user.assignRole, user.resetPassword, user.lock, user.unlock.

role.*: role.read, role.assignPermission (no create/delete in Phase‑1 except by SystemAdmin).

employee.*: employee.read, employee.create, employee.update, employee.delete, employee.export.

branch.*: branch.read.

department.*: department.read.

Implement policy handlers that check both permission and branch scope for resource access.

Prefer claims: permissions (list), role, branch_scope (list of BranchIds), locale.

7) Authentication & Security

Passwords: Argon2id or PBKDF2 (ASP.NET Identity defaults acceptable), lockout after N attempts, 2FA (email/OTP) optional.

JWT: 15 min access token, 7–30 day refresh; rotate refresh tokens; store device metadata.

CORS: Allow Flutter mobile app origins; strict headers.

Input validation: FluentValidation; max request size; file type allow‑list.

Audit every change to Users, Roles, Permissions, Employees, EmployeeUserLinks.

Soft delete with IsDeleted; global query filters.

RowVersion for optimistic concurrency.

PII fields encrypted at rest if required (e.g., NationalId) via Always Encrypted or app‑level crypto.

8) Globalization (i18n/L10n)

Store master data in neutral form. Keep Arabic/English name fields where needed (e.g., JobTitle/JobTitleAr).

Use Accept‑Language header to localize validation messages & problem details.

Date/time returned in UTC with client‑side conversion by time zone; for reports, API can accept targetTimeZone.

9) API Standards & Conventions

Versioning: URL (/api/v1/...).

Resource naming: plural, kebab‑case.

Pagination: page, pageSize, sort, filter, search.

Errors: RFC 7807 ProblemDetails with traceId.

Idempotency: Accept Idempotency-Key header for POSTs from mobile.

OpenAPI: Swashbuckle; secure endpoints documented; example payloads.

Phase‑1 Endpoints (minimal):

Auth

POST /api/v1/auth/login (username/password)

POST /api/v1/auth/refresh

POST /api/v1/auth/logout (revoke refresh)

Users (SystemAdmin & Admin per permissions)

GET /api/v1/users (filters: branch, role, status, search)

POST /api/v1/users

GET /api/v1/users/{id}

PUT /api/v1/users/{id}

DELETE /api/v1/users/{id} (soft)

POST /api/v1/users/{id}:reset-password

POST /api/v1/users/{id}:lock / :unlock

POST /api/v1/users/{id}/roles (assign/remove)

GET /api/v1/users/{id}/audit

Roles/Permissions

GET /api/v1/roles / GET /api/v1/permissions

POST /api/v1/roles/{id}/permissions (assign/remove) [SystemAdmin only]

Branches

GET /api/v1/branches (list, detail)

Departments

GET /api/v1/departments (tree by branch)

Employees

GET /api/v1/employees (filters: branch, dept, status, managerId, search)

POST /api/v1/employees

GET /api/v1/employees/{id}

PUT /api/v1/employees/{id}

DELETE /api/v1/employees/{id} (soft)

POST /api/v1/employees/{id}/link-user (create/update EmployeeUserLinks)

GET /api/v1/employees/{id}/audit

10) EF Core Patterns & Configuration

Use IEntityTypeConfiguration per aggregate; configure keys, indexes (e.g., IX_Employees_BranchId_EmployeeNumber unique), query filters for IsDeleted & branch scope via injected ICurrentUser.

Value converters for enums; shadow properties for audit fields.

Outbox table (future) if domain events need reliable messaging.

11) Auditing Strategy

Implement an IAuditService invoked in SaveChangesAsync to diff tracked entities and persist AuditLogs with before/after snapshots (PII-safe redaction rules).

Expose read‑only audit endpoints for Users/Employees.