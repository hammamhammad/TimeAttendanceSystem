{
  "version": 3,
  "sources": ["src/app/pages/shifts/shifts.component.ts", "src/app/pages/shifts/shifts.component.html"],
  "sourcesContent": ["import { Component, OnInit, signal, inject, computed } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { I18nService } from '../../core/i18n/i18n.service';\nimport { ShiftsService } from './shifts.service';\nimport { BranchesService } from '../branches/branches.service';\nimport { ModalWrapperComponent } from '../../shared/components/modal-wrapper/modal-wrapper.component';\nimport {\n  Shift,\n  ShiftType,\n  ShiftStatus,\n  ShiftsResponse,\n  CreateShiftRequest,\n  UpdateShiftRequest,\n  CreateShiftPeriodRequest,\n  UpdateShiftPeriodRequest\n} from '../../shared/models/shift.model';\nimport { Branch } from '../../shared/models/branch.model';\nimport { PermissionService } from '../../core/auth/permission.service';\nimport { PermissionResources, PermissionActions } from '../../shared/utils/permission.utils';\nimport { HasPermissionDirective } from '../../shared/directives/has-permission.directive';\nimport { SearchableSelectComponent, SearchableSelectOption } from '../../shared/components/searchable-select/searchable-select.component';\nimport { DataTableComponent, TableColumn, TableAction } from '../../shared/components/data-table/data-table.component';\nimport { PageHeaderComponent } from '../../shared/components/page-header/page-header.component';\nimport { UnifiedFilterComponent } from '../../shared/components/unified-filter/unified-filter.component';\nimport { StatusBadgeComponent } from '../../shared/components/status-badge/status-badge.component';\n\n@Component({\n  selector: 'app-shifts',\n  standalone: true,\n  imports: [CommonModule, FormsModule, HasPermissionDirective, SearchableSelectComponent, DataTableComponent, PageHeaderComponent, UnifiedFilterComponent, StatusBadgeComponent, ModalWrapperComponent],\n  templateUrl: './shifts.component.html',\n  styleUrls: ['./shifts.component.css']\n})\nexport class ShiftsComponent implements OnInit {\n  private shiftsService = inject(ShiftsService);\n  private branchesService = inject(BranchesService);\n  private router = inject(Router);\n  public i18n = inject(I18nService);\n  public permissionService = inject(PermissionService);\n\n  // Permission constants for use in template\n  readonly PERMISSIONS = {\n    SHIFT_CREATE: `${PermissionResources.SHIFT}.${PermissionActions.CREATE}`,\n    SHIFT_READ: `${PermissionResources.SHIFT}.${PermissionActions.READ}`,\n    SHIFT_UPDATE: `${PermissionResources.SHIFT}.${PermissionActions.UPDATE}`,\n    SHIFT_DELETE: `${PermissionResources.SHIFT}.${PermissionActions.DELETE}`,\n    SHIFT_MANAGE: `${PermissionResources.SHIFT}.${PermissionActions.MANAGE}`\n  };\n\n  // Enum references for template\n  readonly ShiftType = ShiftType;\n  readonly ShiftStatus = ShiftStatus;\n\n\n  // Page size options for searchable select\n  get pageSizeSelectOptions(): SearchableSelectOption[] {\n    return [\n      { value: '10', label: '10' },\n      { value: '25', label: '25' },\n      { value: '50', label: '50' }\n    ];\n  }\n\n  // Status options for searchable select\n  get statusSelectOptions(): SearchableSelectOption[] {\n    return [\n      { value: ShiftStatus.Active.toString(), label: this.t('shifts.status.active') },\n      { value: ShiftStatus.Inactive.toString(), label: this.t('shifts.status.inactive') },\n      { value: ShiftStatus.Draft.toString(), label: this.t('shifts.status.draft') },\n      { value: ShiftStatus.Archived.toString(), label: this.t('shifts.status.archived') }\n    ];\n  }\n\n  // Signals for state management\n  loading = signal(false);\n  shifts = signal<Shift[]>([]);\n  branches = signal<Branch[]>([]);\n  defaultShift = signal<Shift | null>(null);\n\n  // Pagination\n  currentPage = signal(1);\n  pageSize = signal(10);\n  totalCount = signal(0);\n  totalPages = signal(0);\n\n  // Filters\n  searchTerm = '';\n  branchFilter: number | undefined = undefined;\n\n  // Modal state\n  showCreateModal = signal(false);\n  showEditModal = signal(false);\n  showDeleteModal = signal(false);\n  showDefaultShiftModal = signal(false);\n  selectedShift = signal<Shift | null>(null);\n\n  // Form state\n  shiftForm = {\n    name: '',\n    description: '',\n    shiftType: ShiftType.TimeBased,\n    status: ShiftStatus.Active,\n    requiredHours: undefined as number | undefined,\n    isCheckInRequired: true,\n    isAutoCheckOut: false,\n    allowFlexibleHours: false,\n    flexMinutesBefore: undefined as number | undefined,\n    flexMinutesAfter: undefined as number | undefined,\n    gracePeriodMinutes: undefined as number | undefined,\n    shiftPeriods: [] as Array<{\n      id?: number;\n      periodOrder: number;\n      startTime: string;\n      endTime: string;\n    }>\n  };\n\n  submitting = signal(false);\n\n  // Data table configuration\n  tableColumns = computed<TableColumn[]>(() => [\n    {\n      key: 'name',\n      label: this.t('shifts.fields.name'),\n      sortable: true,\n      width: '250px',\n      priority: 'high',\n      mobileLabel: this.t('shifts.fields.name'),\n      renderHtml: true\n    },\n    {\n      key: 'status',\n      label: this.t('shifts.fields.status'),\n      sortable: true,\n      width: '120px',\n      align: 'center',\n      priority: 'high',\n      mobileLabel: this.t('shifts.fields.status'),\n      renderHtml: true\n    },\n    {\n      key: 'type',\n      label: this.t('shifts.fields.type'),\n      sortable: false,\n      width: '120px',\n      align: 'center',\n      priority: 'medium',\n      hideOnMobile: false,\n      mobileLabel: this.t('shifts.fields.type'),\n      renderHtml: true\n    },\n    {\n      key: 'periods',\n      label: this.t('shifts.fields.periods'),\n      sortable: false,\n      width: '200px',\n      priority: 'medium',\n      hideOnMobile: false,\n      mobileLabel: 'Periods',\n      renderHtml: true\n    },\n    {\n      key: 'requirements',\n      label: this.t('shifts.fields.requirements'),\n      sortable: false,\n      width: '180px',\n      priority: 'low',\n      hideOnMobile: true,\n      mobileLabel: 'Rules',\n      renderHtml: true\n    }\n  ]);\n\n  tableActions = computed<TableAction[]>(() => [\n    {\n      key: 'view',\n      label: this.t('common.view'),\n      icon: 'fa-eye',\n      color: 'primary',\n      condition: () => this.permissionService.has(this.PERMISSIONS.SHIFT_READ)\n    },\n    {\n      key: 'set-default',\n      label: this.t('shifts.defaultShift.setDefault'),\n      icon: 'fa-star',\n      color: 'success',\n      condition: (shift: Shift) => this.canSetDefaultShift(shift)\n    },\n    {\n      key: 'edit',\n      label: this.t('common.edit'),\n      icon: 'fa-edit',\n      color: 'secondary',\n      condition: () => this.permissionService.has(this.PERMISSIONS.SHIFT_UPDATE)\n    },\n    {\n      key: 'delete',\n      label: this.t('common.delete'),\n      icon: 'fa-trash',\n      color: 'danger',\n      condition: () => this.permissionService.has(this.PERMISSIONS.SHIFT_DELETE)\n    }\n  ]);\n\n  // Transform shifts data for data table\n  tableData = computed(() => {\n    return this.shifts().map(shift => ({\n      ...shift,\n      name: this.formatShiftName(shift),\n      status: this.formatShiftStatus(shift),\n      type: this.formatShiftType(shift),\n      periods: this.formatShiftPeriods(shift),\n      requirements: this.formatShiftRequirements(shift)\n    }));\n  });\n\n  ngOnInit(): void {\n    this.loadBranches();\n    this.loadShifts();\n    this.loadDefaultShift();\n  }\n\n  t(key: string): string {\n    return this.i18n.t(key);\n  }\n\n  loadBranches(): void {\n    this.branchesService.getBranches(1, 1000).subscribe({\n      next: (response) => {\n        this.branches.set(response.items);\n      },\n      error: (error) => {\n        console.error('Failed to load branches:', error);\n      }\n    });\n  }\n\n  loadShifts(): void {\n    this.loading.set(true);\n\n    const search = this.searchTerm.trim() || undefined;\n\n    this.shiftsService.getShifts(\n      this.currentPage(),\n      this.pageSize(),\n      search\n    ).subscribe({\n      next: (response: ShiftsResponse) => {\n        this.shifts.set(response.items);\n        this.totalCount.set(response.totalCount);\n        this.totalPages.set(response.totalPages);\n        this.loading.set(false);\n      },\n      error: (error) => {\n        console.error('Failed to load shifts:', error);\n        this.loading.set(false);\n      }\n    });\n  }\n\n  loadDefaultShift(): void {\n    this.shiftsService.getDefaultShift().subscribe({\n      next: (defaultShift) => {\n        this.defaultShift.set(defaultShift);\n      },\n      error: (error) => {\n        console.error('Failed to load default shift:', error);\n        this.defaultShift.set(null);\n      }\n    });\n  }\n\n  onSearch(): void {\n    this.currentPage.set(1);\n    this.loadShifts();\n  }\n\n  /**\n   * Handle search input changes from filters component\n   */\n  onSearchChange(searchTerm: string): void {\n    this.searchTerm = searchTerm;\n    this.currentPage.set(1);\n    this.loadShifts();\n  }\n\n  /**\n   * Handle filters change from filters component\n   */\n  onFiltersChange(filters: any): void {\n    if (filters.search !== undefined) {\n      this.searchTerm = filters.search || '';\n    }\n    if (filters.status !== undefined) {\n      // Handle status filter if needed\n    }\n    if (filters.shiftType !== undefined) {\n      // Handle shift type filter if needed\n    }\n    this.currentPage.set(1);\n    this.loadShifts();\n  }\n\n  /**\n   * Handle refresh data request\n   */\n  onRefreshData(): void {\n    this.loadShifts();\n  }\n\n  onFilterChange(): void {\n    this.currentPage.set(1);\n    this.loadShifts();\n  }\n\n  onPageChange(page: number): void {\n    this.currentPage.set(page);\n    this.loadShifts();\n  }\n\n  onPageSizeSelectionChange(pageSizeStr: string): void {\n    this.pageSize.set(parseInt(pageSizeStr));\n    this.onPageSizeChange();\n  }\n\n  onPageSizeChange(): void {\n    this.currentPage.set(1);\n    this.loadShifts();\n  }\n\n  getShiftTypeText(shiftType: ShiftType): string {\n    return shiftType === ShiftType.TimeBased\n      ? this.t('shifts.types.timeBased')\n      : this.t('shifts.types.hoursOnly');\n  }\n\n  getShiftStatusText(status: ShiftStatus): string {\n    switch (status) {\n      case ShiftStatus.Active:\n        return this.t('shifts.status.active');\n      case ShiftStatus.Inactive:\n        return this.t('shifts.status.inactive');\n      case ShiftStatus.Draft:\n        return this.t('shifts.status.draft');\n      case ShiftStatus.Archived:\n        return this.t('shifts.status.archived');\n      default:\n        return this.t('shifts.status.active');\n    }\n  }\n\n  getShiftStatusClass(status: ShiftStatus): string {\n    switch (status) {\n      case ShiftStatus.Active:\n        return 'bg-success';\n      case ShiftStatus.Inactive:\n        return 'bg-light text-dark border';\n      case ShiftStatus.Draft:\n        return 'bg-warning';\n      case ShiftStatus.Archived:\n        return 'bg-light text-dark border';\n      default:\n        return 'bg-success';\n    }\n  }\n\n  getShiftStatusBadgeStatus(status: ShiftStatus): 'success' | 'info' | 'warning' | 'primary' | 'danger' | 'secondary' {\n    switch (status) {\n      case ShiftStatus.Active:\n        return 'success';\n      case ShiftStatus.Inactive:\n        return 'secondary';\n      case ShiftStatus.Draft:\n        return 'warning';\n      case ShiftStatus.Archived:\n        return 'secondary';\n      default:\n        return 'success';\n    }\n  }\n\n  formatTime(timeString: string): string {\n    return timeString; // Already in HH:mm format\n  }\n\n  formatHours(hours: number): string {\n    const wholeHours = Math.floor(hours);\n    const minutes = Math.round((hours - wholeHours) * 60);\n    return minutes > 0 ? `${wholeHours}h ${minutes}m` : `${wholeHours}h`;\n  }\n\n  getShiftTypeBadgeClass(shiftType: ShiftType): string {\n    return shiftType === ShiftType.TimeBased ? 'badge-primary' : 'badge-info';\n  }\n\n  getPeriodTypeText(period: { startTime: string; endTime: string }): string {\n    const isNight = this.isNightShift(period.startTime, period.endTime);\n    return isNight ? this.t('shifts.periodTypes.nightShift') : this.t('shifts.periodTypes.dayShift');\n  }\n\n  getPeriodHoursText(period: { startTime: string; endTime: string }): string {\n    const hours = this.calculatePeriodHours(period.startTime, period.endTime);\n    return this.formatHours(hours);\n  }\n\n  formatDate(dateString: string): string {\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }\n\n  // CRUD Operations\n  onCreateShift(): void {\n    this.router.navigate(['/shifts/create']);\n  }\n\n  onViewShift(shift: Shift): void {\n    this.router.navigate(['/shifts', shift.id, 'view']);\n  }\n\n  onEditShift(shift: Shift): void {\n    this.router.navigate(['/shifts', shift.id, 'edit']);\n  }\n\n  onDeleteShift(shift: Shift): void {\n    this.selectedShift.set(shift);\n    this.showDeleteModal.set(true);\n  }\n\n  onSubmitCreate(): void {\n    if (!this.isFormValid()) return;\n\n    this.submitting.set(true);\n    const request: CreateShiftRequest = {\n      name: this.shiftForm.name.trim(),\n      description: this.shiftForm.description.trim() || undefined,\n      shiftType: this.shiftForm.shiftType,\n      status: this.shiftForm.status,\n      requiredHours: this.shiftForm.requiredHours,\n      isCheckInRequired: this.shiftForm.isCheckInRequired,\n      isAutoCheckOut: this.shiftForm.isAutoCheckOut,\n      allowFlexibleHours: this.shiftForm.allowFlexibleHours,\n      flexMinutesBefore: this.shiftForm.flexMinutesBefore,\n      flexMinutesAfter: this.shiftForm.flexMinutesAfter,\n      gracePeriodMinutes: this.shiftForm.gracePeriodMinutes,\n      shiftPeriods: this.shiftForm.shiftPeriods.length > 0\n        ? this.shiftForm.shiftPeriods.map(sp => ({\n            periodOrder: sp.periodOrder,\n            startTime: sp.startTime,\n            endTime: sp.endTime\n          } as CreateShiftPeriodRequest))\n        : undefined\n    };\n\n    this.shiftsService.createShift(request).subscribe({\n      next: () => {\n        this.showCreateModal.set(false);\n        this.loadShifts();\n        this.submitting.set(false);\n      },\n      error: (error) => {\n        console.error('Failed to create shift:', error);\n        this.submitting.set(false);\n      }\n    });\n  }\n\n  onSubmitEdit(): void {\n    if (!this.isFormValid() || !this.selectedShift()) return;\n\n    this.submitting.set(true);\n    const request: UpdateShiftRequest = {\n      name: this.shiftForm.name.trim(),\n      description: this.shiftForm.description.trim() || undefined,\n      shiftType: this.shiftForm.shiftType,\n      status: this.shiftForm.status,\n      requiredHours: this.shiftForm.requiredHours,\n      isCheckInRequired: this.shiftForm.isCheckInRequired,\n      isAutoCheckOut: this.shiftForm.isAutoCheckOut,\n      allowFlexibleHours: this.shiftForm.allowFlexibleHours,\n      flexMinutesBefore: this.shiftForm.flexMinutesBefore,\n      flexMinutesAfter: this.shiftForm.flexMinutesAfter,\n      gracePeriodMinutes: this.shiftForm.gracePeriodMinutes,\n      shiftPeriods: this.shiftForm.shiftPeriods.length > 0\n        ? this.shiftForm.shiftPeriods.map(sp => ({\n            id: sp.id,\n            periodOrder: sp.periodOrder,\n            startTime: sp.startTime,\n            endTime: sp.endTime\n          } as UpdateShiftPeriodRequest))\n        : undefined\n    };\n\n    this.shiftsService.updateShift(this.selectedShift()!.id, request).subscribe({\n      next: () => {\n        this.showEditModal.set(false);\n        this.loadShifts();\n        this.submitting.set(false);\n      },\n      error: (error) => {\n        console.error('Failed to update shift:', error);\n        this.submitting.set(false);\n      }\n    });\n  }\n\n  onConfirmDelete(): void {\n    if (!this.selectedShift()) return;\n\n    this.submitting.set(true);\n    this.shiftsService.deleteShift(this.selectedShift()!.id).subscribe({\n      next: () => {\n        this.showDeleteModal.set(false);\n        this.loadShifts();\n        this.submitting.set(false);\n      },\n      error: (error) => {\n        console.error('Failed to delete shift:', error);\n        this.submitting.set(false);\n        // Show user-friendly error message for deletion constraints\n        let errorMessage = 'Failed to delete shift';\n        if (error?.error?.message) {\n          errorMessage = error.error.message;\n        } else if (error?.message) {\n          errorMessage = error.message;\n        }\n        // You can show this error message in a toast/alert component\n        // For now, we'll log it to console with a prefix\n        console.error('Deletion error:', errorMessage);\n      }\n    });\n  }\n\n  onCloseModal(): void {\n    this.showCreateModal.set(false);\n    this.showEditModal.set(false);\n    this.showDeleteModal.set(false);\n    this.showDefaultShiftModal.set(false);\n    this.selectedShift.set(null);\n    this.submitting.set(false);\n  }\n\n  // Default Shift Management\n  onSetDefaultShift(shift: Shift): void {\n    // Check if there's already a default shift\n    if (this.defaultShift()) {\n      // Show confirmation modal for replacing existing default\n      this.selectedShift.set(shift);\n      this.showDefaultShiftModal.set(true);\n    } else {\n      // No existing default, set directly\n      this.setDefaultShift(shift, false);\n    }\n  }\n\n  onConfirmSetDefaultShift(): void {\n    if (!this.selectedShift()) return;\n    this.setDefaultShift(this.selectedShift()!, true);\n  }\n\n  private setDefaultShift(shift: Shift, forceReplace: boolean): void {\n    this.submitting.set(true);\n    this.shiftsService.setDefaultShift(shift.id, forceReplace).subscribe({\n      next: () => {\n        this.defaultShift.set(shift);\n        this.showDefaultShiftModal.set(false);\n        this.submitting.set(false);\n        console.log(`Successfully set \"${shift.name}\" as default shift`);\n      },\n      error: (error) => {\n        console.error('Failed to set default shift:', error);\n        this.submitting.set(false);\n      }\n    });\n  }\n\n  isDefaultShift(shift: Shift): boolean {\n    return this.defaultShift()?.id === shift.id;\n  }\n\n  canSetDefaultShift(shift: Shift): boolean {\n    // Only system admin can set default shifts and shift must be active\n    return this.permissionService.hasRole('SystemAdmin') &&\n           shift.status === ShiftStatus.Active &&\n           !this.isDefaultShift(shift);\n  }\n\n  // Shift Type Change Handler\n  onShiftTypeChange(): void {\n    if (this.shiftForm.shiftType === ShiftType.HoursOnly) {\n      this.shiftForm.allowFlexibleHours = false;\n      this.shiftForm.flexMinutesBefore = undefined;\n      this.shiftForm.flexMinutesAfter = undefined;\n      this.shiftForm.gracePeriodMinutes = undefined;\n      this.shiftForm.shiftPeriods = [];\n    } else {\n      this.shiftForm.requiredHours = undefined;\n      if (this.shiftForm.shiftPeriods.length === 0) {\n        this.addShiftPeriod();\n      }\n    }\n  }\n\n  // Flexible Hours Change Handler\n  onFlexibleHoursChange(): void {\n    if (!this.shiftForm.allowFlexibleHours) {\n      // When flexible hours is disabled, clear flex values\n      this.shiftForm.flexMinutesBefore = undefined;\n      this.shiftForm.flexMinutesAfter = undefined;\n    }\n  }\n\n  // Business Rule Methods\n  calculatePeriodHours(startTime: string, endTime: string): number {\n    if (!startTime || !endTime) return 0;\n\n    const start = this.parseTime(startTime);\n    const end = this.parseTime(endTime);\n\n    if (end > start) {\n      // Normal day period\n      return (end - start) / (1000 * 60 * 60);\n    } else if (end < start) {\n      // Night period spanning midnight\n      const hoursToMidnight = (24 * 60 * 60 * 1000 - start) / (1000 * 60 * 60);\n      const hoursFromMidnight = end / (1000 * 60 * 60);\n      return hoursToMidnight + hoursFromMidnight;\n    } else {\n      // Same start and end time\n      return 0;\n    }\n  }\n\n  isNightShift(startTime: string, endTime: string): boolean {\n    if (!startTime || !endTime) return false;\n    const start = this.parseTime(startTime);\n    const end = this.parseTime(endTime);\n    return end < start;\n  }\n\n  getTotalShiftHours(): number {\n    if (this.shiftForm.shiftType === ShiftType.HoursOnly) {\n      return this.shiftForm.requiredHours || 0;\n    }\n\n    return this.shiftForm.shiftPeriods.reduce((total, period) => {\n      return total + this.calculatePeriodHours(period.startTime, period.endTime);\n    }, 0);\n  }\n\n  private parseTime(timeString: string): number {\n    const [hours, minutes] = timeString.split(':').map(Number);\n    return (hours * 60 + minutes) * 60 * 1000; // Convert to milliseconds\n  }\n\n  validateBusinessRules(): string[] {\n    const errors: string[] = [];\n\n    // Rule 8: A shift must define either (Start/End times) or (Hours per day)\n    if (this.shiftForm.shiftType === ShiftType.TimeBased) {\n      if (this.shiftForm.shiftPeriods.length === 0) {\n        errors.push(this.t('shifts.validation.timeBased.periodsRequired'));\n      }\n\n      if (this.shiftForm.requiredHours !== undefined) {\n        errors.push(this.t('shifts.validation.timeBased.noRequiredHours'));\n      }\n    } else if (this.shiftForm.shiftType === ShiftType.HoursOnly) {\n      if (this.shiftForm.shiftPeriods.length > 0) {\n        errors.push(this.t('shifts.validation.hoursOnly.noPeriods'));\n      }\n\n      if (!this.shiftForm.requiredHours || this.shiftForm.requiredHours <= 0) {\n        errors.push(this.t('shifts.validation.hoursOnly.requiredHours'));\n      }\n\n      if (this.shiftForm.requiredHours && this.shiftForm.requiredHours > 24) {\n        errors.push(this.t('shifts.validation.hoursOnly.maxHours'));\n      }\n    }\n\n    // Rule 8: If two periods are defined, both must be valid ranges\n    if (this.shiftForm.shiftPeriods.length > 2) {\n      errors.push(this.t('shifts.validation.periods.maxTwo'));\n    }\n\n    // Period validation\n    for (let i = 0; i < this.shiftForm.shiftPeriods.length; i++) {\n      const period = this.shiftForm.shiftPeriods[i];\n\n      if (period.startTime === period.endTime) {\n        errors.push(this.t('shifts.validation.periods.sameTime').replace('{{period}}', (i + 1).toString()));\n      }\n\n      const hours = this.calculatePeriodHours(period.startTime, period.endTime);\n      if (hours <= 0) {\n        errors.push(this.t('shifts.validation.periods.positiveHours').replace('{{period}}', (i + 1).toString()));\n      }\n\n      if (hours > 24) {\n        errors.push(this.t('shifts.validation.periods.maxHours').replace('{{period}}', (i + 1).toString()));\n      }\n    }\n\n    // Rule 8: Grace Period/Flexible Hours only valid for time-based shifts\n    if (this.shiftForm.shiftType === ShiftType.HoursOnly) {\n      if (this.shiftForm.allowFlexibleHours) {\n        errors.push(this.t('shifts.validation.hoursOnly.noFlexibleHours'));\n      }\n\n      if (this.shiftForm.gracePeriodMinutes) {\n        errors.push(this.t('shifts.validation.hoursOnly.noGracePeriod'));\n      }\n    }\n\n    // Flexible hours validation\n    if (this.shiftForm.allowFlexibleHours) {\n      if (this.shiftForm.flexMinutesBefore && this.shiftForm.flexMinutesBefore > 480) {\n        errors.push(this.t('shifts.validation.flexible.maxBefore'));\n      }\n\n      if (this.shiftForm.flexMinutesAfter && this.shiftForm.flexMinutesAfter > 480) {\n        errors.push(this.t('shifts.validation.flexible.maxAfter'));\n      }\n    }\n\n    // Grace period validation\n    if (this.shiftForm.gracePeriodMinutes && this.shiftForm.gracePeriodMinutes > 120) {\n      errors.push(this.t('shifts.validation.gracePeriod.max'));\n    }\n\n    // Rule 8: Check-In Required and Auto Check-Out options cannot conflict\n    if (!this.shiftForm.isCheckInRequired && !this.shiftForm.isAutoCheckOut) {\n      errors.push(this.t('shifts.validation.checkInOut.conflict'));\n    }\n\n    // Period overlap validation\n    if (this.shiftForm.shiftPeriods.length === 2) {\n      const periods = this.shiftForm.shiftPeriods.sort((a, b) => a.periodOrder - b.periodOrder);\n      const firstPeriod = periods[0];\n      const secondPeriod = periods[1];\n\n      const firstIsNight = this.isNightShift(firstPeriod.startTime, firstPeriod.endTime);\n      const secondIsNight = this.isNightShift(secondPeriod.startTime, secondPeriod.endTime);\n\n      if (firstIsNight && secondIsNight) {\n        errors.push(this.t('shifts.validation.periods.multipleNight'));\n      }\n\n      // For non-night shifts, ensure no overlap\n      if (!firstIsNight && !secondIsNight) {\n        const firstEndTime = this.parseTime(firstPeriod.endTime);\n        const secondStartTime = this.parseTime(secondPeriod.startTime);\n\n        if (firstEndTime >= secondStartTime) {\n          errors.push(this.t('shifts.validation.periods.overlap'));\n        }\n      }\n    }\n\n    return errors;\n  }\n\n  // Shift Period Management\n  addShiftPeriod(): void {\n    if (this.shiftForm.shiftPeriods.length < 2) {\n      this.shiftForm.shiftPeriods.push({\n        periodOrder: this.shiftForm.shiftPeriods.length + 1,\n        startTime: '08:00',\n        endTime: '17:00'\n      });\n    }\n  }\n\n  removeShiftPeriod(index: number): void {\n    this.shiftForm.shiftPeriods.splice(index, 1);\n    // Reorder remaining periods\n    this.shiftForm.shiftPeriods.forEach((period, idx) => {\n      period.periodOrder = idx + 1;\n    });\n  }\n\n  private resetForm(): void {\n    this.shiftForm = {\n      name: '',\n      description: '',\n      shiftType: ShiftType.TimeBased,\n      status: ShiftStatus.Active,\n      requiredHours: undefined,\n      isCheckInRequired: true,\n      isAutoCheckOut: false,\n      allowFlexibleHours: false,\n      flexMinutesBefore: undefined,\n      flexMinutesAfter: undefined,\n      gracePeriodMinutes: undefined,\n      shiftPeriods: [\n        {\n          periodOrder: 1,\n          startTime: '08:00',\n          endTime: '17:00'\n        }\n      ]\n    };\n  }\n\n  isFormValid(): boolean {\n    // Basic validation\n    if (!this.shiftForm.name.trim()) {\n      return false;\n    }\n\n    // Business rule validation\n    const businessRuleErrors = this.validateBusinessRules();\n    return businessRuleErrors.length === 0;\n  }\n\n  getFormErrors(): string[] {\n    const errors: string[] = [];\n\n    // Basic validation\n    if (!this.shiftForm.name.trim()) {\n      errors.push(this.t('shifts.validation.name.required'));\n    }\n\n\n    // Add business rule errors\n    errors.push(...this.validateBusinessRules());\n\n    return errors;\n  }\n\n  // Utility methods for pagination (similar to branches component)\n  getPaginationArray(): number[] {\n    const total = this.totalPages();\n    const current = this.currentPage();\n    const delta = 2;\n\n    let start = Math.max(1, current - delta);\n    let end = Math.min(total, current + delta);\n\n    if (end - start < 4 && total > 4) {\n      if (start === 1) {\n        end = Math.min(total, start + 4);\n      } else if (end === total) {\n        start = Math.max(1, end - 4);\n      }\n    }\n\n    const pages = [];\n    for (let i = start; i <= end; i++) {\n      pages.push(i);\n    }\n\n    return pages;\n  }\n\n  getEndCount(): number {\n    return Math.min(this.currentPage() * this.pageSize(), this.totalCount());\n  }\n\n  // Data table formatting methods\n  formatShiftName(shift: Shift): string {\n    let html = `<div><strong>${shift.name}</strong>`;\n    if (this.isDefaultShift(shift)) {\n      html += `<span class=\"badge bg-success ms-2\">${this.t('shifts.defaultShift.currentDefault')}</span>`;\n    }\n    if (shift.description) {\n      html += `<small class=\"d-block text-muted\">${shift.description}</small>`;\n    }\n    html += '</div>';\n    return html;\n  }\n\n  formatShiftStatus(shift: Shift): string {\n    const statusText = this.getShiftStatusText(shift.status);\n    const statusClass = this.getShiftStatusClass(shift.status);\n    return `<span class=\"badge ${statusClass}\">${statusText}</span>`;\n  }\n\n  formatShiftType(shift: Shift): string {\n    const typeText = this.getShiftTypeText(shift.shiftType);\n    const typeClass = shift.shiftType === ShiftType.TimeBased ? 'bg-primary' : 'bg-info';\n    return `<span class=\"badge ${typeClass}\">${typeText}</span>`;\n  }\n\n  formatShiftPeriods(shift: Shift): string {\n    if (shift.shiftType === ShiftType.TimeBased && shift.shiftPeriods) {\n      let html = '<div>';\n      shift.shiftPeriods.forEach(period => {\n        html += `<div class=\"small\">${this.formatTime(period.startTime)} - ${this.formatTime(period.endTime)}`;\n        if (period.isNightPeriod) {\n          html += `<span class=\"badge bg-warning ms-1\">${this.t('shifts.nightShift')}</span>`;\n        }\n        html += '</div>';\n      });\n      html += '</div>';\n      return html;\n    } else if (shift.shiftType === ShiftType.HoursOnly) {\n      return `<div>${shift.requiredHours} ${this.t('shifts.hours')}</div>`;\n    }\n    return '<div>-</div>';\n  }\n\n  formatShiftRequirements(shift: Shift): string {\n    let html = '<div class=\"small\">';\n    if (shift.isCheckInRequired) {\n      html += `<div><i class=\"fas fa-check text-success me-1\"></i>${this.t('shifts.checkInRequired')}</div>`;\n    }\n    if (shift.isAutoCheckOut) {\n      html += `<div><i class=\"fas fa-check text-success me-1\"></i>${this.t('shifts.autoCheckOut')}</div>`;\n    }\n    if (shift.allowFlexibleHours) {\n      html += `<div><i class=\"fas fa-check text-success me-1\"></i>${this.t('shifts.flexibleHours')}</div>`;\n    }\n    if (shift.gracePeriodMinutes) {\n      html += `<div><i class=\"fas fa-clock text-info me-1\"></i>${shift.gracePeriodMinutes}min ${this.t('shifts.gracePeriod')}</div>`;\n    }\n    html += '</div>';\n    return html;\n  }\n\n  // Data table action handler\n  onActionClick(event: {action: string, item: Shift}): void {\n    const { action, item } = event;\n\n    switch (action) {\n      case 'view':\n        this.onViewShift(item);\n        break;\n      case 'set-default':\n        this.onSetDefaultShift(item);\n        break;\n      case 'edit':\n        this.onEditShift(item);\n        break;\n      case 'delete':\n        this.onDeleteShift(item);\n        break;\n      default:\n        console.warn('Unknown action:', action);\n    }\n  }\n\n  // Data table event handlers\n  onTablePageChange(page: number): void {\n    this.onPageChange(page);\n  }\n\n  onTablePageSizeChange(size: number): void {\n    this.pageSize.set(size);\n    this.onPageSizeChange();\n  }\n}", "<div class=\"app-list-page\">\n  <!-- Page Header -->\n  <app-page-header\n    [title]=\"t('shifts.title')\">\n  </app-page-header>\n\n  <!-- Standardized Filters Component -->\n  <app-unified-filter\n    moduleName=\"shifts\"\n    [refreshing]=\"loading()\"\n    (searchChange)=\"onSearchChange($event)\"\n    (filtersChange)=\"onFiltersChange($event)\"\n    (add)=\"onCreateShift()\"\n    (refresh)=\"onRefreshData()\">\n  </app-unified-filter>\n\n  <!-- Shifts Table -->\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <app-data-table\n        [data]=\"tableData()\"\n        [columns]=\"tableColumns()\"\n        [actions]=\"tableActions()\"\n        [loading]=\"loading\"\n        [currentPage]=\"currentPage\"\n        [totalPages]=\"totalPages\"\n        [totalItems]=\"totalCount\"\n        [pageSize]=\"pageSize\"\n        [emptyMessage]=\"t('shifts.noShifts')\"\n        [emptyTitle]=\"t('shifts.noShiftsDescription')\"\n        [responsiveMode]=\"'auto'\"\n        (actionClick)=\"onActionClick($event)\"\n        (pageChange)=\"onTablePageChange($event)\"\n        (pageSizeChange)=\"onTablePageSizeChange($event)\">\n      </app-data-table>\n    </div>\n  </div>\n</div>\n\n<!-- Create/Edit Modal -->\n<app-modal-wrapper\n  [show]=\"showCreateModal() || showEditModal()\"\n  [title]=\"showCreateModal() ? t('shifts.actions.create') : t('shifts.actions.edit')\"\n  [size]=\"'lg'\"\n  [centered]=\"true\"\n  [loading]=\"submitting()\"\n  (close)=\"onCloseModal()\">\n\n  <div class=\"modal-body\">\n    <form>\n          <!-- Basic Information -->\n          <div class=\"mb-3\">\n            <label class=\"form-label required\">{{ t('shifts.fields.name') }}</label>\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"shiftForm.name\" name=\"name\" required>\n          </div>\n\n          <div class=\"mb-3\">\n            <label class=\"form-label\">{{ t('shifts.fields.description') }}</label>\n            <textarea class=\"form-control\" rows=\"2\" [(ngModel)]=\"shiftForm.description\" name=\"description\"></textarea>\n          </div>\n\n          <!-- Status -->\n          <div class=\"mb-3\">\n            <label class=\"form-label required\">{{ t('shifts.fields.status') }}</label>\n            <app-searchable-select\n              [options]=\"statusSelectOptions\"\n              [(ngModel)]=\"shiftForm.status\"\n              name=\"status\"\n              [placeholder]=\"t('common.select')\"\n              [required]=\"true\"\n              [searchable]=\"true\"\n              [clearable]=\"false\"\n            ></app-searchable-select>\n          </div>\n\n          <!-- Shift Type -->\n          <div class=\"mb-3\">\n            <label class=\"form-label required\">{{ t('shifts.fields.type') }}</label>\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <div class=\"form-check\">\n                  <input class=\"form-check-input\" type=\"radio\" name=\"shiftType\"\n                         [value]=\"ShiftType.TimeBased\" [(ngModel)]=\"shiftForm.shiftType\"\n                         (change)=\"onShiftTypeChange()\">\n                  <label class=\"form-check-label\">\n                    {{ t('shifts.types.timeBased') }}\n                  </label>\n                  <small class=\"form-text text-muted d-block\">{{ t('shifts.types.timeBasedDescription') }}</small>\n                </div>\n              </div>\n              <div class=\"col-md-6\">\n                <div class=\"form-check\">\n                  <input class=\"form-check-input\" type=\"radio\" name=\"shiftType\"\n                         [value]=\"ShiftType.HoursOnly\" [(ngModel)]=\"shiftForm.shiftType\"\n                         (change)=\"onShiftTypeChange()\">\n                  <label class=\"form-check-label\">\n                    {{ t('shifts.types.hoursOnly') }}\n                  </label>\n                  <small class=\"form-text text-muted d-block\">{{ t('shifts.types.hoursOnlyDescription') }}</small>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Hours Only Configuration -->\n          @if (shiftForm.shiftType === ShiftType.HoursOnly) {\n          <div class=\"mb-3\">\n            <label class=\"form-label required\">{{ t('shifts.fields.requiredHours') }}</label>\n            <div class=\"input-group\">\n              <input type=\"number\" class=\"form-control\" [(ngModel)]=\"shiftForm.requiredHours\"\n                     name=\"requiredHours\" min=\"0.5\" max=\"24\" step=\"0.5\">\n              <span class=\"input-group-text\">{{ t('shifts.hours') }}</span>\n            </div>\n          </div>\n          }\n\n          <!-- Time-Based Configuration -->\n          @if (shiftForm.shiftType === ShiftType.TimeBased) {\n          <div>\n            <!-- Shift Periods -->\n            <div class=\"mb-3\">\n              <div class=\"d-flex justify-content-between align-items-center mb-2\">\n                <label class=\"form-label required\">{{ t('shifts.fields.periods') }}</label>\n                <button type=\"button\" class=\"btn btn-sm btn-outline-primary\"\n                        (click)=\"addShiftPeriod()\"\n                        [disabled]=\"shiftForm.shiftPeriods.length >= 2\">\n                  <i class=\"fas fa-plus me-1\"></i>{{ t('shifts.addPeriod') }}\n                </button>\n              </div>\n\n              @for (period of shiftForm.shiftPeriods; track i; let i = $index) {\n              <div class=\"card mb-2\">\n                <div class=\"card-body p-3\">\n                  <div class=\"d-flex justify-content-between align-items-center mb-2\">\n                    <h6 class=\"mb-0\">{{ t('shifts.period') }} {{ period.periodOrder }}</h6>\n                    <button type=\"button\" class=\"btn btn-sm btn-outline-danger\"\n                            (click)=\"removeShiftPeriod(i)\"\n                            [disabled]=\"shiftForm.shiftPeriods.length <= 1\">\n                      <i class=\"fas fa-trash\"></i>\n                    </button>\n                  </div>\n                  <div class=\"row\">\n                    <div class=\"col-md-6\">\n                      <label class=\"form-label\">{{ t('shifts.fields.startTime') }}</label>\n                      <input type=\"time\" class=\"form-control\" [(ngModel)]=\"period.startTime\"\n                             [name]=\"'startTime' + i\" required>\n                    </div>\n                    <div class=\"col-md-6\">\n                      <label class=\"form-label\">{{ t('shifts.fields.endTime') }}</label>\n                      <input type=\"time\" class=\"form-control\" [(ngModel)]=\"period.endTime\"\n                             [name]=\"'endTime' + i\" required>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              }\n            </div>\n\n            <!-- Flexible Hours -->\n            <div class=\"mb-3\">\n              <div class=\"form-check mb-2\">\n                <input class=\"form-check-input\" type=\"checkbox\"\n                       [(ngModel)]=\"shiftForm.allowFlexibleHours\" name=\"allowFlexibleHours\"\n                       (change)=\"onFlexibleHoursChange()\">\n                <label class=\"form-check-label\">\n                  {{ t('shifts.fields.allowFlexibleHours') }}\n                </label>\n                <small class=\"form-text text-muted d-block\">{{ t('shifts.flexibleHoursDescription') }}</small>\n              </div>\n\n              @if (shiftForm.allowFlexibleHours) {\n              <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <label class=\"form-label\">{{ t('shifts.fields.flexMinutesBefore') }}</label>\n                  <div class=\"input-group\">\n                    <input type=\"number\" class=\"form-control\" [(ngModel)]=\"shiftForm.flexMinutesBefore\"\n                           name=\"flexMinutesBefore\" min=\"1\" max=\"480\">\n                    <span class=\"input-group-text\">{{ t('common.minutes') }}</span>\n                  </div>\n                </div>\n                <div class=\"col-md-6\">\n                  <label class=\"form-label\">{{ t('shifts.fields.flexMinutesAfter') }}</label>\n                  <div class=\"input-group\">\n                    <input type=\"number\" class=\"form-control\" [(ngModel)]=\"shiftForm.flexMinutesAfter\"\n                           name=\"flexMinutesAfter\" min=\"1\" max=\"480\">\n                    <span class=\"input-group-text\">{{ t('common.minutes') }}</span>\n                  </div>\n                </div>\n              </div>\n              }\n            </div>\n\n            <!-- Grace Period -->\n            <div class=\"mb-3\">\n              <label class=\"form-label\">{{ t('shifts.fields.gracePeriod') }}</label>\n              <div class=\"input-group\">\n                <input type=\"number\" class=\"form-control\" [(ngModel)]=\"shiftForm.gracePeriodMinutes\"\n                       name=\"gracePeriodMinutes\" min=\"1\" max=\"120\">\n                <span class=\"input-group-text\">{{ t('common.minutes') }}</span>\n              </div>\n              <small class=\"form-text text-muted\">{{ t('shifts.gracePeriodDescription') }}</small>\n              @if (shiftForm.allowFlexibleHours && shiftForm.gracePeriodMinutes) {\n              <small class=\"form-text text-info d-block\">\n                <i class=\"fas fa-info-circle me-1\"></i>{{ t('shifts.validation.flexibleHoursAndGraceCombined') }}\n              </small>\n              }\n            </div>\n          </div>\n          }\n\n          <!-- Check-in/Check-out Options -->\n          <div class=\"row mb-3\">\n            <div class=\"col-md-6\">\n              <div class=\"form-check\">\n                <input class=\"form-check-input\" type=\"checkbox\"\n                       [(ngModel)]=\"shiftForm.isCheckInRequired\" name=\"isCheckInRequired\">\n                <label class=\"form-check-label\">\n                  {{ t('shifts.fields.checkInRequired') }}\n                </label>\n                <small class=\"form-text text-muted d-block\">{{ t('shifts.checkInRequiredDescription') }}</small>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-check\">\n                <input class=\"form-check-input\" type=\"checkbox\"\n                       [(ngModel)]=\"shiftForm.isAutoCheckOut\" name=\"isAutoCheckOut\">\n                <label class=\"form-check-label\">\n                  {{ t('shifts.fields.autoCheckOut') }}\n                </label>\n                <small class=\"form-text text-muted d-block\">{{ t('shifts.autoCheckOutDescription') }}</small>\n              </div>\n            </div>\n          </div>\n    </form>\n  </div>\n\n  <div modal-footer class=\"d-flex gap-2 justify-content-end\">\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onCloseModal()\">\n      {{ t('common.cancel') }}\n    </button>\n    <button type=\"button\" class=\"btn btn-primary\"\n            (click)=\"showCreateModal() ? onSubmitCreate() : onSubmitEdit()\"\n            [disabled]=\"!isFormValid() || submitting()\">\n      @if (submitting()) {\n      <span class=\"spinner-border spinner-border-sm me-2\"></span>\n      }\n      {{ showCreateModal() ? t('common.create') : t('common.update') }}\n    </button>\n  </div>\n\n</app-modal-wrapper>\n\n<!-- Delete Confirmation Modal -->\n<app-modal-wrapper\n  [show]=\"showDeleteModal()\"\n  [title]=\"t('shifts.actions.delete')\"\n  [centered]=\"true\"\n  [loading]=\"submitting()\"\n  (close)=\"onCloseModal()\">\n\n  <div class=\"modal-body\">\n    <p>{{ t('shifts.deleteConfirmation') }}</p>\n    @if (selectedShift()) {\n    <p><strong>{{ selectedShift()?.name }}</strong></p>\n    }\n  </div>\n\n  <div modal-footer class=\"d-flex gap-2 justify-content-end\">\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onCloseModal()\">\n      {{ t('common.cancel') }}\n    </button>\n    <button type=\"button\" class=\"btn btn-danger\"\n            (click)=\"onConfirmDelete()\"\n            [disabled]=\"submitting()\">\n      @if (submitting()) {\n      <span class=\"spinner-border spinner-border-sm me-2\"></span>\n      }\n      {{ t('common.delete') }}\n    </button>\n  </div>\n\n</app-modal-wrapper>\n\n<!-- Default Shift Confirmation Modal -->\n<app-modal-wrapper\n  [show]=\"showDefaultShiftModal()\"\n  [title]=\"t('shifts.defaultShift.confirmReplace')\"\n  [centered]=\"true\"\n  [loading]=\"submitting()\"\n  (close)=\"onCloseModal()\">\n\n  <div class=\"modal-body\">\n    <p>{{ t('shifts.defaultShift.confirmReplaceMessage') }}</p>\n    <p><strong>{{ t('shifts.defaultShift.newShift') }}:</strong> {{ selectedShift()?.name }}</p>\n    <p><strong>{{ t('shifts.defaultShift.currentShift') }}:</strong> {{ defaultShift()?.name }}</p>\n  </div>\n\n  <div modal-footer class=\"d-flex gap-2 justify-content-end\">\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onCloseModal()\">\n      {{ t('shifts.defaultShift.cancelButton') }}\n    </button>\n    <button type=\"button\" class=\"btn btn-success\"\n            (click)=\"onConfirmSetDefaultShift()\"\n            [disabled]=\"submitting()\">\n      @if (submitting()) {\n      <span class=\"spinner-border spinner-border-sm me-2\"></span>\n      }\n      {{ t('shifts.defaultShift.confirmButton') }}\n    </button>\n  </div>\n\n</app-modal-wrapper>"],
  "mappings": "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",
  "names": []
}
