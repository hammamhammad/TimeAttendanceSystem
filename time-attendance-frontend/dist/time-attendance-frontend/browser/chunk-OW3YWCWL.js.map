{
  "version": 3,
  "sources": ["src/app/pages/shifts/create-shift/create-shift.component.ts", "src/app/pages/shifts/create-shift/create-shift.component.html"],
  "sourcesContent": ["import { Component, OnInit, signal, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { I18nService } from '../../../core/i18n/i18n.service';\nimport { ShiftsService } from '../shifts.service';\nimport { FormHeaderComponent } from '../../../shared/components/form-header/form-header.component';\nimport {\n  ShiftType,\n  CreateShiftRequest,\n  CreateShiftPeriodRequest\n} from '../../../shared/models/shift.model';\n\n@Component({\n  selector: 'app-create-shift',\n  standalone: true,\n  imports: [CommonModule, FormsModule, FormHeaderComponent],\n  templateUrl: './create-shift.component.html',\n  styleUrls: ['./create-shift.component.css']\n})\nexport class CreateShiftComponent implements OnInit {\n  private shiftsService = inject(ShiftsService);\n  private router = inject(Router);\n  public i18n = inject(I18nService);\n\n  // Enum references for template\n  readonly ShiftType = ShiftType;\n\n  // Signals for state management\n  loading = signal(false);\n  submitting = signal(false);\n\n  // Form state\n  shiftForm = {\n    name: '',\n    description: '',\n    shiftType: ShiftType.TimeBased,\n    requiredHours: undefined as number | undefined,\n    isCheckInRequired: true,\n    isAutoCheckOut: false,\n    allowFlexibleHours: false,\n    flexMinutesBefore: undefined as number | undefined,\n    flexMinutesAfter: undefined as number | undefined,\n    gracePeriodMinutes: undefined as number | undefined,\n    // Extended Business Rules\n    requiredWeeklyHours: undefined as number | undefined,\n    hasCoreHours: false,\n    coreStart: '',\n    coreEnd: '',\n    // Working Days (Monday-Friday by default)\n    isSunday: false,\n    isMonday: true,\n    isTuesday: true,\n    isWednesday: true,\n    isThursday: true,\n    isFriday: true,\n    isSaturday: false,\n    isNightShift: false,\n    shiftPeriods: [\n      {\n        periodOrder: 1,\n        startTime: '08:00',\n        endTime: '17:00'\n      }\n    ] as Array<{\n      periodOrder: number;\n      startTime: string;\n      endTime: string;\n    }>\n  };\n\n  ngOnInit(): void {\n    // Component initialization - no branch loading needed\n  }\n\n\n  t(key: string): string {\n    return this.i18n.t(key);\n  }\n\n\n  // Shift Type Change Handler\n  onShiftTypeChange(): void {\n    if (this.shiftForm.shiftType === ShiftType.HoursOnly) {\n      // Clear time-based specific settings\n      this.shiftForm.allowFlexibleHours = false;\n      this.shiftForm.flexMinutesBefore = undefined;\n      this.shiftForm.flexMinutesAfter = undefined;\n      this.shiftForm.gracePeriodMinutes = undefined;\n      this.shiftForm.shiftPeriods = [];\n\n      // Business Rule 3: Night Shift not works with Hours Only\n      this.shiftForm.isNightShift = false;\n\n      // Set default required hours\n      if (!this.shiftForm.requiredHours) {\n        this.shiftForm.requiredHours = 8;\n      }\n    } else {\n      // Clear hours-only specific settings\n      this.shiftForm.requiredHours = undefined;\n\n      // Add default period if none exist\n      if (this.shiftForm.shiftPeriods.length === 0) {\n        this.addShiftPeriod();\n      }\n    }\n  }\n\n  // Core Hours Change Handler\n  onCoreHoursChange(): void {\n    if (!this.shiftForm.hasCoreHours) {\n      this.shiftForm.coreStart = '';\n      this.shiftForm.coreEnd = '';\n    } else {\n      // Set default core hours if not set\n      if (!this.shiftForm.coreStart) this.shiftForm.coreStart = '09:00';\n      if (!this.shiftForm.coreEnd) this.shiftForm.coreEnd = '15:00';\n    }\n  }\n\n  // Flexible Hours Change Handler\n  onFlexibleHoursChange(): void {\n    if (!this.shiftForm.allowFlexibleHours) {\n      this.shiftForm.flexMinutesBefore = undefined;\n      this.shiftForm.flexMinutesAfter = undefined;\n    } else {\n      // Business Rule 1: Grace Period should be disabled and empty when Allow Flexible Hours is selected\n      this.shiftForm.gracePeriodMinutes = undefined;\n    }\n  }\n\n  // Grace Period Change Handler\n  onGracePeriodChange(): void {\n    if (this.shiftForm.gracePeriodMinutes && this.shiftForm.gracePeriodMinutes > 0) {\n      // Clear flexible hours when grace period is set as they are mutually exclusive\n      this.shiftForm.allowFlexibleHours = false;\n      this.shiftForm.flexMinutesBefore = undefined;\n      this.shiftForm.flexMinutesAfter = undefined;\n    }\n  }\n\n  // Weekly Hours Change Handler\n  onWeeklyHoursChange(): void {\n    if (this.shiftForm.requiredWeeklyHours && this.shiftForm.requiredWeeklyHours > 0) {\n      // Business Rule 2: Core Hours is mandatory with Weekly Hours\n      if (!this.shiftForm.hasCoreHours) {\n        this.shiftForm.hasCoreHours = true;\n        this.onCoreHoursChange(); // Set default core hours\n      }\n    }\n  }\n\n  // Night Shift Change Handler\n  onNightShiftChange(): void {\n    if (this.shiftForm.isNightShift && this.shiftForm.shiftType === ShiftType.HoursOnly) {\n      // Business Rule 3: Night Shift not works with Hours Only\n      this.shiftForm.isNightShift = false;\n    }\n  }\n\n  // Shift Period Management\n  addShiftPeriod(): void {\n    if (this.shiftForm.shiftPeriods.length < 2) {\n      const newOrder = this.shiftForm.shiftPeriods.length + 1;\n      this.shiftForm.shiftPeriods.push({\n        periodOrder: newOrder,\n        startTime: newOrder === 1 ? '08:00' : '13:00',\n        endTime: newOrder === 1 ? '12:00' : '17:00'\n      });\n    }\n  }\n\n  removeShiftPeriod(index: number): void {\n    this.shiftForm.shiftPeriods.splice(index, 1);\n    // Reorder remaining periods\n    this.shiftForm.shiftPeriods.forEach((period, idx) => {\n      period.periodOrder = idx + 1;\n    });\n  }\n\n  // Business Rule Methods\n  calculatePeriodHours(startTime: string, endTime: string): number {\n    if (!startTime || !endTime) return 0;\n\n    const start = this.parseTime(startTime);\n    const end = this.parseTime(endTime);\n\n    if (end > start) {\n      return (end - start) / (1000 * 60 * 60);\n    } else if (end < start) {\n      const hoursToMidnight = (24 * 60 * 60 * 1000 - start) / (1000 * 60 * 60);\n      const hoursFromMidnight = end / (1000 * 60 * 60);\n      return hoursToMidnight + hoursFromMidnight;\n    } else {\n      return 0;\n    }\n  }\n\n  isNightShift(startTime: string, endTime: string): boolean {\n    if (!startTime || !endTime) return false;\n    const start = this.parseTime(startTime);\n    const end = this.parseTime(endTime);\n    return end < start;\n  }\n\n  getTotalShiftHours(): number {\n    if (this.shiftForm.shiftType === ShiftType.HoursOnly) {\n      return this.shiftForm.requiredHours || 0;\n    }\n\n    return this.shiftForm.shiftPeriods.reduce((total, period) => {\n      return total + this.calculatePeriodHours(period.startTime, period.endTime);\n    }, 0);\n  }\n\n  getWorkingDaysCount(): number {\n    let count = 0;\n    if (this.shiftForm.isSunday) count++;\n    if (this.shiftForm.isMonday) count++;\n    if (this.shiftForm.isTuesday) count++;\n    if (this.shiftForm.isWednesday) count++;\n    if (this.shiftForm.isThursday) count++;\n    if (this.shiftForm.isFriday) count++;\n    if (this.shiftForm.isSaturday) count++;\n    return count;\n  }\n\n  private parseTime(timeString: string): number {\n    const [hours, minutes] = timeString.split(':').map(Number);\n    return (hours * 60 + minutes) * 60 * 1000;\n  }\n\n  formatHours(hours: number): string {\n    const wholeHours = Math.floor(hours);\n    const minutes = Math.round((hours - wholeHours) * 60);\n    return minutes > 0 ? `${wholeHours}h ${minutes}m` : `${wholeHours}h`;\n  }\n\n  getPeriodTypeText(period: { startTime: string; endTime: string }): string {\n    const isNight = this.isNightShift(period.startTime, period.endTime);\n    return isNight ? this.t('shifts.periodTypes.nightShift') : this.t('shifts.periodTypes.dayShift');\n  }\n\n  // Validation\n  validateBusinessRules(): string[] {\n    const errors: string[] = [];\n\n    // Basic validation\n    if (!this.shiftForm.name.trim()) {\n      errors.push(this.t('shifts.validation.name.required'));\n    }\n\n    // Extended Rules: Working days validation\n    const hasWorkingDays = this.shiftForm.isSunday || this.shiftForm.isMonday || this.shiftForm.isTuesday ||\n                          this.shiftForm.isWednesday || this.shiftForm.isThursday || this.shiftForm.isFriday ||\n                          this.shiftForm.isSaturday;\n    if (!hasWorkingDays) {\n      errors.push(this.t('shifts.validation.workingDays.required'));\n    }\n\n    // Core hours validation\n    if (this.shiftForm.hasCoreHours) {\n      if (!this.shiftForm.coreStart || !this.shiftForm.coreEnd) {\n        errors.push(this.t('shifts.validation.coreHours.required'));\n      } else {\n        const coreStart = this.parseTime(this.shiftForm.coreStart);\n        const coreEnd = this.parseTime(this.shiftForm.coreEnd);\n\n        if (coreStart === coreEnd) {\n          errors.push(this.t('shifts.validation.coreHours.sameTime'));\n        }\n\n        // For time-based shifts, core hours must be within periods\n        if (this.shiftForm.shiftType === ShiftType.TimeBased && this.shiftForm.shiftPeriods.length > 0) {\n          const coreIsWithinPeriods = this.shiftForm.shiftPeriods.some(period =>\n            this.isCoreWithinPeriod(period, this.shiftForm.coreStart, this.shiftForm.coreEnd)\n          );\n\n          if (!coreIsWithinPeriods) {\n            errors.push(this.t('shifts.validation.coreHours.outsidePeriods'));\n          }\n        }\n      }\n    }\n\n    // Weekly hours validation\n    if (this.shiftForm.requiredWeeklyHours !== undefined && this.shiftForm.requiredWeeklyHours !== null) {\n      if (this.shiftForm.requiredWeeklyHours <= 0) {\n        errors.push(this.t('shifts.validation.weeklyHours.positive'));\n      }\n\n      if (this.shiftForm.requiredWeeklyHours > 168) {\n        errors.push(this.t('shifts.validation.weeklyHours.maxWeekly'));\n      }\n\n      // Business Rule 2: Core Hours is mandatory with Weekly Hours\n      if (!this.shiftForm.hasCoreHours) {\n        errors.push(this.t('shifts.validation.weeklyHours.coreHoursRequired'));\n      }\n    }\n\n    // Business Rule 1: Grace Period should be disabled and empty when Allow Flexible Hours is selected\n    if (this.shiftForm.allowFlexibleHours && this.shiftForm.gracePeriodMinutes && this.shiftForm.gracePeriodMinutes > 0) {\n      errors.push(this.t('shifts.validation.flexible.noGracePeriod'));\n    }\n\n    // Business Rule 3: Night Shift not works with Hours Only\n    if (this.shiftForm.isNightShift && this.shiftForm.shiftType === ShiftType.HoursOnly) {\n      errors.push(this.t('shifts.validation.nightShift.notWithHoursOnly'));\n    }\n\n    // Existing business rules\n    if (this.shiftForm.shiftType === ShiftType.TimeBased) {\n      if (this.shiftForm.shiftPeriods.length === 0) {\n        errors.push(this.t('shifts.validation.timeBased.periodsRequired'));\n      }\n\n      if (this.shiftForm.requiredHours !== undefined) {\n        errors.push(this.t('shifts.validation.timeBased.noRequiredHours'));\n      }\n    } else if (this.shiftForm.shiftType === ShiftType.HoursOnly) {\n      if (this.shiftForm.shiftPeriods.length > 0) {\n        errors.push(this.t('shifts.validation.hoursOnly.noPeriods'));\n      }\n\n      if (!this.shiftForm.requiredHours || this.shiftForm.requiredHours <= 0) {\n        errors.push(this.t('shifts.validation.hoursOnly.requiredHours'));\n      }\n\n      if (this.shiftForm.requiredHours && this.shiftForm.requiredHours > 24) {\n        errors.push(this.t('shifts.validation.hoursOnly.maxHours'));\n      }\n    }\n\n    return errors;\n  }\n\n  private isCoreWithinPeriod(period: { startTime: string; endTime: string }, coreStart: string, coreEnd: string): boolean {\n    const periodStart = this.parseTime(period.startTime);\n    const periodEnd = this.parseTime(period.endTime);\n    const coreStartTime = this.parseTime(coreStart);\n    const coreEndTime = this.parseTime(coreEnd);\n\n    // Handle night shifts\n    if (periodEnd < periodStart) {\n      // Night period spans midnight\n      const withinFirstPart = coreStartTime >= periodStart && coreEndTime >= periodStart;\n      const withinSecondPart = coreStartTime <= periodEnd && coreEndTime <= periodEnd;\n      const spansNight = coreStartTime >= periodStart && coreEndTime <= periodEnd;\n      return withinFirstPart || withinSecondPart || spansNight;\n    } else {\n      // Normal day period\n      return coreStartTime >= periodStart && coreEndTime <= periodEnd;\n    }\n  }\n\n  isFormValid(): boolean {\n    const businessRuleErrors = this.validateBusinessRules();\n    return businessRuleErrors.length === 0;\n  }\n\n  getFormErrors(): string[] {\n    return this.validateBusinessRules();\n  }\n\n  // Form Submission\n  onSubmit(): void {\n    if (!this.isFormValid()) return;\n\n    this.submitting.set(true);\n    const request: CreateShiftRequest = {\n      name: this.shiftForm.name.trim(),\n      description: this.shiftForm.description.trim() || undefined,\n      shiftType: this.shiftForm.shiftType,\n      requiredHours: this.shiftForm.requiredHours,\n      isCheckInRequired: this.shiftForm.isCheckInRequired,\n      isAutoCheckOut: this.shiftForm.isAutoCheckOut,\n      allowFlexibleHours: this.shiftForm.allowFlexibleHours,\n      flexMinutesBefore: this.shiftForm.flexMinutesBefore,\n      flexMinutesAfter: this.shiftForm.flexMinutesAfter,\n      gracePeriodMinutes: this.shiftForm.gracePeriodMinutes,\n      // Extended Business Rules\n      requiredWeeklyHours: this.shiftForm.requiredWeeklyHours,\n      hasCoreHours: this.shiftForm.hasCoreHours,\n      coreStart: this.shiftForm.hasCoreHours ? this.shiftForm.coreStart : undefined,\n      coreEnd: this.shiftForm.hasCoreHours ? this.shiftForm.coreEnd : undefined,\n      // Working Days\n      isSunday: this.shiftForm.isSunday,\n      isMonday: this.shiftForm.isMonday,\n      isTuesday: this.shiftForm.isTuesday,\n      isWednesday: this.shiftForm.isWednesday,\n      isThursday: this.shiftForm.isThursday,\n      isFriday: this.shiftForm.isFriday,\n      isSaturday: this.shiftForm.isSaturday,\n      isNightShift: this.shiftForm.isNightShift,\n      shiftPeriods: this.shiftForm.shiftPeriods.length > 0\n        ? this.shiftForm.shiftPeriods.map(sp => ({\n            periodOrder: sp.periodOrder,\n            startTime: sp.startTime,\n            endTime: sp.endTime\n          } as CreateShiftPeriodRequest))\n        : undefined\n    };\n\n    this.shiftsService.createShift(request).subscribe({\n      next: () => {\n        this.router.navigate(['/shifts']);\n        this.submitting.set(false);\n      },\n      error: (error) => {\n        console.error('Failed to create shift:', error);\n        this.submitting.set(false);\n      }\n    });\n  }\n\n  onCancel(): void {\n    this.router.navigate(['/shifts']);\n  }\n}", "<div class=\"container-fluid px-4\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <!-- Header -->\n      <app-form-header\n        mode=\"create\"\n        [title]=\"t('shifts.create')\"\n        [subtitle]=\"t('shifts.createDescription')\"\n        moduleName=\"shifts\"\n        moduleRoute=\"shifts\">\n      </app-form-header>\n\n      <!-- Form Card -->\n      <div class=\"card border-0 shadow-sm\">\n        <div class=\"card-body p-4\">\n          <form (ngSubmit)=\"onSubmit()\" #formRef=\"ngForm\">\n\n            <!-- Basic Information Section -->\n            <div class=\"row mb-4\">\n              <div class=\"col-12\">\n                <h5 class=\"card-title mb-3\">{{ t('common.basicInformation') }}</h5>\n                <hr class=\"mt-0 mb-3\">\n              </div>\n\n              <!-- Shift Name -->\n              <div class=\"col-md-6 mb-3\">\n                <label for=\"name\" class=\"form-label\">\n                  {{ t('shifts.name') }} <span class=\"text-danger\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  id=\"name\"\n                  [(ngModel)]=\"shiftForm.name\"\n                  name=\"name\"\n                  required\n                  maxlength=\"200\"\n                  placeholder=\"{{ t('shifts.namePlaceholder') }}\">\n              </div>\n\n              <!-- Description -->\n              <div class=\"col-12 mb-3\">\n                <label for=\"description\" class=\"form-label\">{{ t('shifts.description') }}</label>\n                <textarea\n                  class=\"form-control\"\n                  id=\"description\"\n                  [(ngModel)]=\"shiftForm.description\"\n                  name=\"description\"\n                  rows=\"3\"\n                  maxlength=\"1000\"\n                  placeholder=\"{{ t('shifts.descriptionPlaceholder') }}\"></textarea>\n              </div>\n            </div>\n\n            <!-- Shift Type Section -->\n            <div class=\"row mb-4\">\n              <div class=\"col-12\">\n                <h5 class=\"card-title mb-3\">{{ t('shifts.type') }}</h5>\n                <hr class=\"mt-0 mb-3\">\n              </div>\n\n              <!-- Shift Type Selection -->\n              <div class=\"col-12 mb-3\">\n                <div class=\"row\">\n                  <div class=\"col-md-6\">\n                    <div class=\"form-check p-3 border rounded\">\n                      <input\n                        class=\"form-check-input\"\n                        type=\"radio\"\n                        name=\"shiftType\"\n                        id=\"timeBased\"\n                        [value]=\"ShiftType.TimeBased\"\n                        [(ngModel)]=\"shiftForm.shiftType\"\n                        (change)=\"onShiftTypeChange()\">\n                      <label class=\"form-check-label w-100\" for=\"timeBased\">\n                        <div class=\"fw-medium\">{{ t('shifts.types.timeBased') }}</div>\n                        <small class=\"text-muted\">{{ t('shifts.help.shiftType.timeBased') }}</small>\n                      </label>\n                    </div>\n                  </div>\n                  <div class=\"col-md-6\">\n                    <div class=\"form-check p-3 border rounded\">\n                      <input\n                        class=\"form-check-input\"\n                        type=\"radio\"\n                        name=\"shiftType\"\n                        id=\"hoursOnly\"\n                        [value]=\"ShiftType.HoursOnly\"\n                        [(ngModel)]=\"shiftForm.shiftType\"\n                        (change)=\"onShiftTypeChange()\">\n                      <label class=\"form-check-label w-100\" for=\"hoursOnly\">\n                        <div class=\"fw-medium\">{{ t('shifts.types.hoursOnly') }}</div>\n                        <small class=\"text-muted\">{{ t('shifts.help.shiftType.hoursOnly') }}</small>\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Required Hours (Hours-Only) -->\n              @if (shiftForm.shiftType === ShiftType.HoursOnly) {\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"requiredHours\" class=\"form-label\">\n                    {{ t('shifts.requiredHours') }} <span class=\"text-danger\">*</span>\n                  </label>\n                  <div class=\"input-group\">\n                    <input\n                      type=\"number\"\n                      class=\"form-control\"\n                      id=\"requiredHours\"\n                      [(ngModel)]=\"shiftForm.requiredHours\"\n                      name=\"requiredHours\"\n                      step=\"0.5\"\n                      min=\"0.5\"\n                      max=\"24\"\n                      required>\n                    <span class=\"input-group-text\">{{ t('shifts.hours') }}</span>\n                  </div>\n                  <div class=\"form-text\">{{ t('shifts.help.requiredHours') }}</div>\n                </div>\n              }\n            </div>\n\n            <!-- Working Days Section -->\n            <div class=\"row mb-4\">\n              <div class=\"col-12\">\n                <h5 class=\"card-title mb-3\">{{ t('shifts.workingDays') }}</h5>\n                <hr class=\"mt-0 mb-3\">\n              </div>\n\n              <div class=\"col-12 mb-3\">\n                <div class=\"row\">\n                  <div class=\"col-md-3 col-6 mb-2\">\n                    <div class=\"form-check\">\n                      <input\n                        class=\"form-check-input\"\n                        type=\"checkbox\"\n                        id=\"sunday\"\n                        [(ngModel)]=\"shiftForm.isSunday\"\n                        name=\"isSunday\">\n                      <label class=\"form-check-label\" for=\"sunday\">{{ t('common.days.sunday') }}</label>\n                    </div>\n                  </div>\n                  <div class=\"col-md-3 col-6 mb-2\">\n                    <div class=\"form-check\">\n                      <input\n                        class=\"form-check-input\"\n                        type=\"checkbox\"\n                        id=\"monday\"\n                        [(ngModel)]=\"shiftForm.isMonday\"\n                        name=\"isMonday\">\n                      <label class=\"form-check-label\" for=\"monday\">{{ t('common.days.monday') }}</label>\n                    </div>\n                  </div>\n                  <div class=\"col-md-3 col-6 mb-2\">\n                    <div class=\"form-check\">\n                      <input\n                        class=\"form-check-input\"\n                        type=\"checkbox\"\n                        id=\"tuesday\"\n                        [(ngModel)]=\"shiftForm.isTuesday\"\n                        name=\"isTuesday\">\n                      <label class=\"form-check-label\" for=\"tuesday\">{{ t('common.days.tuesday') }}</label>\n                    </div>\n                  </div>\n                  <div class=\"col-md-3 col-6 mb-2\">\n                    <div class=\"form-check\">\n                      <input\n                        class=\"form-check-input\"\n                        type=\"checkbox\"\n                        id=\"wednesday\"\n                        [(ngModel)]=\"shiftForm.isWednesday\"\n                        name=\"isWednesday\">\n                      <label class=\"form-check-label\" for=\"wednesday\">{{ t('common.days.wednesday') }}</label>\n                    </div>\n                  </div>\n                  <div class=\"col-md-3 col-6 mb-2\">\n                    <div class=\"form-check\">\n                      <input\n                        class=\"form-check-input\"\n                        type=\"checkbox\"\n                        id=\"thursday\"\n                        [(ngModel)]=\"shiftForm.isThursday\"\n                        name=\"isThursday\">\n                      <label class=\"form-check-label\" for=\"thursday\">{{ t('common.days.thursday') }}</label>\n                    </div>\n                  </div>\n                  <div class=\"col-md-3 col-6 mb-2\">\n                    <div class=\"form-check\">\n                      <input\n                        class=\"form-check-input\"\n                        type=\"checkbox\"\n                        id=\"friday\"\n                        [(ngModel)]=\"shiftForm.isFriday\"\n                        name=\"isFriday\">\n                      <label class=\"form-check-label\" for=\"friday\">{{ t('common.days.friday') }}</label>\n                    </div>\n                  </div>\n                  <div class=\"col-md-3 col-6 mb-2\">\n                    <div class=\"form-check\">\n                      <input\n                        class=\"form-check-input\"\n                        type=\"checkbox\"\n                        id=\"saturday\"\n                        [(ngModel)]=\"shiftForm.isSaturday\"\n                        name=\"isSaturday\">\n                      <label class=\"form-check-label\" for=\"saturday\">{{ t('common.days.saturday') }}</label>\n                    </div>\n                  </div>\n                </div>\n                <small class=\"text-muted\">{{ t('shifts.help.workingDays') }}</small>\n              </div>\n\n              <!-- Night Shift -->\n              <div class=\"col-12 mt-3\">\n                <div class=\"form-check\">\n                  <input\n                    class=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"nightShift\"\n                    [(ngModel)]=\"shiftForm.isNightShift\"\n                    name=\"isNightShift\"\n                    (change)=\"onNightShiftChange()\"\n                    [disabled]=\"shiftForm.shiftType === ShiftType.HoursOnly\">\n                  <label class=\"form-check-label fw-medium\" for=\"nightShift\">\n                    {{ t('shifts.isNightShift') }}\n                  </label>\n                </div>\n                <small class=\"text-muted\">{{ t('shifts.help.nightShift') }}</small>\n                @if (shiftForm.shiftType === ShiftType.HoursOnly) {\n                  <small class=\"text-warning d-block\">{{ t('shifts.help.nightShiftDisabledHoursOnly') }}</small>\n                }\n              </div>\n            </div>\n\n            <!-- Work Periods Section (Time-Based Only) -->\n            @if (shiftForm.shiftType === ShiftType.TimeBased) {\n              <div class=\"row mb-4\">\n                <div class=\"col-12\">\n                  <div class=\"d-flex justify-content-between align-items-center mb-3\">\n                    <h5 class=\"card-title mb-0\">{{ t('shifts.periods') }}</h5>\n                    @if (shiftForm.shiftPeriods.length < 2) {\n                      <button\n                        type=\"button\"\n                        class=\"btn btn-outline-primary btn-sm\"\n                        (click)=\"addShiftPeriod()\">\n                        <i class=\"bi bi-plus-circle me-1\"></i>{{ t('shifts.addPeriod') }}\n                      </button>\n                    }\n                  </div>\n                  <hr class=\"mt-0 mb-3\">\n\n                  @for (period of shiftForm.shiftPeriods; track $index) {\n                    <div class=\"card border mb-3\">\n                      <div class=\"card-header bg-light d-flex justify-content-between align-items-center py-2\">\n                        <span class=\"fw-medium\">{{ t('shifts.period') }} {{ period.periodOrder }}</span>\n                        <div class=\"d-flex align-items-center gap-2\">\n                          <span class=\"badge\" [ngClass]=\"isNightShift(period.startTime, period.endTime) ? 'bg-info' : 'bg-primary'\">\n                            {{ getPeriodTypeText(period) }}\n                          </span>\n                          <span class=\"text-muted small\">{{ formatHours(calculatePeriodHours(period.startTime, period.endTime)) }}</span>\n                          @if (shiftForm.shiftPeriods.length > 1) {\n                            <button\n                              type=\"button\"\n                              class=\"btn btn-outline-danger btn-sm\"\n                              (click)=\"removeShiftPeriod($index)\">\n                              <i class=\"bi bi-trash\"></i>\n                            </button>\n                          }\n                        </div>\n                      </div>\n                      <div class=\"card-body\">\n                        <div class=\"row\">\n                          <div class=\"col-md-6\">\n                            <label class=\"form-label\">{{ t('shifts.startTime') }}</label>\n                            <input\n                              type=\"time\"\n                              class=\"form-control\"\n                              [(ngModel)]=\"period.startTime\"\n                              [name]=\"'startTime_' + $index\"\n                              required>\n                          </div>\n                          <div class=\"col-md-6\">\n                            <label class=\"form-label\">{{ t('shifts.endTime') }}</label>\n                            <input\n                              type=\"time\"\n                              class=\"form-control\"\n                              [(ngModel)]=\"period.endTime\"\n                              [name]=\"'endTime_' + $index\"\n                              required>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  }\n\n                  <!-- Total Hours Display -->\n                  <div class=\"alert alert-info d-flex align-items-center\">\n                    <i class=\"bi bi-info-circle me-2\"></i>\n                    <span>{{ t('shifts.totalHours') }}: <strong>{{ formatHours(getTotalShiftHours()) }}</strong></span>\n                  </div>\n                </div>\n              </div>\n            }\n\n            <!-- Core Hours Section -->\n            <div class=\"row mb-4\">\n              <div class=\"col-12\">\n                <h5 class=\"card-title mb-3\">{{ t('shifts.coreHours') }}</h5>\n                <hr class=\"mt-0 mb-3\">\n              </div>\n\n              <!-- Enable Core Hours -->\n              <div class=\"col-12 mb-3\">\n                <div class=\"form-check form-switch\">\n                  <input\n                    class=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"hasCoreHours\"\n                    [(ngModel)]=\"shiftForm.hasCoreHours\"\n                    name=\"hasCoreHours\"\n                    (change)=\"onCoreHoursChange()\">\n                  <label class=\"form-check-label\" for=\"hasCoreHours\">\n                    {{ t('shifts.hasCoreHours') }}\n                  </label>\n                </div>\n                <div class=\"form-text\">{{ t('shifts.help.coreHours') }}</div>\n              </div>\n\n              <!-- Core Hours Times -->\n              @if (shiftForm.hasCoreHours) {\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"coreStart\" class=\"form-label\">\n                    {{ t('shifts.coreStart') }} <span class=\"text-danger\">*</span>\n                  </label>\n                  <input\n                    type=\"time\"\n                    class=\"form-control\"\n                    id=\"coreStart\"\n                    [(ngModel)]=\"shiftForm.coreStart\"\n                    name=\"coreStart\"\n                    required>\n                </div>\n\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"coreEnd\" class=\"form-label\">\n                    {{ t('shifts.coreEnd') }} <span class=\"text-danger\">*</span>\n                  </label>\n                  <input\n                    type=\"time\"\n                    class=\"form-control\"\n                    id=\"coreEnd\"\n                    [(ngModel)]=\"shiftForm.coreEnd\"\n                    name=\"coreEnd\"\n                    required>\n                </div>\n              }\n            </div>\n\n            <!-- Advanced Options Section -->\n            <div class=\"row mb-4\">\n              <div class=\"col-12\">\n                <h5 class=\"card-title mb-3\">{{ t('shifts.advancedOptions') }}</h5>\n                <hr class=\"mt-0 mb-3\">\n              </div>\n\n              <!-- Weekly Hours -->\n              <div class=\"col-md-6 mb-3\">\n                <label for=\"requiredWeeklyHours\" class=\"form-label\">{{ t('shifts.requiredWeeklyHours') }}</label>\n                <div class=\"input-group\">\n                  <input\n                    type=\"number\"\n                    class=\"form-control\"\n                    id=\"requiredWeeklyHours\"\n                    [(ngModel)]=\"shiftForm.requiredWeeklyHours\"\n                    name=\"requiredWeeklyHours\"\n                    (ngModelChange)=\"onWeeklyHoursChange()\"\n                    step=\"0.5\"\n                    min=\"0\"\n                    max=\"168\">\n                  <span class=\"input-group-text\">{{ t('shifts.hours') }}</span>\n                </div>\n                <div class=\"form-text\">{{ t('shifts.help.requiredWeeklyHours') }}</div>\n                @if (shiftForm.requiredWeeklyHours && shiftForm.requiredWeeklyHours > 0) {\n                  <small class=\"text-info d-block\">{{ t('shifts.help.weeklyHoursCoreRequired') }}</small>\n                }\n              </div>\n\n              <!-- Check-in Required -->\n              <div class=\"col-md-6 mb-3\">\n                <div class=\"form-check form-switch\">\n                  <input\n                    class=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"checkInRequired\"\n                    [(ngModel)]=\"shiftForm.isCheckInRequired\"\n                    name=\"isCheckInRequired\">\n                  <label class=\"form-check-label\" for=\"checkInRequired\">\n                    {{ t('shifts.checkInRequired') }}\n                  </label>\n                </div>\n                <div class=\"form-text\">{{ t('shifts.help.checkInRequired') }}</div>\n              </div>\n\n              <!-- Auto Check-out -->\n              <div class=\"col-md-6 mb-3\">\n                <div class=\"form-check form-switch\">\n                  <input\n                    class=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"autoCheckOut\"\n                    [(ngModel)]=\"shiftForm.isAutoCheckOut\"\n                    name=\"isAutoCheckOut\">\n                  <label class=\"form-check-label\" for=\"autoCheckOut\">\n                    {{ t('shifts.autoCheckOut') }}\n                  </label>\n                </div>\n                <div class=\"form-text\">{{ t('shifts.help.autoCheckOut') }}</div>\n              </div>\n\n              <!-- Grace Period (Time-Based Only) -->\n              @if (shiftForm.shiftType === ShiftType.TimeBased) {\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"gracePeriod\" class=\"form-label\">{{ t('shifts.gracePeriodMinutes') }}</label>\n                  <div class=\"input-group\">\n                    <input\n                      type=\"number\"\n                      class=\"form-control\"\n                      id=\"gracePeriod\"\n                      [(ngModel)]=\"shiftForm.gracePeriodMinutes\"\n                      name=\"gracePeriodMinutes\"\n                      (ngModelChange)=\"onGracePeriodChange()\"\n                      [disabled]=\"shiftForm.allowFlexibleHours\"\n                      min=\"0\"\n                      max=\"120\">\n                    <span class=\"input-group-text\">{{ t('common.minutes') }}</span>\n                  </div>\n                  <div class=\"form-text\">{{ t('shifts.help.gracePeriod') }}</div>\n                  @if (shiftForm.allowFlexibleHours) {\n                    <small class=\"text-warning d-block\">{{ t('shifts.help.gracePeriodDisabledFlexible') }}</small>\n                  }\n                </div>\n\n                <!-- Flexible Hours -->\n                <div class=\"col-12 mb-3\">\n                  <div class=\"form-check form-switch\">\n                    <input\n                      class=\"form-check-input\"\n                      type=\"checkbox\"\n                      id=\"flexibleHours\"\n                      [(ngModel)]=\"shiftForm.allowFlexibleHours\"\n                      name=\"allowFlexibleHours\"\n                      (change)=\"onFlexibleHoursChange()\">\n                    <label class=\"form-check-label\" for=\"flexibleHours\">\n                      {{ t('shifts.allowFlexibleHours') }}\n                    </label>\n                  </div>\n                  <div class=\"form-text\">{{ t('shifts.help.flexibleHours') }}</div>\n                </div>\n\n                @if (shiftForm.allowFlexibleHours) {\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"flexBefore\" class=\"form-label\">{{ t('shifts.flexMinutesBefore') }}</label>\n                    <div class=\"input-group\">\n                      <input\n                        type=\"number\"\n                        class=\"form-control\"\n                        id=\"flexBefore\"\n                        [(ngModel)]=\"shiftForm.flexMinutesBefore\"\n                        name=\"flexMinutesBefore\"\n                        min=\"1\"\n                        max=\"480\">\n                      <span class=\"input-group-text\">{{ t('common.minutes') }}</span>\n                    </div>\n                    <div class=\"form-text\">{{ t('shifts.help.flexBefore') }}</div>\n                  </div>\n\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"flexAfter\" class=\"form-label\">{{ t('shifts.flexMinutesAfter') }}</label>\n                    <div class=\"input-group\">\n                      <input\n                        type=\"number\"\n                        class=\"form-control\"\n                        id=\"flexAfter\"\n                        [(ngModel)]=\"shiftForm.flexMinutesAfter\"\n                        name=\"flexMinutesAfter\"\n                        min=\"1\"\n                        max=\"480\">\n                      <span class=\"input-group-text\">{{ t('common.minutes') }}</span>\n                    </div>\n                    <div class=\"form-text\">{{ t('shifts.help.flexAfter') }}</div>\n                  </div>\n                }\n              }\n            </div>\n\n            <!-- Validation Errors -->\n            @if (!isFormValid() && shiftForm.name) {\n              <div class=\"row mb-4\">\n                <div class=\"col-12\">\n                  <div class=\"alert alert-danger\">\n                    <div class=\"d-flex align-items-start\">\n                      <i class=\"bi bi-exclamation-triangle me-2 mt-1\"></i>\n                      <div>\n                        <h6 class=\"alert-heading mb-2\">{{ t('common.validationErrors') }}</h6>\n                        @for (error of getFormErrors(); track error) {\n                          <div class=\"mb-1\">• {{ error }}</div>\n                        }\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            }\n\n            <!-- Form Actions -->\n            <div class=\"row\">\n              <div class=\"col-12\">\n                <hr class=\"mb-4\">\n                <div class=\"d-flex justify-content-end gap-2\">\n                  <button\n                    type=\"button\"\n                    class=\"btn btn-outline-secondary\"\n                    (click)=\"onCancel()\"\n                    [disabled]=\"submitting()\">\n                    {{ t('common.cancel') }}\n                  </button>\n                  <button\n                    type=\"submit\"\n                    class=\"btn btn-primary\"\n                    [disabled]=\"!isFormValid() || submitting()\">\n                    @if (submitting()) {\n                      <span class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\n                      {{ t('shifts.loading.creating') }}\n                    } @else {\n                      <i class=\"bi bi-check-circle me-2\"></i>{{ t('shifts.create') }}\n                    }\n                  </button>\n                </div>\n              </div>\n            </div>\n\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"],
  "mappings": "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",
  "names": []
}
