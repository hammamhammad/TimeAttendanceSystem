{
  "version": 3,
  "sources": ["src/app/core/auth/auth.guard.ts", "src/app/core/auth/guards/admin.guard.ts", "src/app/core/auth/guards/manager.guard.ts", "src/app/app.routes.ts", "src/app/core/auth/auth.interceptor.ts", "src/app/core/title/app-title.strategy.ts", "src/app/core/services/filter-registry.service.ts", "src/app/core/services/filter-initialization.service.ts", "src/app/app.config.ts", "src/app/app.ts", "src/app/app.html", "src/main.ts"],
  "sourcesContent": ["import { inject } from '@angular/core';\nimport { CanMatchFn, Route, UrlSegment, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { PermissionService } from './permission.service';\n\n/**\n * Angular route guard that protects routes requiring authentication and authorization.\n * Implements comprehensive security checks including token validation, refresh handling,\n * and permission-based access control.\n * \n * @param route - Angular route configuration object\n * @param segments - URL segments being accessed\n * @returns boolean indicating whether access should be granted\n * \n * @remarks\n * Security Checks Performed:\n * 1. Authentication verification (user logged in)\n * 2. Token expiration validation and automatic refresh\n * 3. Permission-based authorization if route specifies requirements\n * 4. Automatic redirection to appropriate pages on failure\n * \n * Guard Behavior:\n * - Redirects to /login if user is not authenticated\n * - Attempts automatic token refresh if access token expired\n * - Redirects to /unauthorized if user lacks required permissions\n * - Allows access only if all security checks pass\n * \n * Usage in Route Configuration:\n * ```typescript\n * {\n *   path: 'admin',\n *   component: AdminComponent,\n *   canMatch: [authGuard],\n *   data: { permission: 'admin.access' }\n * }\n * ```\n * \n * Token Refresh Handling:\n * - Attempts automatic refresh for expired tokens\n * - Falls back to login redirect if refresh fails\n * - Maintains user session seamlessly when possible\n * - Prevents unnecessary re-authentication\n * \n * Permission Integration:\n * - Supports route-level permission requirements\n * - Integrates with role-based access control system\n * - Enables fine-grained authorization control\n * - Provides appropriate error pages for access denied\n * \n * Note: This guard uses Angular's modern functional approach\n * with dependency injection via inject() function.\n */\nexport const authGuard: CanMatchFn = (route: Route, segments: UrlSegment[]) => {\n  const authService = inject(AuthService);\n  const permissionService = inject(PermissionService);\n  const router = inject(Router);\n\n  // Check if user is authenticated\n  if (!authService.isAuthenticated()) {\n    router.navigate(['/login']);\n    return false;\n  }\n\n  // Check if token is expired\n  if (authService.isTokenExpired()) {\n    // Try to refresh token\n    const refreshToken = authService.getRefreshToken();\n    if (refreshToken) {\n      authService.refreshToken().subscribe({\n        error: () => {\n          router.navigate(['/login']);\n        }\n      });\n    } else {\n      router.navigate(['/login']);\n      return false;\n    }\n  }\n\n  // Check route permission if specified\n  const requiredPermission = route.data?.['permission'];\n  if (requiredPermission && !permissionService.has(requiredPermission)) {\n    router.navigate(['/unauthorized']);\n    return false;\n  }\n\n  return true;\n};", "import { inject } from '@angular/core';\r\nimport { CanMatchFn, Router } from '@angular/router';\r\nimport { AuthService } from '../auth.service';\r\nimport { PermissionService } from '../permission.service';\r\n\r\n/**\r\n * Admin Guard - Restricts access to routes requiring Admin level access.\r\n * Provides administrative access for organizational management functions.\r\n *\r\n * @description\r\n * This guard implements Admin-level authorization allowing access to users with\r\n * SystemAdmin or Admin roles. It covers most administrative functions except\r\n * system-level configuration that requires SystemAdmin privileges.\r\n *\r\n * @usage\r\n * ```typescript\r\n * {\r\n *   path: 'admin/users',\r\n *   component: UserManagementComponent,\r\n *   canMatch: [adminGuard]\r\n * }\r\n * ```\r\n *\r\n * @authorization\r\n * Allows access to:\r\n * - SystemAdmin role (full access)\r\n * - Admin role (organizational access)\r\n * - Users with specific administrative permissions\r\n *\r\n * @security\r\n * - Validates admin-level role assignment\r\n * - Supports permission-based fallback authorization\r\n * - Maintains audit trail for administrative access\r\n * - Redirects unauthorized users appropriately\r\n *\r\n * @returns true if user has Admin-level access, false otherwise\r\n */\r\nexport const adminGuard: CanMatchFn = (route, segments) => {\r\n  const authService = inject(AuthService);\r\n  const permissionService = inject(PermissionService);\r\n  const router = inject(Router);\r\n\r\n  // Check if user is authenticated\r\n  if (!authService.isAuthenticated()) {\r\n    router.navigate(['/login']);\r\n    return false;\r\n  }\r\n\r\n  // Check if user has admin-level access (SystemAdmin or Admin)\r\n  if (authService.isAdmin() || authService.isSystemAdmin()) {\r\n    return true;\r\n  }\r\n\r\n  // Check for specific route-based permissions if defined\r\n  const requiredPermission = route.data?.['permission'];\r\n  if (requiredPermission && permissionService.has(requiredPermission)) {\r\n    return true;\r\n  }\r\n\r\n  // Redirect to unauthorized page\r\n  router.navigate(['/unauthorized']);\r\n  return false;\r\n};", "import { inject } from '@angular/core';\r\nimport { CanMatchFn, Router } from '@angular/router';\r\nimport { AuthService } from '../auth.service';\r\nimport { PermissionService } from '../permission.service';\r\n\r\n/**\r\n * Manager Guard - Restricts access to routes requiring Manager level access.\r\n * Provides managerial access for departmental and team management functions.\r\n *\r\n * @description\r\n * This guard implements Manager-level authorization allowing access to users with\r\n * SystemAdmin, Admin, or Manager roles. It covers departmental management,\r\n * employee supervision, and team coordination functions.\r\n *\r\n * @usage\r\n * ```typescript\r\n * {\r\n *   path: 'management/employees',\r\n *   component: EmployeeManagementComponent,\r\n *   canMatch: [managerGuard]\r\n * }\r\n * ```\r\n *\r\n * @authorization\r\n * Allows access to:\r\n * - SystemAdmin role (full access)\r\n * - Admin role (organizational access)\r\n * - Manager role (departmental access)\r\n * - Users with specific managerial permissions\r\n *\r\n * @security\r\n * - Validates manager-level role assignment\r\n * - Supports hierarchical role inheritance\r\n * - Maintains departmental access boundaries\r\n * - Logs managerial access for audit purposes\r\n *\r\n * @returns true if user has Manager-level access, false otherwise\r\n */\r\nexport const managerGuard: CanMatchFn = (route, segments) => {\r\n  const authService = inject(AuthService);\r\n  const permissionService = inject(PermissionService);\r\n  const router = inject(Router);\r\n\r\n  // Check if user is authenticated\r\n  if (!authService.isAuthenticated()) {\r\n    router.navigate(['/login']);\r\n    return false;\r\n  }\r\n\r\n  // Check if user has manager-level access (SystemAdmin, Admin, or Manager)\r\n  if (authService.isSystemAdmin() ||\r\n      authService.isAdmin() ||\r\n      permissionService.hasRole('Manager')) {\r\n    return true;\r\n  }\r\n\r\n  // Check for specific managerial permissions\r\n  const managementPermissions = [\r\n    'employee.read',\r\n    'employee.assign',\r\n    'shift.read',\r\n    'shift.assign',\r\n    'department.read',\r\n    'attendance.read',\r\n    'report.read'\r\n  ];\r\n\r\n  if (permissionService.hasAny(managementPermissions)) {\r\n    return true;\r\n  }\r\n\r\n  // Check for specific route-based permissions if defined\r\n  const requiredPermission = route.data?.['permission'];\r\n  if (requiredPermission && permissionService.has(requiredPermission)) {\r\n    return true;\r\n  }\r\n\r\n  // Redirect to unauthorized page\r\n  router.navigate(['/unauthorized']);\r\n  return false;\r\n};", "import { Routes } from '@angular/router';\r\nimport { authGuard } from './core/auth/auth.guard';\r\nimport { systemAdminGuard, adminGuard, managerGuard, employeeGuard } from './core/auth/guards';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: '/dashboard',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'login',\r\n    loadComponent: () => import('./pages/auth/login.component').then(m => m.LoginComponent),\r\n    data: { title: 'auth.login' }\r\n  },\r\n  {\r\n    path: '',\r\n    loadComponent: () => import('./layout/layout.component').then(m => m.LayoutComponent),\r\n    canMatch: [authGuard],\r\n    children: [\r\n      {\r\n        path: 'dashboard',\r\n        loadComponent: () => import('./pages/dashboard/dashboard.component').then(m => m.DashboardComponent),\r\n        data: { title: 'dashboard.title' }\r\n      },\r\n      {\r\n        path: 'users',\r\n        loadComponent: () => import('./pages/users/users.component').then(m => m.UsersComponent),\r\n        data: {\r\n          title: 'users.title',\r\n          permission: 'user.read'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'users/create',\r\n        loadComponent: () => import('./pages/users/create-user-page/create-user-page.component').then(m => m.CreateUserPageComponent),\r\n        data: {\r\n          title: 'users.create_user',\r\n          permission: 'user.create'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'users/:id/view',\r\n        loadComponent: () => import('./pages/users/view-user/view-user.component').then(m => m.ViewUserComponent),\r\n        data: {\r\n          title: 'users.view_details',\r\n          permission: 'user.read'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'users/:id/edit',\r\n        loadComponent: () => import('./pages/users/edit-user-page/edit-user-page.component').then(m => m.EditUserPageComponent),\r\n        data: {\r\n          title: 'users.edit_user',\r\n          permission: 'user.update'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'employees',\r\n        loadComponent: () => import('./pages/employees/employees.component').then(m => m.EmployeesComponent),\r\n        data: {\r\n          title: 'employees.title',\r\n          permission: 'employee.read'\r\n        },\r\n        canMatch: [managerGuard]\r\n      },\r\n      {\r\n        path: 'employees/create',\r\n        loadComponent: () => import('./pages/employees/create-employee/create-employee.component').then(m => m.CreateEmployeeComponent),\r\n        data: {\r\n          title: 'employees.create_employee',\r\n          permission: 'employee.create'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'employees/:id/view',\r\n        loadComponent: () => import('./pages/employees/view-employee/view-employee.component').then(m => m.ViewEmployeeComponent),\r\n        data: {\r\n          title: 'employees.view_details',\r\n          permission: 'employee.read'\r\n        },\r\n        canMatch: [managerGuard]\r\n      },\r\n      {\r\n        path: 'employees/:id/edit',\r\n        loadComponent: () => import('./pages/employees/edit-employee/edit-employee.component').then(m => m.EditEmployeeComponent),\r\n        data: {\r\n          title: 'employees.edit_employee',\r\n          permission: 'employee.update'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'employees/:employeeId/change-shift',\r\n        loadComponent: () => import('./pages/employees/change-employee-shift/change-employee-shift.component').then(m => m.ChangeEmployeeShiftComponent),\r\n        data: {\r\n          title: 'employees.change_shift',\r\n          permission: 'employee.update'\r\n        },\r\n        canMatch: [managerGuard]\r\n      },\r\n      {\r\n        path: 'roles',\r\n        loadComponent: () => import('./pages/roles/roles.component').then(m => m.RolesComponent),\r\n        data: {\r\n          title: 'roles.title',\r\n          permission: 'role.read'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'roles/create',\r\n        loadComponent: () => import('./pages/roles/create-role/create-role.component').then(m => m.CreateRoleComponent),\r\n        data: {\r\n          title: 'roles.create_role',\r\n          permission: 'role.create'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'roles/:id/view',\r\n        loadComponent: () => import('./pages/roles/view-role/view-role.component').then(m => m.ViewRoleComponent),\r\n        data: {\r\n          title: 'roles.view_details',\r\n          permission: 'role.read'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'roles/:id/edit',\r\n        loadComponent: () => import('./pages/roles/edit-role/edit-role.component').then(m => m.EditRoleComponent),\r\n        data: {\r\n          title: 'roles.edit_role',\r\n          permission: 'role.update'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'branches',\r\n        loadComponent: () => import('./pages/branches/branches.component').then(m => m.BranchesComponent),\r\n        data: { \r\n          title: 'branches.title',\r\n          permission: 'branch.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'branches/:id/view',\r\n        loadComponent: () => import('./pages/branches/view-branch/view-branch.component').then(m => m.ViewBranchComponent),\r\n        data: { \r\n          title: 'branches.view_details',\r\n          permission: 'branch.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'branches/:id/edit',\r\n        loadComponent: () => import('./pages/branches/edit-branch/edit-branch.component').then(m => m.EditBranchComponent),\r\n        data: { \r\n          title: 'branches.edit_branch',\r\n          permission: 'branch.update'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'departments',\r\n        loadComponent: () => import('./pages/departments/departments.component').then(m => m.DepartmentsComponent),\r\n        data: { \r\n          title: 'departments.title',\r\n          permission: 'department.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'departments/create',\r\n        loadComponent: () => import('./pages/departments/create-department/create-department.component').then(m => m.CreateDepartmentComponent),\r\n        data: { \r\n          title: 'departments.create',\r\n          permission: 'department.create'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'departments/:id/view',\r\n        loadComponent: () => import('./pages/departments/view-department/view-department.component').then(m => m.ViewDepartmentComponent),\r\n        data: { \r\n          title: 'departments.view_details',\r\n          permission: 'department.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'departments/:id/edit',\r\n        loadComponent: () => import('./pages/departments/edit-department/edit-department.component').then(m => m.EditDepartmentComponent),\r\n        data: {\r\n          title: 'departments.edit',\r\n          permission: 'department.update'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'shifts',\r\n        loadComponent: () => import('./pages/shifts/shifts.component').then(m => m.ShiftsComponent),\r\n        data: {\r\n          title: 'shifts.title',\r\n          permission: 'shift.read'\r\n        },\r\n        canMatch: [managerGuard]\r\n      },\r\n      {\r\n        path: 'shifts/create',\r\n        loadComponent: () => import('./pages/shifts/create-shift/create-shift.component').then(m => m.CreateShiftComponent),\r\n        data: {\r\n          title: 'shifts.create_shift',\r\n          permission: 'shift.create'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'shifts/:id/view',\r\n        loadComponent: () => import('./pages/shifts/view-shift/view-shift.component').then(m => m.ViewShiftComponent),\r\n        data: {\r\n          title: 'shifts.view_details',\r\n          permission: 'shift.read'\r\n        },\r\n        canMatch: [managerGuard]\r\n      },\r\n      {\r\n        path: 'shifts/:id/edit',\r\n        loadComponent: () => import('./pages/shifts/edit-shift/edit-shift.component').then(m => m.EditShiftComponent),\r\n        data: {\r\n          title: 'shifts.edit_shift',\r\n          permission: 'shift.update'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'shifts/assign',\r\n        loadComponent: () => import('./pages/shifts/assign-shifts/assign-shifts.component').then(m => m.AssignShiftsComponent),\r\n        data: {\r\n          title: 'shifts.assignments.title',\r\n          permission: 'shift.assign'\r\n        },\r\n        canMatch: [managerGuard]\r\n      },\r\n      {\r\n        path: 'attendance',\r\n        loadComponent: () => import('./pages/attendance/attendance.component').then(m => m.AttendanceComponent),\r\n        data: {\r\n          title: 'attendance.dashboard_title',\r\n          permission: 'attendance.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'attendance/daily',\r\n        loadComponent: () => import('./pages/attendance/daily/daily-attendance.component').then(m => m.DailyAttendanceComponent),\r\n        data: {\r\n          title: 'attendance.daily_view',\r\n          permission: 'attendance.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'attendance/monthly-report',\r\n        loadComponent: () => import('./pages/attendance/monthly-report/monthly-report.component').then(m => m.MonthlyReportComponent),\r\n        data: {\r\n          title: 'attendance.monthly_report',\r\n          permission: 'attendance.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'attendance/daily-detail/:employeeId/:date',\r\n        loadComponent: () => import('./pages/attendance/daily-attendance-detail/daily-attendance-detail.component').then(m => m.DailyAttendanceDetailComponent),\r\n        data: {\r\n          title: 'attendance.daily_detail.title',\r\n          permission: 'attendance.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'attendance/employee-history',\r\n        loadComponent: () => import('./pages/attendance/employee-detail/employee-attendance-detail.component').then(m => m.EmployeeAttendanceDetailComponent),\r\n        data: {\r\n          title: 'attendance.employee_history.title',\r\n          permission: 'attendance.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'attendance/employee/:id',\r\n        loadComponent: () => import('./pages/attendance/employee-detail/employee-attendance-detail.component').then(m => m.EmployeeAttendanceDetailComponent),\r\n        data: {\r\n          title: 'attendance.employee_detail',\r\n          permission: 'attendance.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'attendance/edit/:id',\r\n        loadComponent: () => import('./pages/attendance/edit-attendance/edit-attendance.component').then(m => m.EditAttendanceComponent),\r\n        data: {\r\n          title: 'attendance.edit.title',\r\n          permission: 'attendance.update'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'attendance/:attendanceId/change-shift',\r\n        loadComponent: () => import('./pages/attendance/change-attendance-shift/change-attendance-shift.component').then(m => m.ChangeAttendanceShiftComponent),\r\n        data: {\r\n          title: 'attendance.change_shift_title',\r\n          permission: 'attendance.update'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'settings',\r\n        loadComponent: () => import('./pages/settings/settings.component').then(m => m.SettingsComponent),\r\n        data: { title: 'settings.title' }\r\n      },\r\n      {\r\n        path: 'settings/overtime',\r\n        loadComponent: () => import('./pages/settings/overtime/overtime-configurations.component').then(m => m.OvertimeConfigurationsComponent),\r\n        data: {\r\n          title: 'settings.overtime.title',\r\n          permission: 'settings.overtime.read'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'settings/overtime/create',\r\n        loadComponent: () => import('./pages/settings/overtime/create-overtime-configuration/create-overtime-configuration.component').then(m => m.CreateOvertimeConfigurationComponent),\r\n        data: {\r\n          title: 'settings.overtime.create',\r\n          permission: 'settings.overtime.create'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'settings/overtime/edit/:id',\r\n        loadComponent: () => import('./pages/settings/overtime/edit-overtime-configuration/edit-overtime-configuration.component').then(m => m.EditOvertimeConfigurationComponent),\r\n        data: {\r\n          title: 'settings.overtime.edit',\r\n          permission: 'settings.overtime.update'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'settings/overtime/:id/view',\r\n        loadComponent: () => import('./pages/settings/overtime/view-overtime-configuration/view-overtime-configuration.component').then(m => m.ViewOvertimeConfigurationComponent),\r\n        data: {\r\n          title: 'settings.overtime.view_details',\r\n          permission: 'settings.overtime.read'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'settings/public-holidays',\r\n        loadComponent: () => import('./pages/settings/public-holidays/public-holidays.component').then(m => m.PublicHolidaysComponent),\r\n        data: {\r\n          title: 'settings.holidays.title',\r\n          permission: 'publicHoliday.read'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'settings/public-holidays/create',\r\n        loadComponent: () => import('./pages/settings/public-holidays/create-public-holiday/create-public-holiday.component').then(m => m.CreatePublicHolidayComponent),\r\n        data: {\r\n          title: 'settings.holidays.create',\r\n          permission: 'publicHoliday.create'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'settings/public-holidays/:id/view',\r\n        loadComponent: () => import('./pages/settings/public-holidays/view-public-holiday/view-public-holiday.component').then(m => m.ViewPublicHolidayComponent),\r\n        data: {\r\n          title: 'settings.holidays.view_details',\r\n          permission: 'publicHoliday.read'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'settings/public-holidays/:id/edit',\r\n        loadComponent: () => import('./pages/settings/public-holidays/edit-public-holiday/edit-public-holiday.component').then(m => m.EditPublicHolidayComponent),\r\n        data: {\r\n          title: 'settings.holidays.edit',\r\n          permission: 'publicHoliday.update'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      // Vacation Types Routes\r\n      {\r\n        path: 'vacation-types',\r\n        loadComponent: () => import('./pages/vacation-types/vacation-types.component').then(m => m.VacationTypesComponent),\r\n        data: {\r\n          title: 'vacation_types.title',\r\n          permission: 'vacationType.read'\r\n        },\r\n        canMatch: [managerGuard]\r\n      },\r\n      {\r\n        path: 'vacation-types/:id',\r\n        loadComponent: () => import('./pages/vacation-types/view-vacation-type/view-vacation-type.component').then(m => m.ViewVacationTypeComponent),\r\n        data: {\r\n          title: 'vacation_types.view_details',\r\n          permission: 'vacationType.read'\r\n        },\r\n        canMatch: [managerGuard]\r\n      },\r\n      // Employee Vacations Routes\r\n      {\r\n        path: 'employee-vacations',\r\n        loadComponent: () => import('./pages/employee-vacations/employee-vacations.component').then(m => m.EmployeeVacationsComponent),\r\n        data: {\r\n          title: 'employee_vacations.title',\r\n          permission: 'vacation.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'employee-vacations/create',\r\n        loadComponent: () => import('./pages/employee-vacations/create-employee-vacation/create-employee-vacation.component').then(m => m.CreateEmployeeVacationComponent),\r\n        data: {\r\n          title: 'employee_vacations.create_vacation',\r\n          permission: 'vacation.create'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'employee-vacations/:id/view',\r\n        loadComponent: () => import('./pages/employee-vacations/view-employee-vacation/view-employee-vacation.component').then(m => m.ViewEmployeeVacationComponent),\r\n        data: {\r\n          title: 'employee_vacations.view_details',\r\n          permission: 'vacation.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'employee-vacations/:id/edit',\r\n        loadComponent: () => import('./pages/employee-vacations/edit-employee-vacation/edit-employee-vacation.component').then(m => m.EditEmployeeVacationComponent),\r\n        data: {\r\n          title: 'employee_vacations.edit_vacation',\r\n          permission: 'vacation.update'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'settings/excuse-policies',\r\n        loadComponent: () => import('./pages/excuse-policies/excuse-policies.component').then(m => m.ExcusePoliciesComponent),\r\n        data: {\r\n          title: 'excuse_policies.title',\r\n          permission: 'settings.excusePolicy.read'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'settings/excuse-policies/create',\r\n        loadComponent: () => import('./pages/excuse-policies/create-excuse-policy/create-excuse-policy.component').then(m => m.CreateExcusePolicyComponent),\r\n        data: {\r\n          title: 'excuse_policies.create_policy',\r\n          permission: 'settings.excusePolicy.create'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'settings/excuse-policies/:id/view',\r\n        loadComponent: () => import('./pages/excuse-policies/view-excuse-policy/view-excuse-policy.component').then(m => m.ViewExcusePolicyComponent),\r\n        data: {\r\n          title: 'excuse_policies.view_details',\r\n          permission: 'settings.excusePolicy.read'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      {\r\n        path: 'settings/excuse-policies/:id/edit',\r\n        loadComponent: () => import('./pages/excuse-policies/edit-excuse-policy/edit-excuse-policy.component').then(m => m.EditExcusePolicyComponent),\r\n        data: {\r\n          title: 'excuse_policies.edit_policy',\r\n          permission: 'settings.excusePolicy.update'\r\n        },\r\n        canMatch: [adminGuard]\r\n      },\r\n      // Employee Excuses Routes\r\n      {\r\n        path: 'employee-excuses',\r\n        loadComponent: () => import('./pages/employee-excuses/employee-excuses.component').then(m => m.EmployeeExcusesComponent),\r\n        data: {\r\n          title: 'employee_excuses.title',\r\n          permission: 'excuse.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'employee-excuses/create',\r\n        loadComponent: () => import('./pages/employee-excuses/excuse-request-form/excuse-request-form.component').then(m => m.ExcuseRequestFormComponent),\r\n        data: {\r\n          title: 'employee_excuses.create_request',\r\n          permission: 'excuse.create'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'employee-excuses/:id/view',\r\n        loadComponent: () => import('./pages/employee-excuses/excuse-details/excuse-details.component').then(m => m.ExcuseDetailsComponent),\r\n        data: {\r\n          title: 'employee_excuses.excuse_details',\r\n          permission: 'excuse.read'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n      {\r\n        path: 'employee-excuses/:id/edit',\r\n        loadComponent: () => import('./pages/employee-excuses/excuse-request-form/excuse-request-form.component').then(m => m.ExcuseRequestFormComponent),\r\n        data: {\r\n          title: 'employee_excuses.edit_request',\r\n          permission: 'excuse.update'\r\n        },\r\n        canMatch: [authGuard]\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path: 'unauthorized',\r\n    loadComponent: () => import('./pages/unauthorized/unauthorized.component').then(m => m.UnauthorizedComponent),\r\n    data: { title: 'Unauthorized Access' }\r\n  },\r\n  {\r\n    path: '**',\r\n    loadComponent: () => import('./pages/not-found/not-found.component').then(m => m.NotFoundComponent),\r\n    data: { title: 'Page Not Found' }\r\n  }\r\n];\r\n", "import { HttpInterceptorFn, HttpRequest, HttpHandlerFn, HttpErrorResponse } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { catchError, switchMap, throwError } from 'rxjs';\nimport { AuthService } from './auth.service';\n\nexport const authInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next: HttpHandlerFn) => {\n  const authService = inject(AuthService);\n  \n  // Skip auth header for login and refresh endpoints\n  if (req.url.includes('/auth/login') || req.url.includes('/auth/refresh')) {\n    return next(req);\n  }\n\n  const token = authService.getAccessToken();\n  \n  // Add authorization header if token exists\n  let authReq = req;\n  if (token) {\n    authReq = req.clone({\n      headers: req.headers.set('Authorization', `Bearer ${token}`)\n    });\n  }\n\n  return next(authReq).pipe(\n    catchError((error: HttpErrorResponse) => {\n      // Handle 401 unauthorized responses\n      if (error.status === 401 && !req.url.includes('/auth/refresh')) {\n        // Try to refresh token\n        if (authService.getRefreshToken()) {\n          return authService.refreshToken().pipe(\n            switchMap(() => {\n              // Retry original request with new token\n              const newToken = authService.getAccessToken();\n              const retryReq = req.clone({\n                headers: req.headers.set('Authorization', `Bearer ${newToken}`)\n              });\n              return next(retryReq);\n            }),\n            catchError((refreshError) => {\n              // If refresh fails, logout user\n              authService.logout();\n              return throwError(() => refreshError);\n            })\n          );\n        } else {\n          // No refresh token, logout user\n          authService.logout();\n        }\n      }\n      \n      return throwError(() => error);\n    })\n  );\n};", "import { Injectable, inject } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { RouterStateSnapshot, TitleStrategy } from '@angular/router';\nimport { I18nService } from '../i18n/i18n.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppTitleStrategy extends TitleStrategy {\n  private readonly title = inject(Title);\n  private readonly i18n = inject(I18nService);\n\n  override updateTitle(routerState: RouterStateSnapshot): void {\n    const title = this.buildTitle(routerState);\n    \n    if (title) {\n      // If title is a translation key, translate it\n      const translatedTitle = this.i18n.t(title);\n      const finalTitle = `${translatedTitle} | Time Attendance System`;\n      this.title.setTitle(finalTitle);\n    } else {\n      this.title.setTitle('Time Attendance System');\n    }\n  }\n}", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, map, of } from 'rxjs';\r\nimport {\r\n  UnifiedFilterConfig,\r\n  FilterDefinition,\r\n  FilterData,\r\n  ModuleFilterRegistry,\r\n  CommonFilterTypes\r\n} from '../../shared/models/unified-filter.model';\r\nimport { SearchableSelectOption } from '../../shared/components/searchable-select/searchable-select.component';\r\nimport { I18nService } from '../i18n/i18n.service';\r\nimport { BranchesService } from '../../pages/branches/branches.service';\r\nimport { DepartmentsService } from '../../pages/departments/departments.service';\r\nimport { EmployeesService } from '../../pages/employees/employees.service';\r\nimport { ShiftsService } from '../../pages/shifts/shifts.service';\r\nimport { VacationTypesService } from '../../pages/vacation-types/vacation-types.service';\r\nimport { RolesService } from '../../pages/roles/roles.service';\r\nimport { ExcusePoliciesService } from '../../pages/excuse-policies/excuse-policies.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FilterRegistryService {\r\n  private http = inject(HttpClient);\r\n  private i18n = inject(I18nService);\r\n  private branchesService = inject(BranchesService);\r\n  private departmentsService = inject(DepartmentsService);\r\n  private employeesService = inject(EmployeesService);\r\n  private shiftsService = inject(ShiftsService);\r\n  private vacationTypesService = inject(VacationTypesService);\r\n  private rolesService = inject(RolesService);\r\n  private excusePoliciesService = inject(ExcusePoliciesService);\r\n\r\n  private registry: ModuleFilterRegistry = {};\r\n  private dataCache = new BehaviorSubject<FilterData>({});\r\n\r\n  constructor() {\r\n    this.initializeCommonData();\r\n  }\r\n\r\n  registerModule(moduleName: string, config: UnifiedFilterConfig): void {\r\n    this.registry[moduleName] = config;\r\n  }\r\n\r\n  getModuleConfig(moduleName: string): UnifiedFilterConfig | null {\r\n    return this.registry[moduleName] || null;\r\n  }\r\n\r\n  getAllModules(): string[] {\r\n    return Object.keys(this.registry);\r\n  }\r\n\r\n  private initializeCommonData(): void {\r\n    this.loadBranches();\r\n    this.initShiftsData();\r\n    this.initRolesData();\r\n  }\r\n\r\n  private loadBranches(): void {\r\n    this.branchesService.getBranches(1, 1000).subscribe({\r\n      next: (result) => {\r\n        const currentData = this.dataCache.value;\r\n        this.dataCache.next({\r\n          ...currentData,\r\n          branches: result.items\r\n        });\r\n      },\r\n      error: (error) => {\r\n        console.error('Failed to load branches for filter registry:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadDepartments(branchId?: number): Observable<any[]> {\r\n    return this.departmentsService.getDepartments(branchId ? { branchId } : {}).pipe(\r\n      map(departments => {\r\n        const currentData = this.dataCache.value;\r\n        const cacheKey = branchId ? `departments_${branchId}` : 'departments_all';\r\n        this.dataCache.next({\r\n          ...currentData,\r\n          [cacheKey]: departments\r\n        });\r\n        return departments;\r\n      })\r\n    );\r\n  }\r\n\r\n  loadEmployees(branchId?: number): Observable<any[]> {\r\n    return this.employeesService.getEmployeesForSelection(branchId).pipe(\r\n      map(employees => {\r\n        const currentData = this.dataCache.value;\r\n        const cacheKey = branchId ? `employees_${branchId}` : 'employees_all';\r\n        this.dataCache.next({\r\n          ...currentData,\r\n          [cacheKey]: employees\r\n        });\r\n        return employees;\r\n      })\r\n    );\r\n  }\r\n\r\n  loadShifts(branchId?: number): Observable<any[]> {\r\n    return this.shiftsService.getShifts(1, 1000).pipe(\r\n      map(response => {\r\n        const shifts = response.items || [];\r\n        const currentData = this.dataCache.value;\r\n        const cacheKey = branchId ? `shifts_${branchId}` : 'shifts_all';\r\n        this.dataCache.next({\r\n          ...currentData,\r\n          [cacheKey]: shifts,\r\n          shifts: shifts\r\n        });\r\n        return shifts;\r\n      })\r\n    );\r\n  }\r\n\r\n  private initShiftsData(): void {\r\n    this.loadShifts().subscribe({\r\n      error: (error) => {\r\n        console.error('Failed to load shifts for filter registry:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadVacationTypes(branchId?: number): Observable<any[]> {\r\n    return this.vacationTypesService.getVacationTypes({ branchId }).pipe(\r\n      map(response => {\r\n        const vacationTypes = response.items || [];\r\n        const currentData = this.dataCache.value;\r\n        const cacheKey = branchId ? `vacationTypes_${branchId}` : 'vacationTypes_all';\r\n        this.dataCache.next({\r\n          ...currentData,\r\n          [cacheKey]: vacationTypes,\r\n          vacationTypes: vacationTypes\r\n        });\r\n        return vacationTypes;\r\n      })\r\n    );\r\n  }\r\n\r\n  loadRoles(): Observable<any[]> {\r\n    return this.rolesService.getRoles().pipe(\r\n      map(roles => {\r\n        const currentData = this.dataCache.value;\r\n        this.dataCache.next({\r\n          ...currentData,\r\n          roles: roles\r\n        });\r\n        return roles;\r\n      })\r\n    );\r\n  }\r\n\r\n  private initRolesData(): void {\r\n    this.loadRoles().subscribe({\r\n      error: (error) => {\r\n        console.error('Failed to load roles for filter registry:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadExcusePolicies(branchId?: number): Observable<any[]> {\r\n    return this.excusePoliciesService.getExcusePolicies({ branchId }).pipe(\r\n      map(response => {\r\n        const excusePolicies = response.items || [];\r\n        const currentData = this.dataCache.value;\r\n        const cacheKey = branchId ? `excusePolicies_${branchId}` : 'excusePolicies_all';\r\n        this.dataCache.next({\r\n          ...currentData,\r\n          [cacheKey]: excusePolicies,\r\n          excusePolicies: excusePolicies\r\n        });\r\n        return excusePolicies;\r\n      })\r\n    );\r\n  }\r\n\r\n  getCachedData(): Observable<FilterData> {\r\n    return this.dataCache.asObservable();\r\n  }\r\n\r\n  buildFilterOptions(filterDef: FilterDefinition, cachedData: FilterData, currentFilters?: any): SearchableSelectOption[] {\r\n    const allOption: SearchableSelectOption = {\r\n      value: '',\r\n      label: this.i18n.t('common.all')\r\n    };\r\n\r\n    switch (filterDef.type) {\r\n      case CommonFilterTypes.Branch:\r\n        return [\r\n          allOption,\r\n          ...(cachedData.branches || []).map(branch => ({\r\n            value: branch.id.toString(),\r\n            label: branch.name,\r\n            subLabel: branch.code\r\n          }))\r\n        ];\r\n\r\n      case CommonFilterTypes.Department:\r\n        const branchIdForDepts = filterDef.dependsOn && currentFilters ? currentFilters[filterDef.dependsOn] : null;\r\n        const departmentKey = branchIdForDepts ?\r\n          `departments_${branchIdForDepts}` : 'departments_all';\r\n        return [\r\n          allOption,\r\n          ...(cachedData[departmentKey] || []).map((dept: any) => ({\r\n            value: dept.id.toString(),\r\n            label: dept.name,\r\n            subLabel: dept.nameAr\r\n          }))\r\n        ];\r\n\r\n      case CommonFilterTypes.Employee:\r\n        const branchIdForEmps = filterDef.dependsOn && currentFilters ? currentFilters[filterDef.dependsOn] : null;\r\n        const employeeKey = branchIdForEmps ?\r\n          `employees_${branchIdForEmps}` : 'employees_all';\r\n        return [\r\n          allOption,\r\n          ...(cachedData[employeeKey] || []).map((emp: any) => ({\r\n            value: emp.id.toString(),\r\n            label: emp.name,\r\n            subLabel: emp.employeeNumber\r\n          }))\r\n        ];\r\n\r\n      case CommonFilterTypes.Status:\r\n        if (filterDef.statusEnum && filterDef.statusLabels) {\r\n          return [\r\n            allOption,\r\n            ...Object.keys(filterDef.statusEnum)\r\n              .filter(key => isNaN(Number(key))) // Filter out numeric keys for enum\r\n              .map(key => ({\r\n                value: filterDef.statusEnum![key],\r\n                label: this.i18n.t(filterDef.statusLabels![key] || key)\r\n              }))\r\n          ];\r\n        }\r\n        return [allOption];\r\n\r\n      case CommonFilterTypes.Shift:\r\n        const shiftKey = filterDef.dependsOn ?\r\n          `shifts_${cachedData[filterDef.dependsOn]}` : 'shifts_all';\r\n        return [\r\n          allOption,\r\n          ...(cachedData[shiftKey] || cachedData.shifts || []).map((shift: any) => ({\r\n            value: shift.id.toString(),\r\n            label: shift.name,\r\n            subLabel: shift.description || shift.shiftType\r\n          }))\r\n        ];\r\n\r\n      case CommonFilterTypes.VacationType:\r\n        const vacationTypeKey = filterDef.dependsOn ?\r\n          `vacationTypes_${cachedData[filterDef.dependsOn]}` : 'vacationTypes_all';\r\n        return [\r\n          allOption,\r\n          ...(cachedData[vacationTypeKey] || cachedData.vacationTypes || []).map((vacationType: any) => ({\r\n            value: vacationType.id.toString(),\r\n            label: vacationType.name,\r\n            subLabel: vacationType.nameAr\r\n          }))\r\n        ];\r\n\r\n      case CommonFilterTypes.Role:\r\n        return [\r\n          allOption,\r\n          ...(cachedData.roles || []).map((role: any) => ({\r\n            value: role.id.toString(),\r\n            label: role.name,\r\n            subLabel: role.type\r\n          }))\r\n        ];\r\n\r\n      case CommonFilterTypes.ExcusePolicy:\r\n        const excusePolicyKey = filterDef.dependsOn ?\r\n          `excusePolicies_${cachedData[filterDef.dependsOn]}` : 'excusePolicies_all';\r\n        return [\r\n          allOption,\r\n          ...(cachedData[excusePolicyKey] || cachedData.excusePolicies || []).map((policy: any) => ({\r\n            value: policy.id.toString(),\r\n            label: policy.branchName || 'Organization Wide',\r\n            subLabel: policy.maxExcusesPerMonth ? `${policy.maxExcusesPerMonth}/month` : ''\r\n          }))\r\n        ];\r\n\r\n      case CommonFilterTypes.Custom:\r\n        return filterDef.options?.map(option => ({\r\n          ...option,\r\n          label: this.i18n.t(option.label)\r\n        })) || [allOption];\r\n\r\n      default:\r\n        return [allOption];\r\n    }\r\n  }\r\n\r\n  buildActiveInactiveOptions(): SearchableSelectOption[] {\r\n    return [\r\n      { value: '', label: this.i18n.t('common.all') },\r\n      { value: 'true', label: this.i18n.t('common.active') },\r\n      { value: 'false', label: this.i18n.t('common.inactive') }\r\n    ];\r\n  }\r\n\r\n  clearCache(): void {\r\n    this.dataCache.next({});\r\n    this.initializeCommonData();\r\n  }\r\n}", "import { Injectable, inject } from '@angular/core';\r\nimport { FilterRegistryService } from './filter-registry.service';\r\nimport { FILTER_CONFIGURATIONS } from '../configs/filter-configurations';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FilterInitializationService {\r\n  private filterRegistry = inject(FilterRegistryService);\r\n\r\n  constructor() {\r\n    this.initializeConfigurations();\r\n  }\r\n\r\n  private initializeConfigurations(): void {\r\n    // Register all module configurations\r\n    Object.keys(FILTER_CONFIGURATIONS).forEach(moduleName => {\r\n      this.filterRegistry.registerModule(moduleName, FILTER_CONFIGURATIONS[moduleName]);\r\n    });\r\n\r\n    console.log(`Registered ${Object.keys(FILTER_CONFIGURATIONS).length} filter configurations`);\r\n  }\r\n\r\n  // Method to re-initialize if needed\r\n  reinitialize(): void {\r\n    this.initializeConfigurations();\r\n  }\r\n\r\n  // Method to get all registered modules\r\n  getRegisteredModules(): string[] {\r\n    return this.filterRegistry.getAllModules();\r\n  }\r\n}", "import { ApplicationConfig, provideBrowserGlobalErrorListeners, provideZoneChangeDetection, APP_INITIALIZER } from '@angular/core';\nimport { provideRouter, withComponentInputBinding, withHashLocation, TitleStrategy } from '@angular/router';\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { routes } from './app.routes';\nimport { authInterceptor } from './core/auth/auth.interceptor';\nimport { AppTitleStrategy } from './core/title/app-title.strategy';\nimport { FilterInitializationService } from './core/services/filter-initialization.service';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideBrowserGlobalErrorListeners(),\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes, withComponentInputBinding(), withHashLocation()),\n    provideHttpClient(withInterceptors([authInterceptor])),\n    {\n      provide: TitleStrategy,\n      useClass: AppTitleStrategy\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: (filterInitService: FilterInitializationService) => () => {\n        console.log('Initializing filter configurations...');\n        return Promise.resolve();\n      },\n      deps: [FilterInitializationService],\n      multi: true\n    }\n  ]\n};\n", "import { Component, OnInit } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { I18nService } from './core/i18n/i18n.service';\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet],\n  templateUrl: './app.html',\n  styleUrl: './app.css'\n})\nexport class App implements OnInit {\n  constructor(private i18n: I18nService) {}\n\n  ngOnInit(): void {\n    // Initialize i18n with default locale\n    const savedLocale = (localStorage.getItem('app_locale') as 'en' | 'ar') || 'en';\n    this.i18n.setLocale(savedLocale);\n  }\n}\n", "<router-outlet />\n", "import { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { App } from './app/app';\n\nbootstrapApplication(App, appConfig)\n  .catch((err) => console.error(err));\n"],
  "mappings": "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",
  "names": []
}
