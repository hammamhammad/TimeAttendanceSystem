{
  "version": 3,
  "sources": ["src/app/core/services/shift-assignment.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport {\n  ShiftAssignment,\n  ShiftAssignmentsResponse,\n  CreateShiftAssignmentRequest,\n  UpdateShiftAssignmentRequest,\n  ShiftAssignmentType,\n  ShiftAssignmentStatus,\n  ShiftAssignmentOptions\n} from '../../shared/models/shift.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShiftAssignmentService {\n  private readonly apiUrl = `${environment.apiUrl}/api/v1/shift-assignments`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Get paginated list of shift assignments with optional filtering\n   */\n  getShiftAssignments(params?: {\n    page?: number;\n    pageSize?: number;\n    search?: string;\n    assignmentType?: ShiftAssignmentType;\n    employeeId?: number;\n    departmentId?: number;\n    branchId?: number;\n    shiftId?: number;\n    status?: ShiftAssignmentStatus;\n    effectiveFrom?: string;\n    effectiveTo?: string;\n    currentlyActive?: boolean;\n    minPriority?: number;\n    maxPriority?: number;\n  }): Observable<ShiftAssignmentsResponse> {\n    let httpParams = new HttpParams();\n\n    if (params) {\n      if (params.page !== undefined) {\n        httpParams = httpParams.set('page', params.page.toString());\n      }\n      if (params.pageSize !== undefined) {\n        httpParams = httpParams.set('pageSize', params.pageSize.toString());\n      }\n      if (params.search) {\n        httpParams = httpParams.set('search', params.search);\n      }\n      if (params.assignmentType !== undefined) {\n        httpParams = httpParams.set('assignmentType', params.assignmentType.toString());\n      }\n      if (params.employeeId !== undefined) {\n        httpParams = httpParams.set('employeeId', params.employeeId.toString());\n      }\n      if (params.departmentId !== undefined) {\n        httpParams = httpParams.set('departmentId', params.departmentId.toString());\n      }\n      if (params.branchId !== undefined) {\n        httpParams = httpParams.set('branchId', params.branchId.toString());\n      }\n      if (params.shiftId !== undefined) {\n        httpParams = httpParams.set('shiftId', params.shiftId.toString());\n      }\n      if (params.status !== undefined) {\n        httpParams = httpParams.set('status', params.status.toString());\n      }\n      if (params.effectiveFrom) {\n        httpParams = httpParams.set('effectiveFrom', params.effectiveFrom);\n      }\n      if (params.effectiveTo) {\n        httpParams = httpParams.set('effectiveTo', params.effectiveTo);\n      }\n      if (params.currentlyActive !== undefined) {\n        httpParams = httpParams.set('currentlyActive', params.currentlyActive.toString());\n      }\n      if (params.minPriority !== undefined) {\n        httpParams = httpParams.set('minPriority', params.minPriority.toString());\n      }\n      if (params.maxPriority !== undefined) {\n        httpParams = httpParams.set('maxPriority', params.maxPriority.toString());\n      }\n    }\n\n    return this.http.get<ShiftAssignmentsResponse>(this.apiUrl, { params: httpParams });\n  }\n\n  /**\n   * Get a specific shift assignment by ID\n   */\n  getShiftAssignmentById(id: number): Observable<ShiftAssignment> {\n    return this.http.get<ShiftAssignment>(`${this.apiUrl}/${id}`);\n  }\n\n  /**\n   * Create a new shift assignment\n   */\n  createShiftAssignment(request: CreateShiftAssignmentRequest): Observable<{ id: number }> {\n    return this.http.post<{ id: number }>(this.apiUrl, request);\n  }\n\n  /**\n   * Update an existing shift assignment\n   */\n  updateShiftAssignment(id: number, request: UpdateShiftAssignmentRequest): Observable<any> {\n    return this.http.put(`${this.apiUrl}/${id}`, request);\n  }\n\n  /**\n   * Delete a shift assignment\n   */\n  deleteShiftAssignment(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n\n  /**\n   * Get assignment creation options (assignment types, statuses, etc.)\n   */\n  getAssignmentOptions(): Observable<ShiftAssignmentOptions> {\n    return this.http.get<ShiftAssignmentOptions>(`${this.apiUrl}/options`);\n  }\n\n  /**\n   * Get display text for assignment type\n   */\n  getAssignmentTypeDisplay(type: ShiftAssignmentType): string {\n    switch (type) {\n      case ShiftAssignmentType.Employee:\n        return 'Employee';\n      case ShiftAssignmentType.Department:\n        return 'Department';\n      case ShiftAssignmentType.Branch:\n        return 'Branch';\n      default:\n        return 'Unknown';\n    }\n  }\n\n  /**\n   * Get display text for assignment status\n   */\n  getStatusDisplay(status: ShiftAssignmentStatus): string {\n    switch (status) {\n      case ShiftAssignmentStatus.Pending:\n        return 'Pending';\n      case ShiftAssignmentStatus.Active:\n        return 'Active';\n      case ShiftAssignmentStatus.Inactive:\n        return 'Inactive';\n      case ShiftAssignmentStatus.Expired:\n        return 'Expired';\n      case ShiftAssignmentStatus.Cancelled:\n        return 'Cancelled';\n      default:\n        return 'Unknown';\n    }\n  }\n\n  /**\n   * Get CSS class for status badge\n   */\n  getStatusBadgeClass(status: ShiftAssignmentStatus): string {\n    switch (status) {\n      case ShiftAssignmentStatus.Pending:\n        return 'badge-warning';\n      case ShiftAssignmentStatus.Active:\n        return 'badge-success';\n      case ShiftAssignmentStatus.Inactive:\n        return 'badge-secondary';\n      case ShiftAssignmentStatus.Expired:\n        return 'badge-danger';\n      case ShiftAssignmentStatus.Cancelled:\n        return 'badge-dark';\n      default:\n        return 'badge-light';\n    }\n  }\n\n  /**\n   * Format date for display\n   */\n  formatDate(dateString: string): string {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString();\n  }\n\n  /**\n   * Check if an assignment is currently active\n   */\n  isCurrentlyActive(assignment: ShiftAssignment): boolean {\n    const now = new Date();\n    const effectiveDate = new Date(assignment.effectiveDate);\n    const endDate = assignment.endDate ? new Date(assignment.endDate) : null;\n\n    return assignment.status === ShiftAssignmentStatus.Active &&\n           effectiveDate <= now &&\n           (!endDate || endDate >= now);\n  }\n}"],
  "mappings": "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",
  "names": []
}
