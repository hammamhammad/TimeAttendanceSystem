{
  "version": 3,
  "sources": ["src/app/pages/branches/view-branch/view-branch.component.ts"],
  "sourcesContent": ["import { Component, OnInit, signal, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\nimport { BranchesService } from '../branches.service';\nimport { Branch } from '../../../shared/models/branch.model';\nimport { I18nService } from '../../../core/i18n/i18n.service';\nimport { PageHeaderComponent } from '../../../shared/components/page-header/page-header.component';\nimport { DetailCardComponent, DetailField } from '../../../shared/components/detail-card/detail-card.component';\nimport { StatusBadgeComponent } from '../../../shared/components/status-badge/status-badge.component';\nimport { StatCardComponent } from '../../../shared/components/stat-card/stat-card.component';\nimport { LoadingSpinnerComponent } from '../../../shared/components/loading-spinner/loading-spinner.component';\n\n@Component({\n  selector: 'app-view-branch',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    PageHeaderComponent,\n    DetailCardComponent,\n    StatusBadgeComponent,\n    StatCardComponent,\n    LoadingSpinnerComponent\n  ],\n  template: `\n    <div class=\"app-view-page\">\n      <!-- Standardized Page Header -->\n      <app-page-header\n        [title]=\"i18n.t('branches.view_details')\">\n      </app-page-header>\n\n      @if (loading()) {\n        <div class=\"d-flex justify-content-center py-5\">\n          <app-loading-spinner\n            [message]=\"i18n.t('common.loading')\"\n            [centered]=\"true\">\n          </app-loading-spinner>\n        </div>\n      } @else if (branch()) {\n        <!-- Branch Details Layout -->\n        <div class=\"app-desktop-sidebar\">\n          <!-- Main Content -->\n          <div class=\"app-main-content\">\n            <!-- Branch Information Card -->\n            <app-detail-card\n              [title]=\"branch()?.name\"\n              [subtitle]=\"branch()?.code\"\n              icon=\"fas fa-building\"\n              [fields]=\"branchFields\"\n              layout=\"two-column\">\n            </app-detail-card>\n          </div>\n\n          <!-- Sidebar -->\n          <div class=\"app-sidebar-content\">\n            <!-- Quick Actions Card -->\n            <div class=\"card mb-3\">\n              <div class=\"card-header\">\n                <h6 class=\"card-title mb-0\">{{ i18n.t('common.actions') }}</h6>\n              </div>\n              <div class=\"card-body\">\n                <div class=\"d-grid gap-2\">\n                  <button\n                    type=\"button\"\n                    class=\"btn btn-outline-primary\"\n                    (click)=\"onEdit()\">\n                    <i class=\"fa-solid fa-edit me-2\"></i>\n                    {{ i18n.t('branches.edit') }}\n                  </button>\n                  <button\n                    type=\"button\"\n                    class=\"btn btn-outline-info\"\n                    (click)=\"onViewEmployees()\">\n                    <i class=\"fa-solid fa-users me-2\"></i>\n                    {{ i18n.t('branches.view_employees') }}\n                  </button>\n                  <button\n                    type=\"button\"\n                    class=\"btn btn-outline-secondary\"\n                    (click)=\"onViewDepartments()\">\n                    <i class=\"fa-solid fa-sitemap me-2\"></i>\n                    {{ i18n.t('branches.view_departments') }}\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <!-- Statistics Cards -->\n            <div class=\"d-flex flex-column gap-3\">\n              <app-stat-card\n                [label]=\"i18n.t('branches.employees')\"\n                [value]=\"statistics()?.employeeCount || 0\"\n                icon=\"fas fa-users\"\n                variant=\"primary\"\n                [clickable]=\"true\"\n                [clickableText]=\"i18n.t('branches.view_employees')\"\n                (click)=\"onViewEmployees()\">\n              </app-stat-card>\n\n              <app-stat-card\n                [label]=\"i18n.t('branches.departments')\"\n                [value]=\"statistics()?.departmentCount || 0\"\n                icon=\"fas fa-sitemap\"\n                variant=\"info\"\n                [clickable]=\"true\"\n                [clickableText]=\"i18n.t('branches.view_departments')\"\n                (click)=\"onViewDepartments()\">\n              </app-stat-card>\n            </div>\n          </div>\n        </div>\n      } @else {\n        <div class=\"alert alert-danger\">\n          <i class=\"fa-solid fa-exclamation-triangle me-2\"></i>\n          {{ error() || i18n.t('branches.branch_not_found') }}\n        </div>\n      }\n    </div>\n  `\n})\nexport class ViewBranchComponent implements OnInit {\n  private route = inject(ActivatedRoute);\n  private router = inject(Router);\n  private branchesService = inject(BranchesService);\n  public i18n = inject(I18nService);\n\n  branch = signal<Branch | null>(null);\n  statistics = signal<{employeeCount: number, departmentCount: number} | null>(null);\n  loading = signal(true);\n  error = signal('');\n\n\n  get branchFields(): DetailField[] {\n    const branch = this.branch();\n    if (!branch) return [];\n\n    return [\n      {\n        label: this.i18n.t('branches.name'),\n        value: branch.name\n      },\n      {\n        label: this.i18n.t('branches.code'),\n        value: branch.code,\n        copyable: true\n      },\n      {\n        label: this.i18n.t('branches.timezone'),\n        value: branch.timeZone\n      },\n      {\n        label: this.i18n.t('common.status'),\n        value: branch.isActive ? this.i18n.t('common.active') : this.i18n.t('common.inactive'),\n        type: 'badge',\n        badgeVariant: branch.isActive ? 'success' : 'danger'\n      },\n      {\n        label: this.i18n.t('common.phone'),\n        value: '-'\n      },\n      {\n        label: this.i18n.t('common.email'),\n        value: '-'\n      },\n      {\n        label: this.i18n.t('branches.created_at'),\n        value: branch.createdAtUtc,\n        type: 'date'\n      }\n    ];\n  }\n\n  ngOnInit(): void {\n    const branchId = this.route.snapshot.paramMap.get('id');\n    if (branchId) {\n      this.loadBranch(branchId);\n      this.loadStatistics(branchId);\n    } else {\n      this.error.set('Invalid branch ID');\n      this.loading.set(false);\n    }\n  }\n\n  loadBranch(branchId: string): void {\n    // Mock loading branch for now\n    setTimeout(() => {\n      const mockBranch: Branch = {\n        id: parseInt(branchId),\n        name: 'Sample Branch',\n        code: 'SAMPLE',\n        timeZone: 'UTC',\n        isActive: true,\n        employeeCount: 10,\n        departmentCount: 3,\n        createdAtUtc: '2024-01-01T00:00:00Z'\n      };\n      this.branch.set(mockBranch);\n      this.loading.set(false);\n    }, 1000);\n  }\n\n  loadStatistics(branchId: string): void {\n    // Mock statistics for now\n    this.statistics.set({\n      employeeCount: Math.floor(Math.random() * 100),\n      departmentCount: Math.floor(Math.random() * 20)\n    });\n  }\n\n  onEdit(): void {\n    if (this.branch()) {\n      this.router.navigate(['/branches', this.branch()!.id, 'edit']);\n    }\n  }\n\n  onViewEmployees(): void {\n    if (this.branch()) {\n      this.router.navigate(['/employees'], { queryParams: { branchId: this.branch()!.id } });\n    }\n  }\n\n  onViewDepartments(): void {\n    if (this.branch()) {\n      this.router.navigate(['/departments'], { queryParams: { branchId: this.branch()!.id } });\n    }\n  }\n\n  onBack(): void {\n    this.router.navigate(['/branches']);\n  }\n\n  formatDate(dateString: string): string {\n    return new Date(dateString).toLocaleDateString();\n  }\n\n  private getErrorMessage(error: any): string {\n    if (error?.error?.error) {\n      return error.error.error;\n    }\n    return this.i18n.t('errors.unknown');\n  }\n}"],
  "mappings": "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",
  "names": []
}
