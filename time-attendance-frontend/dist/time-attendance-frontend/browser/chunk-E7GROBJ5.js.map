{
  "version": 3,
  "sources": ["src/app/pages/settings/overtime/create-overtime-configuration/create-overtime-configuration.component.ts", "src/app/pages/settings/overtime/create-overtime-configuration/create-overtime-configuration.component.html"],
  "sourcesContent": ["import { Component, OnInit, signal, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { I18nService } from '../../../../core/i18n/i18n.service';\r\nimport { OvertimeConfigurationsService, CreateOvertimeConfigurationRequest } from '../overtime-configurations.service';\r\nimport { NotificationService } from '../../../../core/notifications/notification.service';\r\nimport { ConfirmationService } from '../../../../core/confirmation/confirmation.service';\r\nimport { FormHeaderComponent } from '../../../../shared/components/form-header/form-header.component';\r\n\r\n@Component({\r\n  selector: 'app-create-overtime-configuration',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, RouterModule, FormHeaderComponent],\r\n  templateUrl: './create-overtime-configuration.component.html',\r\n  styleUrls: ['./create-overtime-configuration.component.css']\r\n})\r\nexport class CreateOvertimeConfigurationComponent implements OnInit {\r\n  private overtimeService = inject(OvertimeConfigurationsService);\r\n  private router = inject(Router);\r\n  private notificationService = inject(NotificationService);\r\n  private confirmationService = inject(ConfirmationService);\r\n  public i18n = inject(I18nService);\r\n\r\n  // Signals for state management\r\n  loading = signal(false);\r\n  submitting = signal(false);\r\n  error = signal<string | null>(null);\r\n\r\n  // Form state with default values\r\n  configForm = {\r\n    enablePreShiftOvertime: false,\r\n    enablePostShiftOvertime: true,\r\n    normalDayRate: 1.5,\r\n    publicHolidayRate: 2.0,\r\n    offDayRate: 1.5,\r\n    minimumOvertimeMinutes: 15,\r\n    considerFlexibleTime: true,\r\n    maxPreShiftOvertimeHours: 2.0,\r\n    maxPostShiftOvertimeHours: 4.0,\r\n    requireApproval: false,\r\n    overtimeGracePeriodMinutes: 5,\r\n    weekendAsOffDay: true,\r\n    roundingIntervalMinutes: 15,\r\n    policyNotes: '',\r\n    effectiveFromDate: this.getTodayDate(),\r\n    effectiveToDate: ''\r\n  };\r\n\r\n  // Validation errors\r\n  validationErrors = signal<{[key: string]: string}>({});\r\n\r\n  ngOnInit(): void {\r\n    // Component initialization\r\n  }\r\n\r\n  t(key: string): string {\r\n    return this.i18n.t(key);\r\n  }\r\n\r\n  private getTodayDate(): string {\r\n    const today = new Date();\r\n    return today.toISOString().split('T')[0];\r\n  }\r\n\r\n  validateForm(): boolean {\r\n    const errors: {[key: string]: string} = {};\r\n\r\n    // Validate required fields\r\n    if (!this.configForm.effectiveFromDate) {\r\n      errors['effectiveFromDate'] = this.t('settings.overtime.validation.effectiveFromRequired');\r\n    }\r\n\r\n    // Validate rates\r\n    if (this.configForm.normalDayRate <= 0) {\r\n      errors['normalDayRate'] = this.t('settings.overtime.validation.ratePositive');\r\n    }\r\n    if (this.configForm.publicHolidayRate <= 0) {\r\n      errors['publicHolidayRate'] = this.t('settings.overtime.validation.ratePositive');\r\n    }\r\n    if (this.configForm.offDayRate <= 0) {\r\n      errors['offDayRate'] = this.t('settings.overtime.validation.ratePositive');\r\n    }\r\n\r\n    // Validate minimum overtime minutes\r\n    if (this.configForm.minimumOvertimeMinutes < 0) {\r\n      errors['minimumOvertimeMinutes'] = this.t('settings.overtime.validation.minimumOvertimePositive');\r\n    }\r\n\r\n    // Validate grace period\r\n    if (this.configForm.overtimeGracePeriodMinutes < 0) {\r\n      errors['overtimeGracePeriodMinutes'] = this.t('settings.overtime.validation.gracePeriodPositive');\r\n    }\r\n\r\n    // Validate rounding interval\r\n    if (this.configForm.roundingIntervalMinutes <= 0) {\r\n      errors['roundingIntervalMinutes'] = this.t('settings.overtime.validation.roundingIntervalPositive');\r\n    }\r\n\r\n    // Validate max hours\r\n    if (this.configForm.maxPreShiftOvertimeHours < 0) {\r\n      errors['maxPreShiftOvertimeHours'] = this.t('settings.overtime.validation.maxHoursPositive');\r\n    }\r\n    if (this.configForm.maxPostShiftOvertimeHours < 0) {\r\n      errors['maxPostShiftOvertimeHours'] = this.t('settings.overtime.validation.maxHoursPositive');\r\n    }\r\n\r\n    // Validate effective dates\r\n    if (this.configForm.effectiveToDate && this.configForm.effectiveFromDate) {\r\n      const fromDate = new Date(this.configForm.effectiveFromDate);\r\n      const toDate = new Date(this.configForm.effectiveToDate);\r\n      if (toDate <= fromDate) {\r\n        errors['effectiveToDate'] = this.t('settings.overtime.validation.effectiveToAfterFrom');\r\n      }\r\n    }\r\n\r\n    // Check if at least one overtime type is enabled\r\n    if (!this.configForm.enablePreShiftOvertime && !this.configForm.enablePostShiftOvertime) {\r\n      errors['general'] = this.t('settings.overtime.validation.atLeastOneOvertimeType');\r\n    }\r\n\r\n    this.validationErrors.set(errors);\r\n    return Object.keys(errors).length === 0;\r\n  }\r\n\r\n  hasError(field: string): boolean {\r\n    return !!this.validationErrors()[field];\r\n  }\r\n\r\n  getError(field: string): string {\r\n    return this.validationErrors()[field] || '';\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (!this.validateForm()) {\r\n      this.error.set(this.t('settings.overtime.validation.pleaseFix'));\r\n      return;\r\n    }\r\n\r\n    this.submitting.set(true);\r\n    this.error.set(null);\r\n\r\n    const request: CreateOvertimeConfigurationRequest = {\r\n      enablePreShiftOvertime: this.configForm.enablePreShiftOvertime,\r\n      enablePostShiftOvertime: this.configForm.enablePostShiftOvertime,\r\n      normalDayRate: this.configForm.normalDayRate,\r\n      publicHolidayRate: this.configForm.publicHolidayRate,\r\n      offDayRate: this.configForm.offDayRate,\r\n      minimumOvertimeMinutes: this.configForm.minimumOvertimeMinutes,\r\n      considerFlexibleTime: this.configForm.considerFlexibleTime,\r\n      maxPreShiftOvertimeHours: this.configForm.maxPreShiftOvertimeHours,\r\n      maxPostShiftOvertimeHours: this.configForm.maxPostShiftOvertimeHours,\r\n      requireApproval: this.configForm.requireApproval,\r\n      overtimeGracePeriodMinutes: this.configForm.overtimeGracePeriodMinutes,\r\n      weekendAsOffDay: this.configForm.weekendAsOffDay,\r\n      roundingIntervalMinutes: this.configForm.roundingIntervalMinutes,\r\n      policyNotes: this.configForm.policyNotes.trim(),\r\n      effectiveFromDate: this.configForm.effectiveFromDate,\r\n      effectiveToDate: this.configForm.effectiveToDate || undefined\r\n    };\r\n\r\n    this.overtimeService.createOvertimeConfiguration(request).subscribe({\r\n      next: () => {\r\n        this.notificationService.success(\r\n          this.t('app.success'),\r\n          this.t('settings.overtime.policyCreatedSuccessfully')\r\n        );\r\n        this.router.navigate(['/settings/overtime']);\r\n      },\r\n      error: (error) => {\r\n        console.error('Failed to create overtime configuration:', error);\r\n        this.submitting.set(false);\r\n\r\n        if (error.status === 400 && error.error?.errors) {\r\n          // Handle validation errors from server\r\n          this.validationErrors.set(error.error.errors);\r\n          this.error.set(this.t('settings.overtime.validation.serverErrors'));\r\n        } else {\r\n          this.error.set(this.t('errors.server'));\r\n          this.notificationService.error(\r\n            this.t('app.error'),\r\n            this.t('errors.server')\r\n          );\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async onCancel(): Promise<void> {\r\n    // Check if form has been modified\r\n    const hasChanges = this.hasFormChanges();\r\n\r\n    if (hasChanges) {\r\n      const result = await this.confirmationService.confirm({\r\n        title: this.t('common.unsavedChanges'),\r\n        message: this.t('common.unsavedChangesMessage'),\r\n        confirmText: this.t('common.discard'),\r\n        cancelText: this.t('common.stay'),\r\n        confirmButtonClass: 'btn-warning',\r\n        icon: 'fa-exclamation-triangle',\r\n        iconClass: 'text-warning'\r\n      });\r\n\r\n      if (!result.confirmed) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.router.navigate(['/settings/overtime']);\r\n  }\r\n\r\n  private hasFormChanges(): boolean {\r\n    // Check if any form values have changed from defaults\r\n    const defaults = {\r\n      enablePreShiftOvertime: false,\r\n      enablePostShiftOvertime: true,\r\n      normalDayRate: 1.5,\r\n      publicHolidayRate: 2.0,\r\n      offDayRate: 1.5,\r\n      minimumOvertimeMinutes: 15,\r\n      considerFlexibleTime: true,\r\n      maxPreShiftOvertimeHours: 2.0,\r\n      maxPostShiftOvertimeHours: 4.0,\r\n      requireApproval: false,\r\n      overtimeGracePeriodMinutes: 5,\r\n      weekendAsOffDay: true,\r\n      roundingIntervalMinutes: 15,\r\n      policyNotes: '',\r\n      effectiveFromDate: this.getTodayDate(),\r\n      effectiveToDate: ''\r\n    };\r\n\r\n    return JSON.stringify(this.configForm) !== JSON.stringify(defaults);\r\n  }\r\n\r\n  onReset(): void {\r\n    this.configForm = {\r\n      enablePreShiftOvertime: false,\r\n      enablePostShiftOvertime: true,\r\n      normalDayRate: 1.5,\r\n      publicHolidayRate: 2.0,\r\n      offDayRate: 1.5,\r\n      minimumOvertimeMinutes: 15,\r\n      considerFlexibleTime: true,\r\n      maxPreShiftOvertimeHours: 2.0,\r\n      maxPostShiftOvertimeHours: 4.0,\r\n      requireApproval: false,\r\n      overtimeGracePeriodMinutes: 5,\r\n      weekendAsOffDay: true,\r\n      roundingIntervalMinutes: 15,\r\n      policyNotes: '',\r\n      effectiveFromDate: this.getTodayDate(),\r\n      effectiveToDate: ''\r\n    };\r\n    this.validationErrors.set({});\r\n    this.error.set(null);\r\n  }\r\n\r\n  // Helper method to check if input is valid\r\n  isFieldInvalid(field: string): boolean {\r\n    return this.hasError(field);\r\n  }\r\n\r\n  // Helper method to get input classes\r\n  getFieldClasses(field: string): string {\r\n    const baseClasses = 'form-control';\r\n    return this.isFieldInvalid(field)\r\n      ? `${baseClasses} is-invalid`\r\n      : baseClasses;\r\n  }\r\n}", "<div class=\"container-fluid\">\r\n  <!-- Header Section -->\r\n  <app-form-header\r\n    mode=\"create\"\r\n    [title]=\"t('settings.overtime.createPolicy')\"\r\n    moduleName=\"settings\"\r\n    moduleRoute=\"settings/overtime\"\r\n    [loading]=\"submitting()\">\r\n  </app-form-header>\r\n\r\n  <!-- Error Alert -->\r\n  @if (error()) {\r\n    <div class=\"alert alert-danger\" role=\"alert\">\r\n      <i class=\"fa-solid fa-exclamation-triangle me-2\"></i>\r\n      {{ error() }}\r\n    </div>\r\n  }\r\n\r\n  <!-- Form -->\r\n  <form (ngSubmit)=\"onSubmit()\" #formRef=\"ngForm\">\r\n    <div class=\"row\">\r\n      <!-- Main Configuration -->\r\n      <div class=\"col-lg-8\">\r\n        <!-- Overtime Types Section -->\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">\r\n              <i class=\"fa-solid fa-clock me-2\"></i>\r\n              {{ t('settings.overtime.overtimeTypes') }}\r\n            </h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <div class=\"form-check mb-3\">\r\n                  <input\r\n                    class=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"enablePreShiftOvertime\"\r\n                    [(ngModel)]=\"configForm.enablePreShiftOvertime\"\r\n                    name=\"enablePreShiftOvertime\">\r\n                  <label class=\"form-check-label\" for=\"enablePreShiftOvertime\">\r\n                    <strong>{{ t('settings.overtime.enablePreShift') }}</strong>\r\n                    <br>\r\n                    <small class=\"text-muted\">{{ t('settings.overtime.enablePreShiftDescription') }}</small>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-6\">\r\n                <div class=\"form-check mb-3\">\r\n                  <input\r\n                    class=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"enablePostShiftOvertime\"\r\n                    [(ngModel)]=\"configForm.enablePostShiftOvertime\"\r\n                    name=\"enablePostShiftOvertime\">\r\n                  <label class=\"form-check-label\" for=\"enablePostShiftOvertime\">\r\n                    <strong>{{ t('settings.overtime.enablePostShift') }}</strong>\r\n                    <br>\r\n                    <small class=\"text-muted\">{{ t('settings.overtime.enablePostShiftDescription') }}</small>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            @if (hasError('general')) {\r\n              <div class=\"text-danger small\">{{ getError('general') }}</div>\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Overtime Rates Section -->\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">\r\n              <i class=\"fa-solid fa-percentage me-2\"></i>\r\n              {{ t('settings.overtime.overtimeRates') }}\r\n            </h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-4\">\r\n                <div class=\"mb-3\">\r\n                  <label for=\"normalDayRate\" class=\"form-label\">\r\n                    {{ t('settings.overtime.normalDayRate') }} <span class=\"text-danger\">*</span>\r\n                  </label>\r\n                  <div class=\"input-group\">\r\n                    <input\r\n                      type=\"number\"\r\n                      [class]=\"getFieldClasses('normalDayRate')\"\r\n                      id=\"normalDayRate\"\r\n                      [(ngModel)]=\"configForm.normalDayRate\"\r\n                      name=\"normalDayRate\"\r\n                      step=\"0.1\"\r\n                      min=\"1\"\r\n                      required>\r\n                    <span class=\"input-group-text\">x</span>\r\n                  </div>\r\n                  @if (hasError('normalDayRate')) {\r\n                    <div class=\"invalid-feedback d-block\">{{ getError('normalDayRate') }}</div>\r\n                  }\r\n                  <div class=\"form-text\">{{ t('settings.overtime.normalDayRateDescription') }}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <div class=\"mb-3\">\r\n                  <label for=\"publicHolidayRate\" class=\"form-label\">\r\n                    {{ t('settings.overtime.publicHolidayRate') }} <span class=\"text-danger\">*</span>\r\n                  </label>\r\n                  <div class=\"input-group\">\r\n                    <input\r\n                      type=\"number\"\r\n                      [class]=\"getFieldClasses('publicHolidayRate')\"\r\n                      id=\"publicHolidayRate\"\r\n                      [(ngModel)]=\"configForm.publicHolidayRate\"\r\n                      name=\"publicHolidayRate\"\r\n                      step=\"0.1\"\r\n                      min=\"1\"\r\n                      required>\r\n                    <span class=\"input-group-text\">x</span>\r\n                  </div>\r\n                  @if (hasError('publicHolidayRate')) {\r\n                    <div class=\"invalid-feedback d-block\">{{ getError('publicHolidayRate') }}</div>\r\n                  }\r\n                  <div class=\"form-text\">{{ t('settings.overtime.publicHolidayRateDescription') }}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <div class=\"mb-3\">\r\n                  <label for=\"offDayRate\" class=\"form-label\">\r\n                    {{ t('settings.overtime.offDayRate') }} <span class=\"text-danger\">*</span>\r\n                  </label>\r\n                  <div class=\"input-group\">\r\n                    <input\r\n                      type=\"number\"\r\n                      [class]=\"getFieldClasses('offDayRate')\"\r\n                      id=\"offDayRate\"\r\n                      [(ngModel)]=\"configForm.offDayRate\"\r\n                      name=\"offDayRate\"\r\n                      step=\"0.1\"\r\n                      min=\"1\"\r\n                      required>\r\n                    <span class=\"input-group-text\">x</span>\r\n                  </div>\r\n                  @if (hasError('offDayRate')) {\r\n                    <div class=\"invalid-feedback d-block\">{{ getError('offDayRate') }}</div>\r\n                  }\r\n                  <div class=\"form-text\">{{ t('settings.overtime.offDayRateDescription') }}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Overtime Limits Section -->\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">\r\n              <i class=\"fa-solid fa-hourglass-half me-2\"></i>\r\n              {{ t('settings.overtime.overtimeLimits') }}\r\n            </h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <div class=\"mb-3\">\r\n                  <label for=\"maxPreShiftOvertimeHours\" class=\"form-label\">\r\n                    {{ t('settings.overtime.maxPreShiftHours') }}\r\n                  </label>\r\n                  <div class=\"input-group\">\r\n                    <input\r\n                      type=\"number\"\r\n                      [class]=\"getFieldClasses('maxPreShiftOvertimeHours')\"\r\n                      id=\"maxPreShiftOvertimeHours\"\r\n                      [(ngModel)]=\"configForm.maxPreShiftOvertimeHours\"\r\n                      name=\"maxPreShiftOvertimeHours\"\r\n                      step=\"0.5\"\r\n                      min=\"0\">\r\n                    <span class=\"input-group-text\">{{ t('common.hours') }}</span>\r\n                  </div>\r\n                  @if (hasError('maxPreShiftOvertimeHours')) {\r\n                    <div class=\"invalid-feedback d-block\">{{ getError('maxPreShiftOvertimeHours') }}</div>\r\n                  }\r\n                  <div class=\"form-text\">{{ t('settings.overtime.maxPreShiftHoursDescription') }}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-6\">\r\n                <div class=\"mb-3\">\r\n                  <label for=\"maxPostShiftOvertimeHours\" class=\"form-label\">\r\n                    {{ t('settings.overtime.maxPostShiftHours') }}\r\n                  </label>\r\n                  <div class=\"input-group\">\r\n                    <input\r\n                      type=\"number\"\r\n                      [class]=\"getFieldClasses('maxPostShiftOvertimeHours')\"\r\n                      id=\"maxPostShiftOvertimeHours\"\r\n                      [(ngModel)]=\"configForm.maxPostShiftOvertimeHours\"\r\n                      name=\"maxPostShiftOvertimeHours\"\r\n                      step=\"0.5\"\r\n                      min=\"0\">\r\n                    <span class=\"input-group-text\">{{ t('common.hours') }}</span>\r\n                  </div>\r\n                  @if (hasError('maxPostShiftOvertimeHours')) {\r\n                    <div class=\"invalid-feedback d-block\">{{ getError('maxPostShiftOvertimeHours') }}</div>\r\n                  }\r\n                  <div class=\"form-text\">{{ t('settings.overtime.maxPostShiftHoursDescription') }}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Calculation Settings Section -->\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">\r\n              <i class=\"fa-solid fa-calculator me-2\"></i>\r\n              {{ t('settings.overtime.calculationSettings') }}\r\n            </h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-4\">\r\n                <div class=\"mb-3\">\r\n                  <label for=\"minimumOvertimeMinutes\" class=\"form-label\">\r\n                    {{ t('settings.overtime.minimumOvertimeMinutes') }}\r\n                  </label>\r\n                  <div class=\"input-group\">\r\n                    <input\r\n                      type=\"number\"\r\n                      [class]=\"getFieldClasses('minimumOvertimeMinutes')\"\r\n                      id=\"minimumOvertimeMinutes\"\r\n                      [(ngModel)]=\"configForm.minimumOvertimeMinutes\"\r\n                      name=\"minimumOvertimeMinutes\"\r\n                      min=\"0\">\r\n                    <span class=\"input-group-text\">{{ t('common.minutes') }}</span>\r\n                  </div>\r\n                  @if (hasError('minimumOvertimeMinutes')) {\r\n                    <div class=\"invalid-feedback d-block\">{{ getError('minimumOvertimeMinutes') }}</div>\r\n                  }\r\n                  <div class=\"form-text\">{{ t('settings.overtime.minimumOvertimeMinutesDescription') }}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <div class=\"mb-3\">\r\n                  <label for=\"overtimeGracePeriodMinutes\" class=\"form-label\">\r\n                    {{ t('settings.overtime.gracePeriodMinutes') }}\r\n                  </label>\r\n                  <div class=\"input-group\">\r\n                    <input\r\n                      type=\"number\"\r\n                      [class]=\"getFieldClasses('overtimeGracePeriodMinutes')\"\r\n                      id=\"overtimeGracePeriodMinutes\"\r\n                      [(ngModel)]=\"configForm.overtimeGracePeriodMinutes\"\r\n                      name=\"overtimeGracePeriodMinutes\"\r\n                      min=\"0\">\r\n                    <span class=\"input-group-text\">{{ t('common.minutes') }}</span>\r\n                  </div>\r\n                  @if (hasError('overtimeGracePeriodMinutes')) {\r\n                    <div class=\"invalid-feedback d-block\">{{ getError('overtimeGracePeriodMinutes') }}</div>\r\n                  }\r\n                  <div class=\"form-text\">{{ t('settings.overtime.gracePeriodMinutesDescription') }}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <div class=\"mb-3\">\r\n                  <label for=\"roundingIntervalMinutes\" class=\"form-label\">\r\n                    {{ t('settings.overtime.roundingIntervalMinutes') }}\r\n                  </label>\r\n                  <div class=\"input-group\">\r\n                    <input\r\n                      type=\"number\"\r\n                      [class]=\"getFieldClasses('roundingIntervalMinutes')\"\r\n                      id=\"roundingIntervalMinutes\"\r\n                      [(ngModel)]=\"configForm.roundingIntervalMinutes\"\r\n                      name=\"roundingIntervalMinutes\"\r\n                      min=\"1\">\r\n                    <span class=\"input-group-text\">{{ t('common.minutes') }}</span>\r\n                  </div>\r\n                  @if (hasError('roundingIntervalMinutes')) {\r\n                    <div class=\"invalid-feedback d-block\">{{ getError('roundingIntervalMinutes') }}</div>\r\n                  }\r\n                  <div class=\"form-text\">{{ t('settings.overtime.roundingIntervalMinutesDescription') }}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <div class=\"form-check mb-3\">\r\n                  <input\r\n                    class=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"considerFlexibleTime\"\r\n                    [(ngModel)]=\"configForm.considerFlexibleTime\"\r\n                    name=\"considerFlexibleTime\">\r\n                  <label class=\"form-check-label\" for=\"considerFlexibleTime\">\r\n                    {{ t('settings.overtime.considerFlexibleTime') }}\r\n                    <br>\r\n                    <small class=\"text-muted\">{{ t('settings.overtime.considerFlexibleTimeDescription') }}</small>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-6\">\r\n                <div class=\"form-check mb-3\">\r\n                  <input\r\n                    class=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"weekendAsOffDay\"\r\n                    [(ngModel)]=\"configForm.weekendAsOffDay\"\r\n                    name=\"weekendAsOffDay\">\r\n                  <label class=\"form-check-label\" for=\"weekendAsOffDay\">\r\n                    {{ t('settings.overtime.weekendAsOffDay') }}\r\n                    <br>\r\n                    <small class=\"text-muted\">{{ t('settings.overtime.weekendAsOffDayDescription') }}</small>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Policy Notes Section -->\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">\r\n              <i class=\"fa-solid fa-sticky-note me-2\"></i>\r\n              {{ t('settings.overtime.policyNotes') }}\r\n            </h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"mb-3\">\r\n              <label for=\"policyNotes\" class=\"form-label\">\r\n                {{ t('settings.overtime.policyNotesLabel') }}\r\n              </label>\r\n              <textarea\r\n                class=\"form-control\"\r\n                id=\"policyNotes\"\r\n                [(ngModel)]=\"configForm.policyNotes\"\r\n                name=\"policyNotes\"\r\n                rows=\"4\"\r\n                [placeholder]=\"t('settings.overtime.policyNotesPlaceholder')\">\r\n              </textarea>\r\n              <div class=\"form-text\">{{ t('settings.overtime.policyNotesDescription') }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Sidebar -->\r\n      <div class=\"col-lg-4\">\r\n        <!-- Effective Period Section -->\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">\r\n              <i class=\"fa-solid fa-calendar me-2\"></i>\r\n              {{ t('settings.overtime.effectivePeriod') }}\r\n            </h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"mb-3\">\r\n              <label for=\"effectiveFromDate\" class=\"form-label\">\r\n                {{ t('settings.overtime.effectiveFrom') }} <span class=\"text-danger\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                [class]=\"getFieldClasses('effectiveFromDate')\"\r\n                id=\"effectiveFromDate\"\r\n                [(ngModel)]=\"configForm.effectiveFromDate\"\r\n                name=\"effectiveFromDate\"\r\n                required>\r\n              @if (hasError('effectiveFromDate')) {\r\n                <div class=\"invalid-feedback d-block\">{{ getError('effectiveFromDate') }}</div>\r\n              }\r\n              <div class=\"form-text\">{{ t('settings.overtime.effectiveFromDescription') }}</div>\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"effectiveToDate\" class=\"form-label\">\r\n                {{ t('settings.overtime.effectiveTo') }}\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                [class]=\"getFieldClasses('effectiveToDate')\"\r\n                id=\"effectiveToDate\"\r\n                [(ngModel)]=\"configForm.effectiveToDate\"\r\n                name=\"effectiveToDate\">\r\n              @if (hasError('effectiveToDate')) {\r\n                <div class=\"invalid-feedback d-block\">{{ getError('effectiveToDate') }}</div>\r\n              }\r\n              <div class=\"form-text\">{{ t('settings.overtime.effectiveToDescription') }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Additional Settings Section -->\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">\r\n              <i class=\"fa-solid fa-cogs me-2\"></i>\r\n              {{ t('settings.overtime.additionalSettings') }}\r\n            </h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"form-check mb-3\">\r\n              <input\r\n                class=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"requireApproval\"\r\n                [(ngModel)]=\"configForm.requireApproval\"\r\n                name=\"requireApproval\">\r\n              <label class=\"form-check-label\" for=\"requireApproval\">\r\n                {{ t('settings.overtime.requireApproval') }}\r\n                <br>\r\n                <small class=\"text-muted\">{{ t('settings.overtime.requireApprovalDescription') }}</small>\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Submit Section -->\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <div class=\"d-grid gap-2\">\r\n              <button\r\n                type=\"submit\"\r\n                class=\"btn btn-primary\"\r\n                [disabled]=\"submitting()\">\r\n                @if (submitting()) {\r\n                  <i class=\"fa-solid fa-spinner fa-spin me-2\"></i>\r\n                } @else {\r\n                  <i class=\"fa-solid fa-save me-2\"></i>\r\n                }\r\n                {{ submitting() ? t('common.saving') : t('settings.overtime.createPolicy') }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>"],
  "mappings": "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",
  "names": []
}
