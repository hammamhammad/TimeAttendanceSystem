{
  "version": 3,
  "sources": ["src/app/pages/users/users.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { \n  UserDto, \n  CreateUserRequest, \n  UpdateUserRequest, \n  AssignRoleRequest, \n  AssignBranchRequest,\n  PagedResult \n} from '../../shared/models/user.model';\n\nexport interface UsersFilter {\n  page?: number;\n  pageSize?: number;\n  search?: string;\n  branchId?: number;\n  roleId?: number;\n  isActive?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  private readonly baseUrl = `${environment.apiUrl}/api/v1/users`;\n\n  constructor(private http: HttpClient) {}\n\n  getUsers(filter: UsersFilter = {}): Observable<PagedResult<UserDto>> {\n    let params = new HttpParams();\n    \n    if (filter.page) params = params.set('page', filter.page.toString());\n    if (filter.pageSize) params = params.set('pageSize', filter.pageSize.toString());\n    if (filter.search) params = params.set('search', filter.search);\n    if (filter.branchId) params = params.set('branchId', filter.branchId.toString());\n    if (filter.roleId) params = params.set('roleId', filter.roleId.toString());\n    if (filter.isActive !== undefined) params = params.set('isActive', filter.isActive.toString());\n\n    return this.http.get<PagedResult<UserDto>>(this.baseUrl, { params });\n  }\n\n  getUserById(id: number): Observable<UserDto> {\n    return this.http.get<UserDto>(`${this.baseUrl}/${id}`);\n  }\n\n  createUser(request: CreateUserRequest): Observable<{ id: number }> {\n    return this.http.post<{ id: number }>(this.baseUrl, request);\n  }\n\n  updateUser(id: number, request: UpdateUserRequest): Observable<void> {\n    return this.http.put<void>(`${this.baseUrl}/${id}`, request);\n  }\n\n  deleteUser(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\n  }\n\n  assignRole(userId: number, request: AssignRoleRequest): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/${userId}/roles`, request);\n  }\n\n  removeRole(userId: number, roleId: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${userId}/roles/${roleId}`);\n  }\n\n  assignBranch(userId: number, request: AssignBranchRequest): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/${userId}/branches`, request);\n  }\n\n  getRoles(): Observable<any[]> {\n    return this.http.get<any[]>(`${environment.apiUrl}/api/v1/roles`).pipe(\n      map((response: any) => {\n        console.log('Roles API response:', response);\n        // Handle different response structures\n        if (Array.isArray(response)) {\n          return response;\n        }\n        // If it's wrapped in a Result object, extract the value\n        if (response && response.value && Array.isArray(response.value)) {\n          return response.value;\n        }\n        // If it has an items property (paginated), use that\n        if (response && response.items && Array.isArray(response.items)) {\n          return response.items;\n        }\n        console.warn('Unexpected roles response format:', response);\n        return [];\n      })\n    );\n  }\n\n  getBranches(): Observable<any[]> {\n    // Get all branches with a large page size and only active branches\n    const params = new HttpParams()\n      .set('pageSize', '1000')\n      .set('isActive', 'true');\n      \n    return this.http.get<PagedResult<any>>(`${environment.apiUrl}/api/v1/branches`, { params })\n      .pipe(\n        map((result: PagedResult<any>) => result.items || [])\n      );\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAyBM,IAAO,gBAAP,MAAO,cAAY;EAGH;EAFH,UAAU,GAAG,YAAY,MAAM;EAEhD,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAmB;EAEvC,SAAS,SAAsB,CAAA,GAAE;AAC/B,QAAI,SAAS,IAAI,WAAU;AAE3B,QAAI,OAAO;AAAM,eAAS,OAAO,IAAI,QAAQ,OAAO,KAAK,SAAQ,CAAE;AACnE,QAAI,OAAO;AAAU,eAAS,OAAO,IAAI,YAAY,OAAO,SAAS,SAAQ,CAAE;AAC/E,QAAI,OAAO;AAAQ,eAAS,OAAO,IAAI,UAAU,OAAO,MAAM;AAC9D,QAAI,OAAO;AAAU,eAAS,OAAO,IAAI,YAAY,OAAO,SAAS,SAAQ,CAAE;AAC/E,QAAI,OAAO;AAAQ,eAAS,OAAO,IAAI,UAAU,OAAO,OAAO,SAAQ,CAAE;AACzE,QAAI,OAAO,aAAa;AAAW,eAAS,OAAO,IAAI,YAAY,OAAO,SAAS,SAAQ,CAAE;AAE7F,WAAO,KAAK,KAAK,IAA0B,KAAK,SAAS,EAAE,OAAM,CAAE;EACrE;EAEA,YAAY,IAAU;AACpB,WAAO,KAAK,KAAK,IAAa,GAAG,KAAK,OAAO,IAAI,EAAE,EAAE;EACvD;EAEA,WAAW,SAA0B;AACnC,WAAO,KAAK,KAAK,KAAqB,KAAK,SAAS,OAAO;EAC7D;EAEA,WAAW,IAAY,SAA0B;AAC/C,WAAO,KAAK,KAAK,IAAU,GAAG,KAAK,OAAO,IAAI,EAAE,IAAI,OAAO;EAC7D;EAEA,WAAW,IAAU;AACnB,WAAO,KAAK,KAAK,OAAa,GAAG,KAAK,OAAO,IAAI,EAAE,EAAE;EACvD;EAEA,WAAW,QAAgB,SAA0B;AACnD,WAAO,KAAK,KAAK,KAAW,GAAG,KAAK,OAAO,IAAI,MAAM,UAAU,OAAO;EACxE;EAEA,WAAW,QAAgB,QAAc;AACvC,WAAO,KAAK,KAAK,OAAa,GAAG,KAAK,OAAO,IAAI,MAAM,UAAU,MAAM,EAAE;EAC3E;EAEA,aAAa,QAAgB,SAA4B;AACvD,WAAO,KAAK,KAAK,KAAW,GAAG,KAAK,OAAO,IAAI,MAAM,aAAa,OAAO;EAC3E;EAEA,WAAQ;AACN,WAAO,KAAK,KAAK,IAAW,GAAG,YAAY,MAAM,eAAe,EAAE,KAChE,IAAI,CAAC,aAAiB;AACpB,cAAQ,IAAI,uBAAuB,QAAQ;AAE3C,UAAI,MAAM,QAAQ,QAAQ,GAAG;AAC3B,eAAO;MACT;AAEA,UAAI,YAAY,SAAS,SAAS,MAAM,QAAQ,SAAS,KAAK,GAAG;AAC/D,eAAO,SAAS;MAClB;AAEA,UAAI,YAAY,SAAS,SAAS,MAAM,QAAQ,SAAS,KAAK,GAAG;AAC/D,eAAO,SAAS;MAClB;AACA,cAAQ,KAAK,qCAAqC,QAAQ;AAC1D,aAAO,CAAA;IACT,CAAC,CAAC;EAEN;EAEA,cAAW;AAET,UAAM,SAAS,IAAI,WAAU,EAC1B,IAAI,YAAY,MAAM,EACtB,IAAI,YAAY,MAAM;AAEzB,WAAO,KAAK,KAAK,IAAsB,GAAG,YAAY,MAAM,oBAAoB,EAAE,OAAM,CAAE,EACvF,KACC,IAAI,CAAC,WAA6B,OAAO,SAAS,CAAA,CAAE,CAAC;EAE3D;;AA9EuB;cAAZ;mCAAA,eAAY,mBAAA,UAAA,CAAA;AAAA;cAAZ,mFAAA,eAAY,SAAZ,cAAY,WAAA,YAFX,OAAM,CAAA;AAEd,IAAO,eAAP;;sEAAO,cAAY,CAAA;UAHxB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
