{
  "version": 3,
  "sources": ["src/app/shared/models/public-holiday.model.ts", "src/app/pages/settings/public-holidays/public-holidays.service.ts"],
  "sourcesContent": ["export interface PublicHoliday {\r\n  id: number;\r\n  name: string;\r\n  nameAr?: string;\r\n  holidayType: HolidayType;\r\n  isActive: boolean;\r\n  isNational: boolean;\r\n  branchId?: number;\r\n  branchName?: string;\r\n  description?: string;\r\n  effectiveFromYear?: number;\r\n  effectiveToYear?: number;\r\n  countryCode?: string;\r\n  priority: number;\r\n  patternDescription: string;\r\n  nextOccurrence?: string;\r\n  hasConflicts: boolean;\r\n  createdAt: string;\r\n  updatedAt?: string;\r\n}\r\n\r\nexport interface CreatePublicHolidayRequest {\r\n  name: string;\r\n  nameAr?: string;\r\n  specificDate?: string;\r\n  month?: number;\r\n  day?: number;\r\n  holidayType: HolidayType;\r\n  isActive?: boolean;\r\n  isNational?: boolean;\r\n  branchId?: number;\r\n  description?: string;\r\n  effectiveFromYear?: number;\r\n  effectiveToYear?: number;\r\n  countryCode?: string;\r\n  priority?: number;\r\n  weekOfMonth?: number;\r\n  dayOfWeek?: number;\r\n  pattern?: string;\r\n  patternData?: any;\r\n}\r\n\r\nexport interface UpdatePublicHolidayRequest {\r\n  name: string;\r\n  nameAr?: string;\r\n  specificDate?: string;\r\n  month?: number;\r\n  day?: number;\r\n  holidayType: HolidayType;\r\n  isActive?: boolean;\r\n  isNational?: boolean;\r\n  branchId?: number;\r\n  description?: string;\r\n  effectiveFromYear?: number;\r\n  effectiveToYear?: number;\r\n  countryCode?: string;\r\n  priority?: number;\r\n  weekOfMonth?: number;\r\n  dayOfWeek?: number;\r\n  pattern?: string;\r\n  patternData?: any;\r\n}\r\n\r\nexport interface HolidayCalendarDay {\r\n  date: string;\r\n  holidays: PublicHoliday[];\r\n  isHoliday: boolean;\r\n  primaryHoliday?: PublicHoliday;\r\n  hasConflicts: boolean;\r\n  isWeekend: boolean;\r\n  metadata?: { [key: string]: any };\r\n}\r\n\r\nexport interface HolidayCalendarResponse {\r\n  year: number;\r\n  branchId?: number;\r\n  branchName?: string;\r\n  calendarDays: HolidayCalendarDay[];\r\n  totalHolidayDays: number;\r\n  totalHolidays: number;\r\n  monthlyHolidayCounts: { [month: number]: number };\r\n  calendarMetadata?: { [key: string]: any };\r\n}\r\n\r\nexport interface PublicHolidaysResponse {\r\n  holidays: PublicHoliday[];\r\n  totalCount: number;\r\n  page: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n  hasNextPage: boolean;\r\n  hasPreviousPage: boolean;\r\n}\r\n\r\nexport interface HolidayImportRequest {\r\n  template: HolidayTemplate;\r\n  year: number;\r\n  branchId?: number;\r\n  countryCode: string;\r\n  overwriteExisting?: boolean;\r\n}\r\n\r\nexport enum HolidayType {\r\n  OneTime = 0,\r\n  Annual = 1,\r\n  Monthly = 2,\r\n  Floating = 3\r\n}\r\n\r\nexport enum HolidayTemplate {\r\n  USA_Federal = 'USA_Federal',\r\n  UK_BankHolidays = 'UK_BankHolidays',\r\n  SaudiArabia_National = 'SaudiArabia_National'\r\n}\r\n\r\nexport interface HolidayDateResponse {\r\n  date: string;\r\n  holidays: PublicHoliday[];\r\n}", "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment';\r\nimport {\r\n  PublicHoliday,\r\n  CreatePublicHolidayRequest,\r\n  UpdatePublicHolidayRequest,\r\n  PublicHolidaysResponse,\r\n  HolidayCalendarResponse,\r\n  HolidayDateResponse,\r\n  HolidayImportRequest,\r\n  HolidayType,\r\n  HolidayTemplate\r\n} from '../../../shared/models/public-holiday.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PublicHolidaysService {\r\n  private http = inject(HttpClient);\r\n  private baseUrl = `${environment.apiUrl}/api/v1/public-holidays`;\r\n\r\n  /**\r\n   * Get paginated list of public holidays with filtering options\r\n   */\r\n  getPublicHolidays(\r\n    page: number = 1,\r\n    pageSize: number = 10,\r\n    searchTerm?: string,\r\n    year?: number,\r\n    branchId?: number,\r\n    holidayType?: HolidayType,\r\n    isActive?: boolean,\r\n    isNational?: boolean,\r\n    countryCode?: string\r\n  ): Observable<PublicHolidaysResponse> {\r\n    let params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('pageSize', pageSize.toString());\r\n\r\n    if (searchTerm) {\r\n      params = params.set('searchTerm', searchTerm);\r\n    }\r\n    if (year !== undefined) {\r\n      params = params.set('year', year.toString());\r\n    }\r\n    if (branchId !== undefined) {\r\n      params = params.set('branchId', branchId.toString());\r\n    }\r\n    if (holidayType !== undefined) {\r\n      params = params.set('holidayType', holidayType.toString());\r\n    }\r\n    if (isActive !== undefined) {\r\n      params = params.set('isActive', isActive.toString());\r\n    }\r\n    if (isNational !== undefined) {\r\n      params = params.set('isNational', isNational.toString());\r\n    }\r\n    if (countryCode) {\r\n      params = params.set('countryCode', countryCode);\r\n    }\r\n\r\n    return this.http.get<PublicHolidaysResponse>(this.baseUrl, { params });\r\n  }\r\n\r\n  /**\r\n   * Get a specific public holiday by ID\r\n   */\r\n  getPublicHolidayById(id: number, includeConflicts: boolean = false, year?: number): Observable<PublicHoliday> {\r\n    let params = new HttpParams();\r\n    if (includeConflicts) {\r\n      params = params.set('includeConflicts', 'true');\r\n    }\r\n    if (year !== undefined) {\r\n      params = params.set('year', year.toString());\r\n    }\r\n\r\n    return this.http.get<PublicHoliday>(`${this.baseUrl}/${id}`, { params });\r\n  }\r\n\r\n  /**\r\n   * Create a new public holiday\r\n   */\r\n  createPublicHoliday(request: CreatePublicHolidayRequest): Observable<PublicHoliday> {\r\n    // Debug logging\r\n    console.log('Creating public holiday with request:', request);\r\n    console.log('Request URL:', this.baseUrl);\r\n    console.log('Request payload (stringified):', JSON.stringify(request));\r\n\r\n    return this.http.post<PublicHoliday>(this.baseUrl, request);\r\n  }\r\n\r\n  /**\r\n   * Update an existing public holiday\r\n   */\r\n  updatePublicHoliday(id: number, request: UpdatePublicHolidayRequest): Observable<PublicHoliday> {\r\n    return this.http.put<PublicHoliday>(`${this.baseUrl}/${id}`, request);\r\n  }\r\n\r\n  /**\r\n   * Delete a public holiday\r\n   */\r\n  deletePublicHoliday(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  /**\r\n   * Get holiday calendar for a specific year\r\n   */\r\n  getHolidayCalendar(\r\n    year: number,\r\n    branchId?: number,\r\n    includeInactive: boolean = false,\r\n    format?: string\r\n  ): Observable<HolidayCalendarResponse> {\r\n    let params = new HttpParams();\r\n    if (branchId !== undefined) {\r\n      params = params.set('branchId', branchId.toString());\r\n    }\r\n    if (includeInactive) {\r\n      params = params.set('includeInactive', 'true');\r\n    }\r\n    if (format) {\r\n      params = params.set('format', format);\r\n    }\r\n\r\n    return this.http.get<HolidayCalendarResponse>(`${this.baseUrl}/calendar/${year}`, { params });\r\n  }\r\n\r\n  /**\r\n   * Get holidays for a specific month\r\n   */\r\n  getHolidayDates(year: number, month: number, branchId?: number): Observable<HolidayDateResponse[]> {\r\n    let params = new HttpParams();\r\n    if (branchId !== undefined) {\r\n      params = params.set('branchId', branchId.toString());\r\n    }\r\n\r\n    return this.http.get<HolidayDateResponse[]>(`${this.baseUrl}/dates/${year}/${month}`, { params });\r\n  }\r\n\r\n  /**\r\n   * Import holiday template\r\n   */\r\n  importHolidayTemplate(request: HolidayImportRequest): Observable<PublicHoliday[]> {\r\n    return this.http.post<PublicHoliday[]>(`${this.baseUrl}/import`, request);\r\n  }\r\n\r\n  /**\r\n   * Export holidays for a specific year\r\n   */\r\n  exportHolidays(\r\n    year: number,\r\n    format: 'json' | 'csv' | 'ical' = 'json',\r\n    branchId?: number,\r\n    includeInactive: boolean = false\r\n  ): Observable<Blob> {\r\n    let params = new HttpParams()\r\n      .set('format', format);\r\n\r\n    if (branchId !== undefined) {\r\n      params = params.set('branchId', branchId.toString());\r\n    }\r\n    if (includeInactive) {\r\n      params = params.set('includeInactive', 'true');\r\n    }\r\n\r\n    return this.http.get(`${this.baseUrl}/export/${year}`, {\r\n      params,\r\n      responseType: 'blob'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if a specific date is a holiday\r\n   */\r\n  isHoliday(date: string, branchId?: number): Observable<boolean> {\r\n    let params = new HttpParams().set('date', date);\r\n    if (branchId !== undefined) {\r\n      params = params.set('branchId', branchId.toString());\r\n    }\r\n\r\n    return this.http.get<boolean>(`${this.baseUrl}/is-holiday`, { params });\r\n  }\r\n\r\n  /**\r\n   * Get available holiday templates\r\n   */\r\n  getAvailableTemplates(): HolidayTemplate[] {\r\n    return [\r\n      HolidayTemplate.USA_Federal,\r\n      HolidayTemplate.UK_BankHolidays,\r\n      HolidayTemplate.SaudiArabia_National\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get holiday type options for UI\r\n   */\r\n  getHolidayTypes(): { value: HolidayType; label: string; description: string }[] {\r\n    return [\r\n      {\r\n        value: HolidayType.OneTime,\r\n        label: 'One Time',\r\n        description: 'Holiday occurs only once on a specific date'\r\n      },\r\n      {\r\n        value: HolidayType.Annual,\r\n        label: 'Annual',\r\n        description: 'Holiday occurs every year on the same date'\r\n      },\r\n      {\r\n        value: HolidayType.Monthly,\r\n        label: 'Monthly',\r\n        description: 'Holiday occurs every month on the same day'\r\n      },\r\n      {\r\n        value: HolidayType.Floating,\r\n        label: 'Floating',\r\n        description: 'Holiday occurs on a relative date (e.g., first Monday of March)'\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get branches for dropdown selection\r\n   */\r\n  getBranches(): Observable<Array<{id: number, name: string}>> {\r\n    return this.http.get<any>(`${environment.apiUrl}/api/v1/branches/all`).pipe(\r\n      map(response => response.value as Array<{id: number, name: string}>),\r\n      catchError(error => {\r\n        console.error('Failed to load branches:', error);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate holiday data before submission\r\n   */\r\n  validateHolidayData(request: CreatePublicHolidayRequest | UpdatePublicHolidayRequest): string[] {\r\n    const errors: string[] = [];\r\n\r\n    if (!request.name || request.name.trim().length === 0) {\r\n      errors.push('Holiday name is required');\r\n    }\r\n\r\n    if (request.holidayType === HolidayType.OneTime || request.holidayType === HolidayType.Annual) {\r\n      if (!request.specificDate && (!request.month || !request.day)) {\r\n        errors.push('Specific date or month/day is required for this holiday type');\r\n      }\r\n    }\r\n\r\n    if (request.holidayType === HolidayType.Floating) {\r\n      if (!request.weekOfMonth || !request.dayOfWeek || !request.month) {\r\n        errors.push('Week of month, day of week, and month are required for floating holidays');\r\n      }\r\n    }\r\n\r\n    if (request.effectiveFromYear && request.effectiveToYear) {\r\n      if (request.effectiveFromYear > request.effectiveToYear) {\r\n        errors.push('Effective from year cannot be after effective to year');\r\n      }\r\n    }\r\n\r\n    if (request.priority !== undefined && (request.priority < 1 || request.priority > 100)) {\r\n      errors.push('Priority must be between 1 and 100');\r\n    }\r\n\r\n    return errors;\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["HolidayType", "HolidayTemplate"]
}
