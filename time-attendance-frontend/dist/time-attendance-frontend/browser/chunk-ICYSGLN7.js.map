{
  "version": 3,
  "sources": ["src/app/pages/employee-vacations/employee-vacations.service.ts"],
  "sourcesContent": ["import { Injectable, signal } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, map, tap, catchError, throwError } from 'rxjs';\r\nimport {\r\n  EmployeeVacation,\r\n  CreateEmployeeVacationRequest,\r\n  UpdateEmployeeVacationRequest,\r\n  VacationCalendarItem,\r\n  VacationQueryParams,\r\n  VacationFilters,\r\n  VacationConflict\r\n} from '../../shared/models/employee-vacation.model';\r\nimport { BulkVacationRequest, BulkVacationResult } from './bulk-vacation-modal/bulk-vacation-modal.component';\r\nimport { PagedResult } from '../../shared/models/vacation-type.model';\r\nimport { NotificationService } from '../../core/notifications/notification.service';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n/**\r\n * Service for managing employee vacation operations.\r\n * Provides comprehensive vacation management with state management using Angular signals.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeVacationsService {\r\n  private readonly apiUrl = `${environment.apiUrl}/api/v1/employee-vacations`;\r\n\r\n  // Signal-based state management\r\n  private readonly _vacations = signal<EmployeeVacation[]>([]);\r\n  private readonly _loading = signal<boolean>(false);\r\n  private readonly _error = signal<string | null>(null);\r\n  private readonly _pagedResult = signal<PagedResult<EmployeeVacation> | null>(null);\r\n\r\n  // Read-only signals for external consumption\r\n  readonly vacations = this._vacations.asReadonly();\r\n  readonly loading = this._loading.asReadonly();\r\n  readonly error = this._error.asReadonly();\r\n  readonly pagedResult = this._pagedResult.asReadonly();\r\n\r\n  // Computed signals for derived state\r\n  readonly totalPages = signal(() => {\r\n    const result = this._pagedResult();\r\n    if (!result || result.pageSize === 0) return 1;\r\n    return Math.ceil(result.totalCount / result.pageSize);\r\n  });\r\n  readonly hasNextPage = signal(() => {\r\n    const result = this._pagedResult();\r\n    return result ? result.page < this.totalPages()() : false;\r\n  });\r\n  readonly hasPreviousPage = signal(() => {\r\n    const result = this._pagedResult();\r\n    return result ? result.page > 1 : false;\r\n  });\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private notificationService: NotificationService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves employee vacation records with filtering and pagination.\r\n   */\r\n  getVacations(params?: VacationQueryParams): Observable<PagedResult<EmployeeVacation>> {\r\n    this._loading.set(true);\r\n    this._error.set(null);\r\n\r\n    let httpParams = new HttpParams();\r\n\r\n    if (params) {\r\n      if (params.employeeId) httpParams = httpParams.set('employeeId', params.employeeId.toString());\r\n      if (params.vacationTypeId) httpParams = httpParams.set('vacationTypeId', params.vacationTypeId.toString());\r\n      if (params.startDate) httpParams = httpParams.set('startDate', params.startDate.toISOString());\r\n      if (params.endDate) httpParams = httpParams.set('endDate', params.endDate.toISOString());\r\n      if (params.isApproved !== undefined) httpParams = httpParams.set('isApproved', params.isApproved.toString());\r\n      if (params.isCurrentlyActive !== undefined) httpParams = httpParams.set('isCurrentlyActive', params.isCurrentlyActive.toString());\r\n      if (params.isUpcoming !== undefined) httpParams = httpParams.set('isUpcoming', params.isUpcoming.toString());\r\n      if (params.searchTerm) httpParams = httpParams.set('searchTerm', params.searchTerm);\r\n      if (params.page) httpParams = httpParams.set('page', params.page.toString());\r\n      if (params.pageSize) httpParams = httpParams.set('pageSize', params.pageSize.toString());\r\n      if (params.sortBy) httpParams = httpParams.set('sortBy', params.sortBy);\r\n      if (params.sortDescending) httpParams = httpParams.set('sortDescending', params.sortDescending.toString());\r\n    }\r\n\r\n    return this.http.get<PagedResult<EmployeeVacation>>(this.apiUrl, { params: httpParams }).pipe(\r\n      map(result => ({\r\n        ...result,\r\n        items: result.items.map((item: EmployeeVacation) => this.transformDates(item))\r\n      })),\r\n      tap(result => {\r\n        this._vacations.set(result.items);\r\n        this._pagedResult.set(result);\r\n        this._loading.set(false);\r\n      }),\r\n      catchError(error => {\r\n        this._error.set(error.error?.message || 'Failed to load vacations');\r\n        this._loading.set(false);\r\n        this.notificationService.error('Failed to load employee vacations');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves a specific employee vacation by ID.\r\n   */\r\n  getVacationById(id: number): Observable<EmployeeVacation> {\r\n    return this.http.get<EmployeeVacation>(`${this.apiUrl}/${id}`).pipe(\r\n      map(vacation => this.transformDates(vacation)),\r\n      catchError(error => {\r\n        this.notificationService.error('Failed to load vacation details');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates a new employee vacation record.\r\n   */\r\n  createVacation(request: CreateEmployeeVacationRequest): Observable<number> {\r\n    this._loading.set(true);\r\n\r\n    return this.http.post<number>(this.apiUrl, request).pipe(\r\n      tap(vacationId => {\r\n        this._loading.set(false);\r\n        this.notificationService.success('Vacation created successfully');\r\n        // Refresh the vacation list\r\n        this.refreshVacations();\r\n      }),\r\n      catchError(error => {\r\n        this._loading.set(false);\r\n        const errorMessage = error.error?.message || 'Failed to create vacation';\r\n        this._error.set(errorMessage);\r\n        this.notificationService.error(errorMessage);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates an existing employee vacation record.\r\n   */\r\n  updateVacation(id: number, request: UpdateEmployeeVacationRequest): Observable<void> {\r\n    this._loading.set(true);\r\n\r\n    return this.http.put<void>(`${this.apiUrl}/${id}`, request).pipe(\r\n      tap(() => {\r\n        this._loading.set(false);\r\n        this.notificationService.success('Vacation updated successfully');\r\n        // Refresh the vacation list\r\n        this.refreshVacations();\r\n      }),\r\n      catchError(error => {\r\n        this._loading.set(false);\r\n        const errorMessage = error.error?.message || 'Failed to update vacation';\r\n        this._error.set(errorMessage);\r\n        this.notificationService.error(errorMessage);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deletes an employee vacation record.\r\n   */\r\n  deleteVacation(id: number): Observable<void> {\r\n    this._loading.set(true);\r\n\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(\r\n      tap(() => {\r\n        this._loading.set(false);\r\n        this.notificationService.success('Vacation deleted successfully');\r\n        // Remove from local state\r\n        const currentVacations = this._vacations();\r\n        this._vacations.set(currentVacations.filter(v => v.id !== id));\r\n        // Update paged result if available\r\n        const currentResult = this._pagedResult();\r\n        if (currentResult) {\r\n          this._pagedResult.set({\r\n            ...currentResult,\r\n            totalCount: currentResult.totalCount - 1\r\n          });\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        this._loading.set(false);\r\n        const errorMessage = error.error?.message || 'Failed to delete vacation';\r\n        this._error.set(errorMessage);\r\n        this.notificationService.error(errorMessage);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Toggles the approval status of a vacation record.\r\n   */\r\n  toggleVacationStatus(id: number): Observable<void> {\r\n    return this.http.patch<void>(`${this.apiUrl}/${id}/toggle-status`, {}).pipe(\r\n      tap(() => {\r\n        this.notificationService.success('Vacation status updated successfully');\r\n        // Update local state\r\n        const currentVacations = this._vacations();\r\n        const updatedVacations = currentVacations.map(v =>\r\n          v.id === id ? { ...v, isApproved: !v.isApproved } : v\r\n        );\r\n        this._vacations.set(updatedVacations);\r\n      }),\r\n      catchError(error => {\r\n        const errorMessage = error.error?.message || 'Failed to update vacation status';\r\n        this.notificationService.error(errorMessage);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves vacation calendar data for display.\r\n   */\r\n  getVacationCalendar(startDate: Date, endDate: Date, employeeIds?: number[]): Observable<VacationCalendarItem[]> {\r\n    let params = new HttpParams()\r\n      .set('startDate', startDate.toISOString())\r\n      .set('endDate', endDate.toISOString());\r\n\r\n    if (employeeIds && employeeIds.length > 0) {\r\n      employeeIds.forEach(id => {\r\n        params = params.append('employeeIds', id.toString());\r\n      });\r\n    }\r\n\r\n    return this.http.get<VacationCalendarItem[]>(`${this.apiUrl}/calendar`, { params }).pipe(\r\n      map(items => items.map(item => ({\r\n        ...item,\r\n        startDate: new Date(item.startDate),\r\n        endDate: new Date(item.endDate)\r\n      }))),\r\n      catchError(error => {\r\n        this.notificationService.error('Failed to load vacation calendar');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks for vacation conflicts for a given employee and date range.\r\n   */\r\n  checkVacationConflicts(employeeId: number, startDate: Date, endDate: Date, excludeId?: number): Observable<VacationConflict> {\r\n    // This would typically be a separate API endpoint\r\n    // For now, we'll simulate it by checking existing vacations\r\n    return this.getVacations({ employeeId }).pipe(\r\n      map(result => {\r\n        const conflictingVacations = result.items.filter((vacation: EmployeeVacation) => {\r\n          // Exclude the vacation being edited\r\n          if (excludeId && vacation.id === excludeId) {\r\n            return false;\r\n          }\r\n\r\n          // Check for date overlap\r\n          return vacation.startDate <= endDate && vacation.endDate >= startDate;\r\n        });\r\n\r\n        return {\r\n          hasConflict: conflictingVacations.length > 0,\r\n          conflictingVacations,\r\n          message: conflictingVacations.length > 0\r\n            ? `Found ${conflictingVacations.length} overlapping vacation(s)`\r\n            : 'No conflicts found'\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Refreshes the current vacation list without changing filters.\r\n   */\r\n  refreshVacations(): void {\r\n    // Re-fetch with current parameters\r\n    const currentResult = this._pagedResult();\r\n    if (currentResult) {\r\n      this.getVacations({\r\n        page: currentResult.page,\r\n        pageSize: currentResult.pageSize\r\n      }).subscribe();\r\n    } else {\r\n      this.getVacations().subscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears all vacation data and resets state.\r\n   */\r\n  clearVacations(): void {\r\n    this._vacations.set([]);\r\n    this._pagedResult.set(null);\r\n    this._error.set(null);\r\n  }\r\n\r\n  /**\r\n   * Transforms date strings to Date objects in vacation data.\r\n   */\r\n  private transformDates(vacation: EmployeeVacation): EmployeeVacation {\r\n    return {\r\n      ...vacation,\r\n      startDate: new Date(vacation.startDate),\r\n      endDate: new Date(vacation.endDate),\r\n      createdAtUtc: new Date(vacation.createdAtUtc),\r\n      modifiedAtUtc: vacation.modifiedAtUtc ? new Date(vacation.modifiedAtUtc) : undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Applies filters to the vacation list.\r\n   */\r\n  applyFilters(filters: VacationFilters): void {\r\n    const currentResult = this._pagedResult();\r\n    this.getVacations({\r\n      ...filters,\r\n      page: 1, // Reset to first page when applying filters\r\n      pageSize: currentResult?.pageSize || 20\r\n    }).subscribe();\r\n  }\r\n\r\n  /**\r\n   * Changes the page size and refreshes data.\r\n   */\r\n  changePageSize(newPageSize: number): void {\r\n    this.getVacations({\r\n      page: 1, // Reset to first page when changing page size\r\n      pageSize: newPageSize\r\n    }).subscribe();\r\n  }\r\n\r\n  /**\r\n   * Navigates to a specific page.\r\n   */\r\n  goToPage(page: number): void {\r\n    if (page >= 1 && page <= this.totalPages()()) {\r\n      const currentResult = this._pagedResult();\r\n      this.getVacations({\r\n        page,\r\n        pageSize: currentResult?.pageSize || 20\r\n      }).subscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets vacation summary statistics for dashboard/reporting.\r\n   */\r\n  getVacationStatistics(filters?: VacationFilters): Observable<any> {\r\n    // This would typically be a separate API endpoint\r\n    // For demonstration, we'll derive from current data\r\n    return this.getVacations({ ...filters, pageSize: 1000 }).pipe(\r\n      map(result => {\r\n        const vacations = result.items;\r\n        const totalVacations = vacations.length;\r\n        const approvedVacations = vacations.filter((v: EmployeeVacation) => v.isApproved).length;\r\n        const activeVacations = vacations.filter((v: EmployeeVacation) => v.isCurrentlyActive).length;\r\n        const upcomingVacations = vacations.filter((v: EmployeeVacation) => v.isUpcoming).length;\r\n        const totalDays = vacations.reduce((sum: number, v: EmployeeVacation) => sum + v.totalDays, 0);\r\n\r\n        return {\r\n          totalVacations,\r\n          approvedVacations,\r\n          pendingVacations: totalVacations - approvedVacations,\r\n          activeVacations,\r\n          upcomingVacations,\r\n          totalDays,\r\n          averageDaysPerVacation: totalVacations > 0 ? Math.round(totalDays / totalVacations * 10) / 10 : 0\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets available employees for filtering\r\n   */\r\n  getEmployees(): Observable<Array<{id: number, name: string}>> {\r\n    return this.http.get<Array<{id: number, name: string}>>(`${environment.apiUrl}/api/v1/employees/dropdown`).pipe(\r\n      catchError(error => {\r\n        this.notificationService.error('Failed to load employees');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets available vacation types for filtering\r\n   */\r\n  getVacationTypes(): Observable<Array<{id: number, name: string}>> {\r\n    return this.http.get<Array<{id: number, name: string}>>(`${environment.apiUrl}/api/v1/vacation-types/dropdown`).pipe(\r\n      catchError(error => {\r\n        this.notificationService.error('Failed to load vacation types');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets available branches for bulk assignment\r\n   */\r\n  getBranches(): Observable<Array<{id: number, name: string}>> {\r\n    return this.http.get<Array<{id: number, name: string}>>(`${environment.apiUrl}/api/v1/branches/dropdown`).pipe(\r\n      catchError(error => {\r\n        this.notificationService.error('Failed to load branches');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets available departments for bulk assignment\r\n   */\r\n  getDepartments(): Observable<Array<{id: number, name: string}>> {\r\n    return this.http.get<Array<{id: number, name: string}>>(`${environment.apiUrl}/api/v1/departments/dropdown`).pipe(\r\n      catchError(error => {\r\n        this.notificationService.error('Failed to load departments');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets employee count preview for bulk assignment\r\n   */\r\n  getEmployeeCountPreview(request: { assignmentType: number; branchId?: number; departmentId?: number }): Observable<number> {\r\n    let params = new HttpParams().set('assignmentType', request.assignmentType.toString());\r\n\r\n    if (request.branchId) {\r\n      params = params.set('branchId', request.branchId.toString());\r\n    }\r\n\r\n    if (request.departmentId) {\r\n      params = params.set('departmentId', request.departmentId.toString());\r\n    }\r\n\r\n    return this.http.get<{ count: number }>(`${environment.apiUrl}/api/v1/employees/count-preview`, { params }).pipe(\r\n      map(response => response.count),\r\n      catchError(error => {\r\n        this.notificationService.error('Failed to load employee count preview');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates bulk vacation assignments\r\n   */\r\n  createBulkVacations(request: BulkVacationRequest): Observable<BulkVacationResult> {\r\n    this._loading.set(true);\r\n\r\n    return this.http.post<{ value: BulkVacationResult }>(`${this.apiUrl}/bulk`, request).pipe(\r\n      map(response => response.value),\r\n      tap(() => {\r\n        this._loading.set(false);\r\n        // Refresh the vacation list to show new records\r\n        this.refreshVacations();\r\n      }),\r\n      catchError(error => {\r\n        this._loading.set(false);\r\n        const errorMessage = error.error?.message || 'Failed to create bulk vacations';\r\n        this.notificationService.error(errorMessage);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
