{
  "version": 3,
  "sources": ["src/app/core/confirmation/confirmation.service.ts"],
  "sourcesContent": ["import { Injectable, signal } from '@angular/core';\n\nexport interface ConfirmationConfig {\n  title: string;\n  message: string;\n  confirmText?: string;\n  cancelText?: string;\n  confirmButtonClass?: string;\n  cancelButtonClass?: string;\n  icon?: string;\n  iconClass?: string;\n  requireComments?: boolean;\n}\n\nexport interface ConfirmationResult {\n  confirmed: boolean;\n  comments?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfirmationService {\n  private isVisible = signal(false);\n  private config = signal<ConfirmationConfig | null>(null);\n  private comments = signal<string>('');\n  private resolvePromise: ((result: ConfirmationResult) => void) | null = null;\n\n  readonly isVisible$ = this.isVisible.asReadonly();\n  readonly config$ = this.config.asReadonly();\n  readonly comments$ = this.comments.asReadonly();\n\n  /**\n   * Show a confirmation dialog\n   */\n  confirm(config: ConfirmationConfig): Promise<ConfirmationResult> {\n    return new Promise<ConfirmationResult>((resolve) => {\n      this.resolvePromise = resolve;\n      \n      // Set default values\n      const defaultConfig: ConfirmationConfig = {\n        title: config.title,\n        message: config.message,\n        confirmText: config.confirmText || 'Confirm',\n        cancelText: config.cancelText || 'Cancel',\n        confirmButtonClass: config.confirmButtonClass || 'btn-danger',\n        cancelButtonClass: config.cancelButtonClass || 'btn-secondary',\n        icon: config.icon || 'fa-question-circle',\n        iconClass: config.iconClass || 'text-warning',\n        requireComments: config.requireComments || false\n      };\n\n      this.config.set(defaultConfig);\n      this.comments.set('');\n      this.isVisible.set(true);\n    });\n  }\n\n  /**\n   * Handle confirm action\n   */\n  onConfirm(): void {\n    if (this.resolvePromise) {\n      this.resolvePromise({\n        confirmed: true,\n        comments: this.comments() || undefined\n      });\n    }\n    this.close();\n  }\n\n  /**\n   * Handle cancel action\n   */\n  onCancel(): void {\n    if (this.resolvePromise) {\n      this.resolvePromise({ confirmed: false });\n    }\n    this.close();\n  }\n\n  /**\n   * Update comments\n   */\n  setComments(comments: string): void {\n    this.comments.set(comments);\n  }\n\n  /**\n   * Close the modal\n   */\n  private close(): void {\n    this.isVisible.set(false);\n    this.config.set(null);\n    this.comments.set('');\n    this.resolvePromise = null;\n  }\n\n  /**\n   * Quick confirmation for delete actions\n   */\n  confirmDelete(itemName: string, itemType: string = 'item'): Promise<ConfirmationResult> {\n    return this.confirm({\n      title: 'Confirm Deletion',\n      message: `Are you sure you want to delete this ${itemType}? This action cannot be undone.`,\n      confirmText: 'Delete',\n      cancelText: 'Cancel',\n      confirmButtonClass: 'btn-danger',\n      icon: 'fa-trash',\n      iconClass: 'text-danger'\n    });\n  }\n\n  /**\n   * Quick confirmation for save actions\n   */\n  confirmSave(message: string = 'Do you want to save your changes?'): Promise<ConfirmationResult> {\n    return this.confirm({\n      title: 'Save Changes',\n      message: message,\n      confirmText: 'Save',\n      cancelText: 'Cancel',\n      confirmButtonClass: 'btn-primary',\n      icon: 'fa-save',\n      iconClass: 'text-primary'\n    });\n  }\n\n  /**\n   * Quick confirmation for discard actions\n   */\n  confirmDiscard(message: string = 'You have unsaved changes. Are you sure you want to discard them?'): Promise<ConfirmationResult> {\n    return this.confirm({\n      title: 'Discard Changes',\n      message: message,\n      confirmText: 'Discard',\n      cancelText: 'Keep Editing',\n      confirmButtonClass: 'btn-warning',\n      icon: 'fa-exclamation-triangle',\n      iconClass: 'text-warning'\n    });\n  }\n}"],
  "mappings": ";;;;;;;;;;;;AAsBM,IAAO,uBAAP,MAAO,qBAAmB;EACtB,YAAY,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,YAAA,CAAA,IAAA,CAAA,CAAA;EACxB,SAAS,OAAkC,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,SAAA,CAAA,IAAA,CAAA,CAAA;EAC/C,WAAW,OAAe,IAAE,GAAA,YAAA,CAAA,EAAA,WAAA,WAAA,CAAA,IAAA,CAAA,CAAA;EAC5B,iBAAgE;EAE/D,aAAa,KAAK,UAAU,WAAU;EACtC,UAAU,KAAK,OAAO,WAAU;EAChC,YAAY,KAAK,SAAS,WAAU;;;;EAK7C,QAAQ,QAA0B;AAChC,WAAO,IAAI,QAA4B,CAAC,YAAW;AACjD,WAAK,iBAAiB;AAGtB,YAAM,gBAAoC;QACxC,OAAO,OAAO;QACd,SAAS,OAAO;QAChB,aAAa,OAAO,eAAe;QACnC,YAAY,OAAO,cAAc;QACjC,oBAAoB,OAAO,sBAAsB;QACjD,mBAAmB,OAAO,qBAAqB;QAC/C,MAAM,OAAO,QAAQ;QACrB,WAAW,OAAO,aAAa;QAC/B,iBAAiB,OAAO,mBAAmB;;AAG7C,WAAK,OAAO,IAAI,aAAa;AAC7B,WAAK,SAAS,IAAI,EAAE;AACpB,WAAK,UAAU,IAAI,IAAI;IACzB,CAAC;EACH;;;;EAKA,YAAS;AACP,QAAI,KAAK,gBAAgB;AACvB,WAAK,eAAe;QAClB,WAAW;QACX,UAAU,KAAK,SAAQ,KAAM;OAC9B;IACH;AACA,SAAK,MAAK;EACZ;;;;EAKA,WAAQ;AACN,QAAI,KAAK,gBAAgB;AACvB,WAAK,eAAe,EAAE,WAAW,MAAK,CAAE;IAC1C;AACA,SAAK,MAAK;EACZ;;;;EAKA,YAAY,UAAgB;AAC1B,SAAK,SAAS,IAAI,QAAQ;EAC5B;;;;EAKQ,QAAK;AACX,SAAK,UAAU,IAAI,KAAK;AACxB,SAAK,OAAO,IAAI,IAAI;AACpB,SAAK,SAAS,IAAI,EAAE;AACpB,SAAK,iBAAiB;EACxB;;;;EAKA,cAAc,UAAkB,WAAmB,QAAM;AACvD,WAAO,KAAK,QAAQ;MAClB,OAAO;MACP,SAAS,wCAAwC,QAAQ;MACzD,aAAa;MACb,YAAY;MACZ,oBAAoB;MACpB,MAAM;MACN,WAAW;KACZ;EACH;;;;EAKA,YAAY,UAAkB,qCAAmC;AAC/D,WAAO,KAAK,QAAQ;MAClB,OAAO;MACP;MACA,aAAa;MACb,YAAY;MACZ,oBAAoB;MACpB,MAAM;MACN,WAAW;KACZ;EACH;;;;EAKA,eAAe,UAAkB,oEAAkE;AACjG,WAAO,KAAK,QAAQ;MAClB,OAAO;MACP;MACA,aAAa;MACb,YAAY;MACZ,oBAAoB;MACpB,MAAM;MACN,WAAW;KACZ;EACH;;AAvH8B;cAAnB;mCAAA,sBAAmB;AAAA;cAAnB,0FAAA,sBAAmB,SAAnB,qBAAmB,WAAA,YAFlB,OAAM,CAAA;AAEd,IAAO,sBAAP;;sEAAO,qBAAmB,CAAA;UAH/B;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
