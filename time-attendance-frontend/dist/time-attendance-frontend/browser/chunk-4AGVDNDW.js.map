{
  "version": 3,
  "sources": ["src/app/shared/directives/has-permission.directive.ts"],
  "sourcesContent": ["import { Directive, Input, TemplateRef, ViewContainerRef, effect } from '@angular/core';\nimport { PermissionService } from '../../core/auth/permission.service';\nimport { AuthService } from '../../core/auth/auth.service';\n\n/**\n * Angular structural directive for conditional template rendering based on user permissions.\n * Provides declarative permission-based access control in templates with reactive permission updates\n * and seamless integration with role-based access control (RBAC) system for secure UI component visibility.\n * \n * @example\n * ```html\n * <!-- Show button only if user has 'users:create' permission -->\n * <button *appHasPermission=\"'users:create'\">Create User</button>\n * \n * <!-- Show entire section for multiple operations -->\n * <div *appHasPermission=\"'employees:read'\">\n *   <app-employee-list></app-employee-list>\n * </div>\n * \n * <!-- Conditional navigation items -->\n * <nav-item *appHasPermission=\"'reports:view'\">Reports</nav-item>\n * ```\n * \n * @remarks\n * Permission-Based Access Control Features:\n * - Declarative permission checking through structural directive syntax\n * - Reactive permission updates with Angular Signals integration\n * - Automatic template re-evaluation on user authentication state changes\n * - Fine-grained access control at the UI component level\n * - Seamless integration with RBAC permission system\n * - Performance-optimized view creation and destruction\n * \n * Security Implementation:\n * - Client-side access control for user experience optimization\n * - Server-side permission validation remains primary security boundary\n * - Permission-based template rendering preventing unauthorized UI exposure\n * - Dynamic permission evaluation supporting role changes during session\n * - Secure permission string validation preventing injection attacks\n * - Integration with authentication state for comprehensive access control\n * \n * Angular Integration:\n * - Structural directive implementing Angular's templating system\n * - Standalone directive compatible with modern Angular architecture\n * - Angular Signals integration for reactive permission state management\n * - ViewContainerRef manipulation for efficient DOM updates\n * - TemplateRef-based conditional rendering with optimal performance\n * - Effect-based reactivity ensuring immediate UI updates on permission changes\n * \n * Performance Optimization:\n * - Efficient view creation and destruction minimizing DOM manipulation\n * - Lazy template evaluation reducing unnecessary component instantiation\n * - Signal-based reactivity preventing excessive change detection cycles\n * - View state caching preventing redundant template operations\n * - Memory-efficient template management with proper cleanup\n * - Optimized permission checking with cached permission resolution\n * \n * User Experience Features:\n * - Seamless UI adaptation to user permission changes\n * - Immediate visual feedback on permission state modifications\n * - Clean UI presentation hiding inaccessible functionality\n * - Consistent access control behavior across application components\n * - Progressive disclosure of functionality based on user capabilities\n * - Accessibility-compliant conditional rendering\n * \n * Enterprise Integration:\n * - Role-based access control integration with organizational hierarchies\n * - Multi-tenant permission isolation supporting organizational boundaries\n * - Dynamic permission updates supporting role-based workflow changes\n * - Audit-friendly permission checking with comprehensive logging\n * - Integration with enterprise identity management systems\n * - Support for complex permission hierarchies and inheritance patterns\n */\n@Directive({\n  selector: '[appHasPermission]',\n  standalone: true\n})\nexport class HasPermissionDirective {\n  private permission = '';\n  private hasView = false;\n\n  /**\n   * Sets the required permission for template visibility.\n   * Updates the view immediately when permission changes to ensure reactive UI updates.\n   * \n   * @param permission - The permission string to check (e.g., 'users:create', 'employees:read')\n   */\n  @Input() set appHasPermission(permission: string) {\n    this.permission = permission;\n    this.updateView();\n  }\n\n  /**\n   * Initializes the HasPermissionDirective with required Angular dependencies and reactive permission monitoring.\n   * Sets up automatic view updates based on user authentication state changes using Angular Signals.\n   * \n   * @param templateRef - Template reference for conditional rendering\n   * @param viewContainer - View container for DOM manipulation\n   * @param permissionService - Service for permission checking and validation\n   * @param authService - Authentication service providing user state and permissions\n   */\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef,\n    private permissionService: PermissionService,\n    private authService: AuthService\n  ) {\n    // Use signals effect to watch for user changes\n    effect(() => {\n      // Access the current user signal to trigger effect\n      this.authService.currentUser();\n      this.updateView();\n    });\n  }\n\n  /**\n   * Updates the template visibility based on current user permissions.\n   * Efficiently manages view creation and destruction to minimize DOM manipulation overhead.\n   * Called automatically when permission or user state changes through reactive effects.\n   */\n  private updateView(): void {\n    if (!this.permission) return;\n    \n    const hasPermission = this.permissionService.has(this.permission);\n    \n    if (hasPermission && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!hasPermission && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AA4EM,IAAO,0BAAP,MAAO,wBAAsB;EAyBvB;EACA;EACA;EACA;EA3BF,aAAa;EACb,UAAU;;;;;;;EAQlB,IAAa,iBAAiB,YAAkB;AAC9C,SAAK,aAAa;AAClB,SAAK,WAAU;EACjB;;;;;;;;;;EAWA,YACU,aACA,eACA,mBACA,aAAwB;AAHxB,SAAA,cAAA;AACA,SAAA,gBAAA;AACA,SAAA,oBAAA;AACA,SAAA,cAAA;AAGR,WAAO,MAAK;AAEV,WAAK,YAAY,YAAW;AAC5B,WAAK,WAAU;IACjB,CAAC;EACH;;;;;;EAOQ,aAAU;AAChB,QAAI,CAAC,KAAK;AAAY;AAEtB,UAAM,gBAAgB,KAAK,kBAAkB,IAAI,KAAK,UAAU;AAEhE,QAAI,iBAAiB,CAAC,KAAK,SAAS;AAClC,WAAK,cAAc,mBAAmB,KAAK,WAAW;AACtD,WAAK,UAAU;IACjB,WAAW,CAAC,iBAAiB,KAAK,SAAS;AACzC,WAAK,cAAc,MAAK;AACxB,WAAK,UAAU;IACjB;EACF;;AAvDiC;cAAtB;mCAAA,yBAAsB,4BAAA,WAAA,GAAA,4BAAA,gBAAA,GAAA,4BAAA,iBAAA,GAAA,4BAAA,WAAA,CAAA;AAAA;cAAtB,0FAAA,yBAAsB,WAAA,CAAA,CAAA,IAAA,oBAAA,EAAA,CAAA,GAAA,QAAA,EAAA,kBAAA,mBAAA,EAAA,CAAA;AAA7B,IAAO,yBAAP;;sEAAO,wBAAsB,CAAA;UAJlC;WAAU;MACT,UAAU;MACV,YAAY;KACb;uHAWc,kBAAgB,CAAA;UAA5B;;;",
  "names": []
}
