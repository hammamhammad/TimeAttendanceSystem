{
  "version": 3,
  "sources": ["src/app/shared/ui/form-field/form-field.component.ts", "src/app/shared/ui/form-field/form-field.component.html", "src/app/pages/auth/login.component.ts", "src/app/pages/auth/login.component.html"],
  "sourcesContent": ["import { Component, Input } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-form-field',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './form-field.component.html',\n  styleUrl: './form-field.component.css'\n})\nexport class FormFieldComponent {\n  @Input() label = '';\n  @Input() control!: FormControl;\n  @Input() placeholder = '';\n  @Input() help = '';\n  @Input() type = 'text';\n  @Input() icon = '';\n  @Input() options: { value: any; label: string }[] = [];\n\n  private static fieldCounter = 0;\n  public fieldId: string;\n\n  constructor() {\n    this.fieldId = `field-${++FormFieldComponent.fieldCounter}`;\n  }\n\n  get isInvalid(): boolean {\n    return !!(this.control?.invalid && (this.control?.dirty || this.control?.touched));\n  }\n\n  get errorMessage(): string {\n    if (!this.control?.errors) return '';\n\n    const errors = this.control.errors;\n    \n    if (errors['required']) return `${this.label} is required`;\n    if (errors['email']) return 'Please enter a valid email address';\n    if (errors['minlength']) return `${this.label} must be at least ${errors['minlength'].requiredLength} characters`;\n    if (errors['maxlength']) return `${this.label} must not exceed ${errors['maxlength'].requiredLength} characters`;\n    if (errors['pattern']) return `${this.label} format is invalid`;\n    \n    return 'This field is invalid';\n  }\n}", "<div class=\"mb-3\">\n  <label [for]=\"fieldId\" class=\"form-label\">\n    @if (icon) {\n      <i class=\"{{ icon }} me-1\"></i>\n    }\n    {{ label }}\n  </label>\n  \n  @if (type === 'select') {\n    <select\n      [id]=\"fieldId\"\n      class=\"form-select\"\n      [class.is-invalid]=\"isInvalid\"\n      [formControl]=\"control\"\n      [attr.aria-describedby]=\"help ? fieldId + '-help' : null\">\n      <option value=\"\">{{ placeholder }}</option>\n      @for (option of options; track option.value) {\n        <option [value]=\"option.value\">{{ option.label }}</option>\n      }\n    </select>\n  } @else if (type === 'textarea') {\n    <textarea\n      [id]=\"fieldId\"\n      class=\"form-control\"\n      [class.is-invalid]=\"isInvalid\"\n      [formControl]=\"control\"\n      [placeholder]=\"placeholder\"\n      [attr.aria-describedby]=\"help ? fieldId + '-help' : null\"\n      rows=\"3\">\n    </textarea>\n  } @else {\n    <input\n      [id]=\"fieldId\"\n      [type]=\"type\"\n      class=\"form-control\"\n      [class.is-invalid]=\"isInvalid\"\n      [formControl]=\"control\"\n      [placeholder]=\"placeholder\"\n      [attr.aria-describedby]=\"help ? fieldId + '-help' : null\">\n  }\n  \n  @if (help) {\n    <div [id]=\"fieldId + '-help'\" class=\"form-text\">{{ help }}</div>\n  }\n  \n  @if (isInvalid) {\n    <div class=\"invalid-feedback\">{{ errorMessage }}</div>\n  }\n</div>", "import { Component, signal, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { I18nService } from '../../core/i18n/i18n.service';\nimport { NotificationService } from '../../core/notifications/notification.service';\nimport { FormFieldComponent } from '../../shared/ui/form-field/form-field.component';\n\n/**\n * Angular component for user authentication (login page).\n * Provides secure login form with validation, internationalization, and user feedback.\n * Implements modern Angular patterns with signals and reactive forms.\n * \n * Key Features:\n * - Reactive form validation with real-time feedback\n * - Internationalization support for multiple languages\n * - Loading states and error handling with user notifications\n * - Automatic redirect for already authenticated users\n * - Remember me functionality for extended sessions\n * - Modern Angular signals for reactive state management\n * \n * Security Considerations:\n * - Client-side validation (complemented by server-side validation)\n * - Secure credential transmission to backend API\n * - Automatic redirect prevents double authentication\n * - Error messages prevent credential enumeration\n * - Loading states prevent multiple concurrent login attempts\n * \n * UX Features:\n * - Localized interface with language switching\n * - Visual feedback for form validation errors\n * - Success/error notifications for user guidance\n * - Responsive design for various screen sizes\n * - Keyboard accessibility and proper tabbing\n * \n * @example\n * Usage in route configuration:\n * ```typescript\n * {\n *   path: 'login',\n *   component: LoginComponent,\n *   title: 'Login - Time Attendance System'\n * }\n * ```\n */\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormFieldComponent],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.css'\n})\nexport class LoginComponent {\n  /** Injected notification service for user feedback */\n  private notificationService = inject(NotificationService);\n  \n  /** Reactive form for login credentials input */\n  loginForm: FormGroup;\n  /** Signal for loading state during authentication */\n  loading = signal(false);\n  /** Signal for displaying authentication errors */\n  error = signal('');\n\n  /**\n   * Initializes the login component with form setup and authentication check.\n   * \n   * @param fb - Angular FormBuilder for creating reactive forms\n   * @param authService - Authentication service for login operations\n   * @param router - Angular Router for navigation after login\n   * @param i18n - Internationalization service for localized text\n   */\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    public i18n: I18nService\n  ) {\n    // Initialize reactive form with validation rules\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n      rememberMe: [false]\n    });\n\n    // Redirect if already authenticated to prevent unnecessary login\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate(['/dashboard']);\n    }\n  }\n\n  /**\n   * Retrieves localized text for the specified translation key.\n   * Provides convenient shorthand for internationalization service.\n   * \n   * @param key - Translation key for localized text\n   * @returns Localized text string for current language\n   * \n   * @example\n   * ```typescript\n   * const title = this.t('auth.login_title'); // Returns localized login title\n   * ```\n   */\n  t(key: string): string {\n    return this.i18n.t(key);\n  }\n\n  /**\n   * Handles login form submission with validation and authentication.\n   * Implements secure login flow with comprehensive error handling and user feedback.\n   * \n   * @remarks\n   * Login Process:\n   * 1. Validates form inputs (client-side validation)\n   * 2. Sets loading state to prevent multiple submissions\n   * 3. Calls authentication service with form data\n   * 4. Handles success with notification and redirect\n   * 5. Handles errors with user-friendly messages\n   * 6. Resets loading state on completion\n   * \n   * Validation Features:\n   * - Required field validation for username and password\n   * - Form state management with touched/dirty states\n   * - Visual feedback for validation errors\n   * - Prevention of invalid form submission\n   * \n   * Security Considerations:\n   * - Generic error messages prevent credential enumeration\n   * - Loading state prevents rapid-fire login attempts\n   * - Client-side validation enhances UX but relies on server validation\n   * - Error logging for debugging without exposing sensitive data\n   * \n   * User Experience:\n   * - Immediate visual feedback during authentication\n   * - Success notifications provide positive confirmation\n   * - Error messages guide user to resolve issues\n   * - Automatic redirect on successful authentication\n   */\n  onSubmit(): void {\n    if (this.loginForm.invalid) {\n      this.loginForm.markAllAsTouched();\n      return;\n    }\n\n    this.loading.set(true);\n    this.error.set('');\n\n    this.authService.login(this.loginForm.value).subscribe({\n      next: () => {\n        this.notificationService.success(\n          this.t('auth.login_success'),\n          'Welcome back!'\n        );\n        this.router.navigate(['/dashboard']);\n      },\n      error: (error) => {\n        this.loading.set(false);\n        this.error.set(this.t('auth.invalid_credentials'));\n        console.error('Login failed:', error);\n        this.notificationService.error(\n          this.t('auth.invalid_credentials'),\n          'Please check your username and password'\n        );\n      }\n    });\n  }\n\n  /**\n   * Gets strongly-typed reference to username form control.\n   * Provides type safety and convenient access for validation and value binding.\n   * \n   * @returns FormControl instance for username input\n   * \n   * @remarks\n   * Used for:\n   * - Template binding and validation display\n   * - Accessing control state (valid, invalid, touched, dirty)\n   * - Getting current value and validation errors\n   * - Programmatic control manipulation if needed\n   * \n   * @example\n   * ```html\n   * <input [formControl]=\"usernameControl\" />\n   * <div *ngIf=\"usernameControl.invalid && usernameControl.touched\">\n   *   Username is required\n   * </div>\n   * ```\n   */\n  get usernameControl(): FormControl {\n    return this.loginForm.get('username') as FormControl;\n  }\n\n  /**\n   * Gets strongly-typed reference to password form control.\n   * Provides type safety and convenient access for validation and value binding.\n   * \n   * @returns FormControl instance for password input\n   * \n   * @remarks\n   * Security Considerations:\n   * - Password values are handled securely by FormControl\n   * - No password values logged or exposed in component\n   * - Validation feedback doesn't reveal password requirements\n   * - Auto-completion and password managers supported\n   */\n  get passwordControl(): FormControl {\n    return this.loginForm.get('password') as FormControl;\n  }\n\n  /**\n   * Toggles the application language between English and Arabic.\n   * Provides bilingual support with immediate UI language switching.\n   * \n   * @remarks\n   * Language Switching Features:\n   * - Toggles between 'en' (English) and 'ar' (Arabic)\n   * - Immediate UI update with new language\n   * - Persistent language preference across sessions\n   * - RTL (Right-to-Left) support for Arabic language\n   * \n   * Internationalization Benefits:\n   * - Improves accessibility for diverse user base\n   * - Enhances user experience with native language\n   * - Supports business requirements for multilingual systems\n   * - Enables localized form validation messages\n   * \n   * Implementation Details:\n   * - Uses i18n service for language management\n   * - Triggers reactive updates across the application\n   * - Maintains form state during language switches\n   * - Preserves user input during language changes\n   */\n  onSwitchLanguage(): void {\n    const newLocale = this.i18n.getCurrentLocale() === 'en' ? 'ar' : 'en';\n    this.i18n.setLocale(newLocale);\n  }\n}", "<div class=\"login-container\">\n  <div class=\"login-card\">\n    <div class=\"login-header text-center mb-4\">\n      <i class=\"fa-solid fa-clock fa-3x text-primary mb-3\"></i>\n      <h1 class=\"h3 mb-2\">Time Attendance System</h1>\n      <p class=\"text-muted\">{{ t('auth.login') }}</p>\n    </div>\n\n    @if (error()) {\n      <div class=\"alert alert-danger\" role=\"alert\">\n        <i class=\"fa-solid fa-exclamation-triangle me-2\"></i>\n        {{ error() }}\n      </div>\n    }\n\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\" novalidate>\n      <app-form-field\n        [label]=\"t('auth.username')\"\n        [control]=\"usernameControl\"\n        [placeholder]=\"t('auth.username')\"\n        type=\"text\"\n        icon=\"fa-solid fa-user\">\n      </app-form-field>\n\n      <app-form-field\n        [label]=\"t('auth.password')\"\n        [control]=\"passwordControl\"\n        [placeholder]=\"t('auth.password')\"\n        type=\"password\"\n        icon=\"fa-solid fa-lock\">\n      </app-form-field>\n\n      <div class=\"mb-3 form-check\">\n        <input\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          id=\"rememberMe\"\n          formControlName=\"rememberMe\">\n        <label class=\"form-check-label\" for=\"rememberMe\">\n          {{ t('auth.remember_me') }}\n        </label>\n      </div>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary w-100 mb-3\"\n        [disabled]=\"loading() || loginForm.invalid\">\n        @if (loading()) {\n          <span class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\n        }\n        {{ t('auth.login') }}\n      </button>\n\n      <div class=\"text-center\">\n        <a href=\"#\" class=\"text-decoration-none\" (click)=\"$event.preventDefault()\">\n          {{ t('auth.forgot_password') }}\n        </a>\n      </div>\n    </form>\n\n    <div class=\"login-footer mt-4 pt-3 border-top text-center\">\n      <button\n        type=\"button\"\n        class=\"btn btn-link btn-sm\"\n        (click)=\"onSwitchLanguage()\">\n        <i class=\"fa-solid fa-globe me-1\"></i>\n        {{ i18n.getCurrentLocale() === 'en' ? 'عربي' : 'English' }}\n      </button>\n    </div>\n  </div>\n</div>"],
  "mappings": "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",
  "names": []
}
