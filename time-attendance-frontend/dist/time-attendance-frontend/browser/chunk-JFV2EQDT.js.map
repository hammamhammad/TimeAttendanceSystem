{
  "version": 3,
  "sources": ["src/app/pages/settings/public-holidays/create-public-holiday/create-public-holiday.component.ts", "src/app/pages/settings/public-holidays/create-public-holiday/create-public-holiday.component.html"],
  "sourcesContent": ["import { Component, OnInit, signal, inject, computed } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { I18nService } from '../../../../core/i18n/i18n.service';\r\nimport { PublicHolidaysService } from '../public-holidays.service';\r\nimport { NotificationService } from '../../../../core/notifications/notification.service';\r\nimport { HolidayType, CreatePublicHolidayRequest } from '../../../../shared/models/public-holiday.model';\r\nimport { FormHeaderComponent } from '../../../../shared/components/form-header/form-header.component';\r\n\r\n@Component({\r\n  selector: 'app-create-public-holiday',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, FormHeaderComponent],\r\n  templateUrl: './create-public-holiday.component.html',\r\n  styleUrls: ['./create-public-holiday.component.css']\r\n})\r\nexport class CreatePublicHolidayComponent implements OnInit {\r\n  private formBuilder = inject(FormBuilder);\r\n  private publicHolidaysService = inject(PublicHolidaysService);\r\n  private router = inject(Router);\r\n  private notificationService = inject(NotificationService);\r\n  public i18n = inject(I18nService);\r\n\r\n  // Holiday type reference for template\r\n  readonly HolidayType = HolidayType;\r\n\r\n  // Signals for state management\r\n  loading = signal(false);\r\n  submitting = signal(false);\r\n  selectedHolidayType = signal<HolidayType>(HolidayType.Annual);\r\n\r\n  // Form\r\n  holidayForm!: FormGroup;\r\n\r\n  // Available options\r\n  holidayTypes = computed(() => this.publicHolidaysService.getHolidayTypes());\r\n\r\n  // Field visibility computed signals\r\n  showSpecificDateField = computed(() => {\r\n    const type = Number(this.selectedHolidayType());\r\n    return type === HolidayType.OneTime;\r\n  });\r\n\r\n  showMonthField = computed(() => {\r\n    const type = Number(this.selectedHolidayType());\r\n    return type === HolidayType.Annual || type === HolidayType.Floating;\r\n  });\r\n\r\n  showDayField = computed(() => {\r\n    const type = Number(this.selectedHolidayType());\r\n    return type === HolidayType.Annual || type === HolidayType.Monthly;\r\n  });\r\n\r\n  showWeekOfMonthField = computed(() => {\r\n    const type = Number(this.selectedHolidayType());\r\n    return type === HolidayType.Floating;\r\n  });\r\n\r\n  showDayOfWeekField = computed(() => {\r\n    const type = Number(this.selectedHolidayType());\r\n    return type === HolidayType.Floating;\r\n  });\r\n\r\n  ngOnInit(): void {\r\n    this.initializeForm();\r\n  }\r\n\r\n  t(key: string): string {\r\n    return this.i18n.t(key);\r\n  }\r\n\r\n  initializeForm(): void {\r\n    this.holidayForm = this.formBuilder.group({\r\n      name: ['', [Validators.required, Validators.maxLength(200)]],\r\n      nameAr: ['', [Validators.maxLength(200)]],\r\n      holidayType: [HolidayType.Annual, [Validators.required]],\r\n      specificDate: [''],\r\n      month: [''],\r\n      day: [''],\r\n      weekOfMonth: [''],\r\n      dayOfWeek: [''],\r\n      isActive: [true],\r\n      isNational: [true],\r\n      branchId: [''],\r\n      description: ['', [Validators.maxLength(1000)]],\r\n      effectiveFromYear: [''],\r\n      effectiveToYear: [''],\r\n      countryCode: ['', [Validators.maxLength(10)]],\r\n      priority: [50, [Validators.min(1), Validators.max(100)]]\r\n    });\r\n\r\n    // Watch holiday type changes to update validation and signal\r\n    this.holidayForm.get('holidayType')?.valueChanges.subscribe(type => {\r\n      const numericType = Number(type);\r\n      this.selectedHolidayType.set(numericType);\r\n      this.updateValidationBasedOnType(numericType);\r\n    });\r\n\r\n    // Initialize validation for default type and signal\r\n    this.selectedHolidayType.set(HolidayType.Annual);\r\n    this.updateValidationBasedOnType(HolidayType.Annual);\r\n  }\r\n\r\n  updateValidationBasedOnType(type: HolidayType): void {\r\n    const specificDateControl = this.holidayForm.get('specificDate');\r\n    const monthControl = this.holidayForm.get('month');\r\n    const dayControl = this.holidayForm.get('day');\r\n    const weekOfMonthControl = this.holidayForm.get('weekOfMonth');\r\n    const dayOfWeekControl = this.holidayForm.get('dayOfWeek');\r\n\r\n    // Clear all validators first\r\n    specificDateControl?.clearValidators();\r\n    monthControl?.clearValidators();\r\n    dayControl?.clearValidators();\r\n    weekOfMonthControl?.clearValidators();\r\n    dayOfWeekControl?.clearValidators();\r\n\r\n    // Clear values\r\n    specificDateControl?.setValue('');\r\n    monthControl?.setValue('');\r\n    dayControl?.setValue('');\r\n    weekOfMonthControl?.setValue('');\r\n    dayOfWeekControl?.setValue('');\r\n\r\n    switch (type) {\r\n      case HolidayType.OneTime:\r\n        specificDateControl?.setValidators([Validators.required]);\r\n        break;\r\n\r\n      case HolidayType.Annual:\r\n        monthControl?.setValidators([Validators.required, Validators.min(1), Validators.max(12)]);\r\n        dayControl?.setValidators([Validators.required, Validators.min(1), Validators.max(31)]);\r\n        break;\r\n\r\n      case HolidayType.Monthly:\r\n        dayControl?.setValidators([Validators.required, Validators.min(1), Validators.max(31)]);\r\n        break;\r\n\r\n      case HolidayType.Floating:\r\n        monthControl?.setValidators([Validators.required, Validators.min(1), Validators.max(12)]);\r\n        weekOfMonthControl?.setValidators([Validators.required, Validators.min(1), Validators.max(5)]);\r\n        dayOfWeekControl?.setValidators([Validators.required, Validators.min(0), Validators.max(6)]);\r\n        break;\r\n    }\r\n\r\n    // Update validity\r\n    specificDateControl?.updateValueAndValidity();\r\n    monthControl?.updateValueAndValidity();\r\n    dayControl?.updateValueAndValidity();\r\n    weekOfMonthControl?.updateValueAndValidity();\r\n    dayOfWeekControl?.updateValueAndValidity();\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.holidayForm.valid) {\r\n      const formValue = this.holidayForm.value;\r\n\r\n      // Validate holiday data\r\n      const validationErrors = this.publicHolidaysService.validateHolidayData(formValue);\r\n      if (validationErrors.length > 0) {\r\n        validationErrors.forEach(error => {\r\n          this.notificationService.error(this.t('app.error'), error);\r\n        });\r\n        return;\r\n      }\r\n\r\n      const request: CreatePublicHolidayRequest = {\r\n        name: formValue.name,\r\n        nameAr: formValue.nameAr || undefined,\r\n        holidayType: formValue.holidayType,\r\n        specificDate: formValue.specificDate || undefined,\r\n        month: formValue.month || undefined,\r\n        day: formValue.day || undefined,\r\n        weekOfMonth: formValue.weekOfMonth || undefined,\r\n        dayOfWeek: formValue.dayOfWeek || undefined,\r\n        isActive: formValue.isActive,\r\n        isNational: formValue.isNational,\r\n        branchId: formValue.branchId || undefined,\r\n        description: formValue.description || undefined,\r\n        effectiveFromYear: formValue.effectiveFromYear || undefined,\r\n        effectiveToYear: formValue.effectiveToYear || undefined,\r\n        countryCode: formValue.countryCode || undefined,\r\n        priority: formValue.priority || 50\r\n      };\r\n\r\n      this.submitting.set(true);\r\n\r\n      this.publicHolidaysService.createPublicHoliday(request).subscribe({\r\n        next: () => {\r\n          this.submitting.set(false);\r\n          this.notificationService.success(\r\n            this.t('app.success'),\r\n            this.t('settings.holidays.holidayCreatedSuccessfully')\r\n          );\r\n          this.router.navigate(['/settings/public-holidays']);\r\n        },\r\n        error: (error) => {\r\n          console.error('Failed to create holiday:', error);\r\n          this.submitting.set(false);\r\n          this.notificationService.error(\r\n            this.t('app.error'),\r\n            this.t('errors.server')\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      this.markFormGroupTouched();\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.router.navigate(['/settings/public-holidays']);\r\n  }\r\n\r\n  markFormGroupTouched(): void {\r\n    Object.keys(this.holidayForm.controls).forEach(key => {\r\n      const control = this.holidayForm.get(key);\r\n      control?.markAsTouched();\r\n    });\r\n  }\r\n\r\n  isFieldInvalid(fieldName: string): boolean {\r\n    const field = this.holidayForm.get(fieldName);\r\n    return !!(field && field.invalid && (field.dirty || field.touched));\r\n  }\r\n\r\n  getFieldError(fieldName: string): string {\r\n    const field = this.holidayForm.get(fieldName);\r\n    if (field && field.errors && (field.dirty || field.touched)) {\r\n      if (field.errors['required']) {\r\n        return this.t('validation.required');\r\n      }\r\n      if (field.errors['maxlength']) {\r\n        return this.t('validation.maxLength');\r\n      }\r\n      if (field.errors['min']) {\r\n        return this.t('validation.min');\r\n      }\r\n      if (field.errors['max']) {\r\n        return this.t('validation.max');\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  getHolidayTypeDescription(): string {\r\n    const selectedValue = this.holidayForm.get('holidayType')?.value;\r\n    const selectedType = this.holidayTypes().find(t => t.value === selectedValue);\r\n    return selectedType?.description || '';\r\n  }\r\n\r\n  // Helper methods for template\r\n  getMonthOptions(): { value: number; label: string }[] {\r\n    const months = [];\r\n    for (let i = 1; i <= 12; i++) {\r\n      const date = new Date(2024, i - 1, 1);\r\n      months.push({\r\n        value: i,\r\n        label: date.toLocaleDateString(this.i18n.getCurrentLocale(), { month: 'long' })\r\n      });\r\n    }\r\n    return months;\r\n  }\r\n\r\n  getDayOptions(): number[] {\r\n    const days = [];\r\n    for (let i = 1; i <= 31; i++) {\r\n      days.push(i);\r\n    }\r\n    return days;\r\n  }\r\n\r\n  getWeekOfMonthOptions(): { value: number; label: string }[] {\r\n    return [\r\n      { value: 1, label: this.t('settings.holidays.firstWeek') },\r\n      { value: 2, label: this.t('settings.holidays.secondWeek') },\r\n      { value: 3, label: this.t('settings.holidays.thirdWeek') },\r\n      { value: 4, label: this.t('settings.holidays.fourthWeek') },\r\n      { value: 5, label: this.t('settings.holidays.lastWeek') }\r\n    ];\r\n  }\r\n\r\n  getDayOfWeekOptions(): { value: number; label: string }[] {\r\n    const daysOfWeek = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(2024, 0, 7 + i); // Start from Sunday\r\n      daysOfWeek.push({\r\n        value: i,\r\n        label: date.toLocaleDateString(this.i18n.getCurrentLocale(), { weekday: 'long' })\r\n      });\r\n    }\r\n    return daysOfWeek;\r\n  }\r\n\r\n  getYearOptions(): number[] {\r\n    const currentYear = new Date().getFullYear();\r\n    const years = [];\r\n    for (let i = currentYear - 5; i <= currentYear + 10; i++) {\r\n      years.push(i);\r\n    }\r\n    return years;\r\n  }\r\n\r\n  shouldShowField(fieldName: string): boolean {\r\n    const holidayType = this.selectedHolidayType();\r\n\r\n    switch (fieldName) {\r\n      case 'specificDate':\r\n        return holidayType === HolidayType.OneTime;\r\n\r\n      case 'month':\r\n        return holidayType === HolidayType.Annual || holidayType === HolidayType.Floating;\r\n\r\n      case 'day':\r\n        return holidayType === HolidayType.Annual || holidayType === HolidayType.Monthly;\r\n\r\n      case 'weekOfMonth':\r\n      case 'dayOfWeek':\r\n        return holidayType === HolidayType.Floating;\r\n\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}", "<div class=\"container-fluid\">\r\n  <!-- Page Header -->\r\n  <app-form-header\r\n    mode=\"create\"\r\n    [title]=\"t('settings.holidays.createHoliday')\"\r\n    moduleName=\"settings\"\r\n    moduleRoute=\"settings/public-holidays\"\r\n    [loading]=\"submitting()\">\r\n  </app-form-header>\r\n\r\n  <!-- Form Card -->\r\n  <div class=\"card\">\r\n    <div class=\"card-body\">\r\n      <form [formGroup]=\"holidayForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"row\">\r\n          <!-- Basic Information -->\r\n          <div class=\"col-md-6\">\r\n            <h5 class=\"mb-3\">{{ t('settings.holidays.basicInformation') }}</h5>\r\n\r\n            <!-- Name -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"name\" class=\"form-label\">\r\n                {{ t('settings.holidays.name') }}\r\n                <span class=\"text-danger\">*</span>\r\n              </label>\r\n              <input type=\"text\"\r\n                     id=\"name\"\r\n                     class=\"form-control\"\r\n                     formControlName=\"name\"\r\n                     [class.is-invalid]=\"isFieldInvalid('name')\"\r\n                     [placeholder]=\"t('settings.holidays.namePlaceholder')\">\r\n              @if (isFieldInvalid('name')) {\r\n                <div class=\"invalid-feedback\">\r\n                  {{ getFieldError('name') }}\r\n                </div>\r\n              }\r\n            </div>\r\n\r\n            <!-- Arabic Name -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"nameAr\" class=\"form-label\">{{ t('settings.holidays.nameAr') }}</label>\r\n              <input type=\"text\"\r\n                     id=\"nameAr\"\r\n                     class=\"form-control\"\r\n                     formControlName=\"nameAr\"\r\n                     [class.is-invalid]=\"isFieldInvalid('nameAr')\"\r\n                     [placeholder]=\"t('settings.holidays.nameArPlaceholder')\">\r\n              @if (isFieldInvalid('nameAr')) {\r\n                <div class=\"invalid-feedback\">\r\n                  {{ getFieldError('nameAr') }}\r\n                </div>\r\n              }\r\n            </div>\r\n\r\n            <!-- Holiday Type -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"holidayType\" class=\"form-label\">\r\n                {{ t('settings.holidays.type') }}\r\n                <span class=\"text-danger\">*</span>\r\n              </label>\r\n              <select id=\"holidayType\"\r\n                      class=\"form-select\"\r\n                      formControlName=\"holidayType\"\r\n                      [class.is-invalid]=\"isFieldInvalid('holidayType')\">\r\n                @for (type of holidayTypes(); track type.value) {\r\n                  <option [value]=\"type.value\">{{ type.label }}</option>\r\n                }\r\n              </select>\r\n              @if (isFieldInvalid('holidayType')) {\r\n                <div class=\"invalid-feedback\">\r\n                  {{ getFieldError('holidayType') }}\r\n                </div>\r\n              }\r\n              <div class=\"form-text\">\r\n                {{ getHolidayTypeDescription() }}\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Description -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"description\" class=\"form-label\">{{ t('settings.holidays.description') }}</label>\r\n              <textarea id=\"description\"\r\n                        class=\"form-control\"\r\n                        formControlName=\"description\"\r\n                        rows=\"3\"\r\n                        [class.is-invalid]=\"isFieldInvalid('description')\"\r\n                        [placeholder]=\"t('settings.holidays.descriptionPlaceholder')\">\r\n              </textarea>\r\n              @if (isFieldInvalid('description')) {\r\n                <div class=\"invalid-feedback\">\r\n                  {{ getFieldError('description') }}\r\n                </div>\r\n              }\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Date Configuration -->\r\n          <div class=\"col-md-6\">\r\n            <h5 class=\"mb-3\">{{ t('settings.holidays.dateConfiguration') }}</h5>\r\n\r\n            <!-- Specific Date (One Time only) -->\r\n            @if (showSpecificDateField()) {\r\n              <div class=\"mb-3\">\r\n                <label for=\"specificDate\" class=\"form-label\">\r\n                  {{ t('settings.holidays.specificDate') }}\r\n                  <span class=\"text-danger\">*</span>\r\n                </label>\r\n                <input type=\"date\"\r\n                       id=\"specificDate\"\r\n                       class=\"form-control\"\r\n                       formControlName=\"specificDate\"\r\n                       [class.is-invalid]=\"isFieldInvalid('specificDate')\">\r\n                @if (isFieldInvalid('specificDate')) {\r\n                  <div class=\"invalid-feedback\">\r\n                    {{ getFieldError('specificDate') }}\r\n                  </div>\r\n                }\r\n              </div>\r\n            }\r\n\r\n            <!-- Month (Annual and Floating) -->\r\n            @if (showMonthField()) {\r\n              <div class=\"mb-3\">\r\n                <label for=\"month\" class=\"form-label\">\r\n                  {{ t('settings.holidays.month') }}\r\n                  <span class=\"text-danger\">*</span>\r\n                </label>\r\n                <select id=\"month\"\r\n                        class=\"form-select\"\r\n                        formControlName=\"month\"\r\n                        [class.is-invalid]=\"isFieldInvalid('month')\">\r\n                  <option value=\"\">{{ t('common.select') }}</option>\r\n                  @for (month of getMonthOptions(); track month.value) {\r\n                    <option [value]=\"month.value\">{{ month.label }}</option>\r\n                  }\r\n                </select>\r\n                @if (isFieldInvalid('month')) {\r\n                  <div class=\"invalid-feedback\">\r\n                    {{ getFieldError('month') }}\r\n                  </div>\r\n                }\r\n              </div>\r\n            }\r\n\r\n            <!-- Day (Annual and Monthly) -->\r\n            @if (showDayField()) {\r\n              <div class=\"mb-3\">\r\n                <label for=\"day\" class=\"form-label\">\r\n                  {{ t('settings.holidays.day') }}\r\n                  <span class=\"text-danger\">*</span>\r\n                </label>\r\n                <select id=\"day\"\r\n                        class=\"form-select\"\r\n                        formControlName=\"day\"\r\n                        [class.is-invalid]=\"isFieldInvalid('day')\">\r\n                  <option value=\"\">{{ t('common.select') }}</option>\r\n                  @for (day of getDayOptions(); track day) {\r\n                    <option [value]=\"day\">{{ day }}</option>\r\n                  }\r\n                </select>\r\n                @if (isFieldInvalid('day')) {\r\n                  <div class=\"invalid-feedback\">\r\n                    {{ getFieldError('day') }}\r\n                  </div>\r\n                }\r\n              </div>\r\n            }\r\n\r\n            <!-- Week of Month (Floating only) -->\r\n            @if (showWeekOfMonthField()) {\r\n              <div class=\"mb-3\">\r\n                <label for=\"weekOfMonth\" class=\"form-label\">\r\n                  {{ t('settings.holidays.weekOfMonth') }}\r\n                  <span class=\"text-danger\">*</span>\r\n                </label>\r\n                <select id=\"weekOfMonth\"\r\n                        class=\"form-select\"\r\n                        formControlName=\"weekOfMonth\"\r\n                        [class.is-invalid]=\"isFieldInvalid('weekOfMonth')\">\r\n                  <option value=\"\">{{ t('common.select') }}</option>\r\n                  @for (week of getWeekOfMonthOptions(); track week.value) {\r\n                    <option [value]=\"week.value\">{{ week.label }}</option>\r\n                  }\r\n                </select>\r\n                @if (isFieldInvalid('weekOfMonth')) {\r\n                  <div class=\"invalid-feedback\">\r\n                    {{ getFieldError('weekOfMonth') }}\r\n                  </div>\r\n                }\r\n              </div>\r\n            }\r\n\r\n            <!-- Day of Week (Floating only) -->\r\n            @if (showDayOfWeekField()) {\r\n              <div class=\"mb-3\">\r\n                <label for=\"dayOfWeek\" class=\"form-label\">\r\n                  {{ t('settings.holidays.dayOfWeek') }}\r\n                  <span class=\"text-danger\">*</span>\r\n                </label>\r\n                <select id=\"dayOfWeek\"\r\n                        class=\"form-select\"\r\n                        formControlName=\"dayOfWeek\"\r\n                        [class.is-invalid]=\"isFieldInvalid('dayOfWeek')\">\r\n                  <option value=\"\">{{ t('common.select') }}</option>\r\n                  @for (dayOfWeek of getDayOfWeekOptions(); track dayOfWeek.value) {\r\n                    <option [value]=\"dayOfWeek.value\">{{ dayOfWeek.label }}</option>\r\n                  }\r\n                </select>\r\n                @if (isFieldInvalid('dayOfWeek')) {\r\n                  <div class=\"invalid-feedback\">\r\n                    {{ getFieldError('dayOfWeek') }}\r\n                  </div>\r\n                }\r\n              </div>\r\n            }\r\n\r\n            <!-- Priority -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"priority\" class=\"form-label\">{{ t('settings.holidays.priority') }}</label>\r\n              <input type=\"number\"\r\n                     id=\"priority\"\r\n                     class=\"form-control\"\r\n                     formControlName=\"priority\"\r\n                     min=\"1\"\r\n                     max=\"100\"\r\n                     [class.is-invalid]=\"isFieldInvalid('priority')\">\r\n              @if (isFieldInvalid('priority')) {\r\n                <div class=\"invalid-feedback\">\r\n                  {{ getFieldError('priority') }}\r\n                </div>\r\n              }\r\n              <div class=\"form-text\">{{ t('settings.holidays.priorityHelp') }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Additional Settings -->\r\n        <div class=\"row\">\r\n          <div class=\"col-12\">\r\n            <h5 class=\"mb-3\">{{ t('settings.holidays.additionalSettings') }}</h5>\r\n          </div>\r\n\r\n          <div class=\"col-md-6\">\r\n            <!-- Scope -->\r\n            <div class=\"mb-3\">\r\n              <div class=\"form-check form-switch\">\r\n                <input class=\"form-check-input\"\r\n                       type=\"checkbox\"\r\n                       id=\"isNational\"\r\n                       formControlName=\"isNational\">\r\n                <label class=\"form-check-label\" for=\"isNational\">\r\n                  {{ t('settings.holidays.isNational') }}\r\n                </label>\r\n              </div>\r\n              <div class=\"form-text\">{{ t('settings.holidays.isNationalHelp') }}</div>\r\n            </div>\r\n\r\n            <!-- Active Status -->\r\n            <div class=\"mb-3\">\r\n              <div class=\"form-check form-switch\">\r\n                <input class=\"form-check-input\"\r\n                       type=\"checkbox\"\r\n                       id=\"isActive\"\r\n                       formControlName=\"isActive\">\r\n                <label class=\"form-check-label\" for=\"isActive\">\r\n                  {{ t('settings.holidays.isActive') }}\r\n                </label>\r\n              </div>\r\n              <div class=\"form-text\">{{ t('settings.holidays.isActiveHelp') }}</div>\r\n            </div>\r\n\r\n            <!-- Country Code -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"countryCode\" class=\"form-label\">{{ t('settings.holidays.countryCode') }}</label>\r\n              <input type=\"text\"\r\n                     id=\"countryCode\"\r\n                     class=\"form-control\"\r\n                     formControlName=\"countryCode\"\r\n                     [class.is-invalid]=\"isFieldInvalid('countryCode')\"\r\n                     [placeholder]=\"t('settings.holidays.countryCodePlaceholder')\">\r\n              @if (isFieldInvalid('countryCode')) {\r\n                <div class=\"invalid-feedback\">\r\n                  {{ getFieldError('countryCode') }}\r\n                </div>\r\n              }\r\n              <div class=\"form-text\">{{ t('settings.holidays.countryCodeHelp') }}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"col-md-6\">\r\n            <!-- Effective From Year -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"effectiveFromYear\" class=\"form-label\">{{ t('settings.holidays.effectiveFromYear') }}</label>\r\n              <select id=\"effectiveFromYear\"\r\n                      class=\"form-select\"\r\n                      formControlName=\"effectiveFromYear\"\r\n                      [class.is-invalid]=\"isFieldInvalid('effectiveFromYear')\">\r\n                <option value=\"\">{{ t('settings.holidays.noLimit') }}</option>\r\n                @for (year of getYearOptions(); track year) {\r\n                  <option [value]=\"year\">{{ year }}</option>\r\n                }\r\n              </select>\r\n              @if (isFieldInvalid('effectiveFromYear')) {\r\n                <div class=\"invalid-feedback\">\r\n                  {{ getFieldError('effectiveFromYear') }}\r\n                </div>\r\n              }\r\n            </div>\r\n\r\n            <!-- Effective To Year -->\r\n            <div class=\"mb-3\">\r\n              <label for=\"effectiveToYear\" class=\"form-label\">{{ t('settings.holidays.effectiveToYear') }}</label>\r\n              <select id=\"effectiveToYear\"\r\n                      class=\"form-select\"\r\n                      formControlName=\"effectiveToYear\"\r\n                      [class.is-invalid]=\"isFieldInvalid('effectiveToYear')\">\r\n                <option value=\"\">{{ t('settings.holidays.noLimit') }}</option>\r\n                @for (year of getYearOptions(); track year) {\r\n                  <option [value]=\"year\">{{ year }}</option>\r\n                }\r\n              </select>\r\n              @if (isFieldInvalid('effectiveToYear')) {\r\n                <div class=\"invalid-feedback\">\r\n                  {{ getFieldError('effectiveToYear') }}\r\n                </div>\r\n              }\r\n            </div>\r\n\r\n            <!-- Branch (shown when not national) -->\r\n            @if (!holidayForm.get('isNational')?.value) {\r\n              <div class=\"mb-3\">\r\n                <label for=\"branchId\" class=\"form-label\">{{ t('settings.holidays.branch') }}</label>\r\n                <select id=\"branchId\"\r\n                        class=\"form-select\"\r\n                        formControlName=\"branchId\"\r\n                        [class.is-invalid]=\"isFieldInvalid('branchId')\">\r\n                  <option value=\"\">{{ t('common.select') }}</option>\r\n                  <!-- Branch options would be loaded from a branches service -->\r\n                </select>\r\n                @if (isFieldInvalid('branchId')) {\r\n                  <div class=\"invalid-feedback\">\r\n                    {{ getFieldError('branchId') }}\r\n                  </div>\r\n                }\r\n              </div>\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Form Actions -->\r\n        <div class=\"d-flex justify-content-end gap-2 mt-4\">\r\n          <button type=\"button\"\r\n                  class=\"btn btn-outline-secondary\"\r\n                  (click)=\"onCancel()\"\r\n                  [disabled]=\"submitting()\">\r\n            {{ t('common.cancel') }}\r\n          </button>\r\n          <button type=\"submit\"\r\n                  class=\"btn btn-primary\"\r\n                  [disabled]=\"submitting() || holidayForm.invalid\">\r\n            @if (submitting()) {\r\n              <span class=\"spinner-border spinner-border-sm me-1\" role=\"status\" aria-hidden=\"true\"></span>\r\n            }\r\n            {{ t('settings.holidays.createHoliday') }}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>"],
  "mappings": "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",
  "names": []
}
