{
  "version": 3,
  "sources": ["src/app/pages/roles/roles.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\nimport { Role, Permission, AssignPermissionRequest } from '../../shared/models/role.model';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RolesService {\n  private http = inject(HttpClient);\n  private baseUrl = `${environment.apiUrl}/api/v1/roles`;\n  private permissionsUrl = `${environment.apiUrl}/api/v1/permissions`;\n\n  getRoles(includePermissions: boolean = false): Observable<Role[]> {\n    let httpParams = new HttpParams();\n    if (includePermissions) {\n      httpParams = httpParams.set('includePermissions', 'true');\n    }\n    return this.http.get<Role[]>(this.baseUrl, { params: httpParams });\n  }\n\n  getRoleById(id: number): Observable<Role> {\n    return this.http.get<Role>(`${this.baseUrl}/${id}`);\n  }\n\n  getPermissions(group?: string): Observable<Permission[]> {\n    let httpParams = new HttpParams();\n    if (group) {\n      httpParams = httpParams.set('group', group);\n    }\n    return this.http.get<PermissionGroupDto[]>(this.permissionsUrl, { params: httpParams })\n      .pipe(\n        map(groups => {\n          // Flatten the grouped permissions into a single array\n          return groups.flatMap(group => group.permissions);\n        })\n      );\n  }\n\n  getGroupedPermissions(group?: string): Observable<PermissionGroupDto[]> {\n    let httpParams = new HttpParams();\n    if (group) {\n      httpParams = httpParams.set('group', group);\n    }\n    return this.http.get<PermissionGroupDto[]>(this.permissionsUrl, { params: httpParams });\n  }\n\n  assignPermissionToRole(roleId: number, request: AssignPermissionRequest): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/${roleId}/permissions`, request);\n  }\n\n  removePermissionFromRole(roleId: number, permissionId: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${roleId}/permissions/${permissionId}`);\n  }\n\n  createRole(roleData: CreateRoleRequest): Observable<Role> {\n    return this.http.post<Role>(this.baseUrl, roleData);\n  }\n\n  updateRole(roleId: number, roleData: UpdateRoleRequest): Observable<Role> {\n    return this.http.put<Role>(`${this.baseUrl}/${roleId}`, roleData);\n  }\n\n  deleteRole(roleId: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${roleId}`);\n  }\n}\n\nexport interface CreateRoleRequest {\n  name: string;\n  permissionIds: number[];\n}\n\nexport interface UpdateRoleRequest {\n  name: string;\n  permissionIds: number[];\n}\n\nexport interface PermissionGroupDto {\n  group: string;\n  permissions: Permission[];\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AASM,IAAO,gBAAP,MAAO,cAAY;EACf,OAAO,OAAO,UAAU;EACxB,UAAU,GAAG,YAAY,MAAM;EAC/B,iBAAiB,GAAG,YAAY,MAAM;EAE9C,SAAS,qBAA8B,OAAK;AAC1C,QAAI,aAAa,IAAI,WAAU;AAC/B,QAAI,oBAAoB;AACtB,mBAAa,WAAW,IAAI,sBAAsB,MAAM;IAC1D;AACA,WAAO,KAAK,KAAK,IAAY,KAAK,SAAS,EAAE,QAAQ,WAAU,CAAE;EACnE;EAEA,YAAY,IAAU;AACpB,WAAO,KAAK,KAAK,IAAU,GAAG,KAAK,OAAO,IAAI,EAAE,EAAE;EACpD;EAEA,eAAe,OAAc;AAC3B,QAAI,aAAa,IAAI,WAAU;AAC/B,QAAI,OAAO;AACT,mBAAa,WAAW,IAAI,SAAS,KAAK;IAC5C;AACA,WAAO,KAAK,KAAK,IAA0B,KAAK,gBAAgB,EAAE,QAAQ,WAAU,CAAE,EACnF,KACC,IAAI,YAAS;AAEX,aAAO,OAAO,QAAQ,CAAAA,WAASA,OAAM,WAAW;IAClD,CAAC,CAAC;EAER;EAEA,sBAAsB,OAAc;AAClC,QAAI,aAAa,IAAI,WAAU;AAC/B,QAAI,OAAO;AACT,mBAAa,WAAW,IAAI,SAAS,KAAK;IAC5C;AACA,WAAO,KAAK,KAAK,IAA0B,KAAK,gBAAgB,EAAE,QAAQ,WAAU,CAAE;EACxF;EAEA,uBAAuB,QAAgB,SAAgC;AACrE,WAAO,KAAK,KAAK,KAAW,GAAG,KAAK,OAAO,IAAI,MAAM,gBAAgB,OAAO;EAC9E;EAEA,yBAAyB,QAAgB,cAAoB;AAC3D,WAAO,KAAK,KAAK,OAAa,GAAG,KAAK,OAAO,IAAI,MAAM,gBAAgB,YAAY,EAAE;EACvF;EAEA,WAAW,UAA2B;AACpC,WAAO,KAAK,KAAK,KAAW,KAAK,SAAS,QAAQ;EACpD;EAEA,WAAW,QAAgB,UAA2B;AACpD,WAAO,KAAK,KAAK,IAAU,GAAG,KAAK,OAAO,IAAI,MAAM,IAAI,QAAQ;EAClE;EAEA,WAAW,QAAc;AACvB,WAAO,KAAK,KAAK,OAAa,GAAG,KAAK,OAAO,IAAI,MAAM,EAAE;EAC3D;;AAzDuB;cAAZ;mCAAA,eAAY;AAAA;cAAZ,mFAAA,eAAY,SAAZ,cAAY,WAAA,YAFX,OAAM,CAAA;AAEd,IAAO,eAAP;;sEAAO,cAAY,CAAA;UAHxB;WAAW;MACV,YAAY;KACb;;;",
  "names": ["group"]
}
