import{a as s}from"./chunk-RUY4WPQA.js";import{Bc as o,Cc as g,M as f,R as h,k as y,n as p,x as m}from"./chunk-JSQL33QG.js";var H=(a=>(a[a.OneTime=0]="OneTime",a[a.Annual=1]="Annual",a[a.Monthly=2]="Monthly",a[a.Floating=3]="Floating",a))(H||{}),v=(t=>(t.USA_Federal="USA_Federal",t.UK_BankHolidays="UK_BankHolidays",t.SaudiArabia_National="SaudiArabia_National",t))(v||{});var P=class l{http=h(g);baseUrl=`${s.apiUrl}/api/v1/public-holidays`;getPublicHolidays(e=1,i=10,t,a,r,d,b,u,c){let n=new o().set("page",e.toString()).set("pageSize",i.toString());return t&&(n=n.set("searchTerm",t)),a!==void 0&&(n=n.set("year",a.toString())),r!==void 0&&(n=n.set("branchId",r.toString())),d!==void 0&&(n=n.set("holidayType",d.toString())),b!==void 0&&(n=n.set("isActive",b.toString())),u!==void 0&&(n=n.set("isNational",u.toString())),c&&(n=n.set("countryCode",c)),this.http.get(this.baseUrl,{params:n})}getPublicHolidayById(e,i=!1,t){let a=new o;return i&&(a=a.set("includeConflicts","true")),t!==void 0&&(a=a.set("year",t.toString())),this.http.get(`${this.baseUrl}/${e}`,{params:a})}createPublicHoliday(e){return console.log("Creating public holiday with request:",e),console.log("Request URL:",this.baseUrl),console.log("Request payload (stringified):",JSON.stringify(e)),this.http.post(this.baseUrl,e)}updatePublicHoliday(e,i){return this.http.put(`${this.baseUrl}/${e}`,i)}deletePublicHoliday(e){return this.http.delete(`${this.baseUrl}/${e}`)}getHolidayCalendar(e,i,t=!1,a){let r=new o;return i!==void 0&&(r=r.set("branchId",i.toString())),t&&(r=r.set("includeInactive","true")),a&&(r=r.set("format",a)),this.http.get(`${this.baseUrl}/calendar/${e}`,{params:r})}getHolidayDates(e,i,t){let a=new o;return t!==void 0&&(a=a.set("branchId",t.toString())),this.http.get(`${this.baseUrl}/dates/${e}/${i}`,{params:a})}importHolidayTemplate(e){return this.http.post(`${this.baseUrl}/import`,e)}exportHolidays(e,i="json",t,a=!1){let r=new o().set("format",i);return t!==void 0&&(r=r.set("branchId",t.toString())),a&&(r=r.set("includeInactive","true")),this.http.get(`${this.baseUrl}/export/${e}`,{params:r,responseType:"blob"})}isHoliday(e,i){let t=new o().set("date",e);return i!==void 0&&(t=t.set("branchId",i.toString())),this.http.get(`${this.baseUrl}/is-holiday`,{params:t})}getAvailableTemplates(){return["USA_Federal","UK_BankHolidays","SaudiArabia_National"]}getHolidayTypes(){return[{value:0,label:"One Time",description:"Holiday occurs only once on a specific date"},{value:1,label:"Annual",description:"Holiday occurs every year on the same date"},{value:2,label:"Monthly",description:"Holiday occurs every month on the same day"},{value:3,label:"Floating",description:"Holiday occurs on a relative date (e.g., first Monday of March)"}]}getBranches(){return this.http.get(`${s.apiUrl}/api/v1/branches/all`).pipe(p(e=>e.value),m(e=>(console.error("Failed to load branches:",e),y(()=>e))))}validateHolidayData(e){let i=[];return(!e.name||e.name.trim().length===0)&&i.push("Holiday name is required"),(e.holidayType===0||e.holidayType===1)&&!e.specificDate&&(!e.month||!e.day)&&i.push("Specific date or month/day is required for this holiday type"),e.holidayType===3&&(!e.weekOfMonth||!e.dayOfWeek||!e.month)&&i.push("Week of month, day of week, and month are required for floating holidays"),e.effectiveFromYear&&e.effectiveToYear&&e.effectiveFromYear>e.effectiveToYear&&i.push("Effective from year cannot be after effective to year"),e.priority!==void 0&&(e.priority<1||e.priority>100)&&i.push("Priority must be between 1 and 100"),i}static \u0275fac=function(i){return new(i||l)};static \u0275prov=f({token:l,factory:l.\u0275fac,providedIn:"root"})};export{H as a,v as b,P as c};
