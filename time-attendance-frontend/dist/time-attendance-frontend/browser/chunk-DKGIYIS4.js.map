{
  "version": 3,
  "sources": ["src/app/shared/utils/permission.utils.ts", "src/app/core/auth/permission.service.ts"],
  "sourcesContent": ["export const PermissionActions = {\n  READ: 'read',\n  CREATE: 'create',\n  UPDATE: 'update',\n  DELETE: 'delete',\n  EXPORT: 'export',\n  IMPORT: 'import',\n  APPROVE: 'approve',\n  REJECT: 'reject',\n  LOCK: 'lock',\n  UNLOCK: 'unlock',\n  RESET_PASSWORD: 'resetPassword',\n  ASSIGN_ROLE: 'assignRole',\n  REMOVE_ROLE: 'removeRole',\n  ASSIGN_PERMISSION: 'assignPermission',\n  REMOVE_PERMISSION: 'removePermission',\n  VIEW: 'view',\n  DOWNLOAD: 'download',\n  UPLOAD: 'upload',\n  ARCHIVE: 'archive',\n  RESTORE: 'restore',\n  ACTIVATE: 'activate',\n  DEACTIVATE: 'deactivate',\n  ASSIGN: 'assign',\n  UNASSIGN: 'unassign',\n  MANAGE: 'manage',\n  CONFIGURE: 'configure',\n  BULK_CREATE: 'bulkCreate',\n} as const;\n\nexport const PermissionResources = {\n  USER: 'user',\n  ROLE: 'role',\n  EMPLOYEE: 'employee',\n  BRANCH: 'branch',\n  DEPARTMENT: 'department',\n  SHIFT: 'shift',\n  ATTENDANCE: 'attendance',\n  SCHEDULE: 'schedule',\n  REPORT: 'report',\n  SETTINGS: 'settings',\n  DASHBOARD: 'dashboard',\n  PERMISSION: 'permission',\n  AUDIT: 'audit',\n  NOTIFICATION: 'notification',\n  SYSTEM: 'system',\n  VACATION_TYPE: 'vacationType',\n  VACATION: 'vacation',\n  EXCUSE: 'excuse'\n} as const;\n\nexport const ActionDescriptions: Record<string, string> = {\n  [PermissionActions.READ]: 'View and read data',\n  [PermissionActions.CREATE]: 'Create new records',\n  [PermissionActions.UPDATE]: 'Modify existing records',\n  [PermissionActions.DELETE]: 'Remove records permanently',\n  [PermissionActions.EXPORT]: 'Export data to external formats',\n  [PermissionActions.IMPORT]: 'Import data from external sources',\n  [PermissionActions.APPROVE]: 'Approve pending requests or changes',\n  [PermissionActions.REJECT]: 'Reject pending requests or changes',\n  [PermissionActions.LOCK]: 'Lock or disable accounts',\n  [PermissionActions.UNLOCK]: 'Unlock or enable accounts',\n  [PermissionActions.RESET_PASSWORD]: 'Reset user passwords',\n  [PermissionActions.ASSIGN_ROLE]: 'Assign roles to users',\n  [PermissionActions.REMOVE_ROLE]: 'Remove roles from users',\n  [PermissionActions.ASSIGN_PERMISSION]: 'Assign permissions to roles',\n  [PermissionActions.REMOVE_PERMISSION]: 'Remove permissions from roles',\n  [PermissionActions.VIEW]: 'View detailed information',\n  [PermissionActions.DOWNLOAD]: 'Download files or data',\n  [PermissionActions.UPLOAD]: 'Upload files or data',\n  [PermissionActions.ARCHIVE]: 'Archive records for long-term storage',\n  [PermissionActions.RESTORE]: 'Restore archived or deleted records',\n  [PermissionActions.ACTIVATE]: 'Activate inactive records',\n  [PermissionActions.DEACTIVATE]: 'Deactivate active records',\n  [PermissionActions.ASSIGN]: 'Assign resources or relationships',\n  [PermissionActions.UNASSIGN]: 'Remove resource assignments',\n  [PermissionActions.MANAGE]: 'Full management capabilities',\n  [PermissionActions.CONFIGURE]: 'Configure settings and parameters',\n  [PermissionActions.BULK_CREATE]: 'Create multiple records in bulk operations',\n};\n\nexport const ResourceDescriptions: Record<string, string> = {\n  [PermissionResources.USER]: 'User accounts and profiles',\n  [PermissionResources.ROLE]: 'User roles and access levels',\n  [PermissionResources.EMPLOYEE]: 'Employee records and information',\n  [PermissionResources.BRANCH]: 'Company branches and locations',\n  [PermissionResources.DEPARTMENT]: 'Organizational departments',\n  [PermissionResources.SHIFT]: 'Work shifts and time periods',\n  [PermissionResources.ATTENDANCE]: 'Time tracking and attendance records',\n  [PermissionResources.SCHEDULE]: 'Work schedules and shift management',\n  [PermissionResources.REPORT]: 'Reports and analytics',\n  [PermissionResources.SETTINGS]: 'System configuration and settings',\n  [PermissionResources.DASHBOARD]: 'Dashboard views and widgets',\n  [PermissionResources.PERMISSION]: 'Permission management',\n  [PermissionResources.AUDIT]: 'Audit logs and security tracking',\n  [PermissionResources.NOTIFICATION]: 'System notifications and alerts',\n  [PermissionResources.SYSTEM]: 'Core system functions',\n  [PermissionResources.VACATION_TYPE]: 'Vacation types and leave policies',\n  [PermissionResources.VACATION]: 'Employee vacation records and management',\n  [PermissionResources.EXCUSE]: 'Employee excuse management and approval'\n};\n\nexport const ActionColors: Record<string, string> = {\n  [PermissionActions.READ]: 'info',\n  [PermissionActions.VIEW]: 'info',\n  [PermissionActions.CREATE]: 'success',\n  [PermissionActions.UPDATE]: 'warning',\n  [PermissionActions.DELETE]: 'danger',\n  [PermissionActions.EXPORT]: 'primary',\n  [PermissionActions.IMPORT]: 'secondary',\n  [PermissionActions.DOWNLOAD]: 'primary',\n  [PermissionActions.UPLOAD]: 'secondary',\n  [PermissionActions.APPROVE]: 'success',\n  [PermissionActions.REJECT]: 'danger',\n  [PermissionActions.LOCK]: 'danger',\n  [PermissionActions.UNLOCK]: 'success',\n  [PermissionActions.RESET_PASSWORD]: 'warning',\n  [PermissionActions.ASSIGN_ROLE]: 'info',\n  [PermissionActions.REMOVE_ROLE]: 'warning',\n  [PermissionActions.ASSIGN_PERMISSION]: 'info',\n  [PermissionActions.REMOVE_PERMISSION]: 'warning',\n  [PermissionActions.ARCHIVE]: 'secondary',\n  [PermissionActions.RESTORE]: 'success',\n  [PermissionActions.ACTIVATE]: 'success',\n  [PermissionActions.DEACTIVATE]: 'warning',\n  [PermissionActions.ASSIGN]: 'info',\n  [PermissionActions.UNASSIGN]: 'warning',\n  [PermissionActions.MANAGE]: 'primary',\n  [PermissionActions.CONFIGURE]: 'primary',\n  [PermissionActions.BULK_CREATE]: 'primary'\n};\n\nexport const ResourceIcons: Record<string, string> = {\n  [PermissionResources.USER]: 'fa-user',\n  [PermissionResources.ROLE]: 'fa-user-shield',\n  [PermissionResources.EMPLOYEE]: 'fa-users',\n  [PermissionResources.BRANCH]: 'fa-building',\n  [PermissionResources.DEPARTMENT]: 'fa-sitemap',\n  [PermissionResources.SHIFT]: 'fa-clock',\n  [PermissionResources.ATTENDANCE]: 'fa-user-clock',\n  [PermissionResources.SCHEDULE]: 'fa-calendar-alt',\n  [PermissionResources.REPORT]: 'fa-chart-bar',\n  [PermissionResources.SETTINGS]: 'fa-cog',\n  [PermissionResources.DASHBOARD]: 'fa-tachometer-alt',\n  [PermissionResources.PERMISSION]: 'fa-key',\n  [PermissionResources.AUDIT]: 'fa-history',\n  [PermissionResources.NOTIFICATION]: 'fa-bell',\n  [PermissionResources.SYSTEM]: 'fa-server',\n  [PermissionResources.VACATION_TYPE]: 'fa-calendar-times',\n  [PermissionResources.VACATION]: 'fa-calendar-week',\n  [PermissionResources.EXCUSE]: 'fa-clipboard-check'\n};\n\nexport interface PermissionInfo {\n  resource: string;\n  action: string;\n  key: string;\n}\n\nexport class PermissionUtils {\n  static parsePermissionKey(key: string): PermissionInfo {\n    if (!key || typeof key !== 'string') {\n      return {\n        resource: '',\n        action: '',\n        key: ''\n      };\n    }\n    const parts = key.split('.', 2);\n    if (parts.length === 2) {\n      return {\n        resource: parts[0],\n        action: parts[1],\n        key\n      };\n    }\n    return {\n      resource: key,\n      action: '',\n      key\n    };\n  }\n\n  static buildPermissionKey(resource: string, action: string): string {\n    return `${resource}.${action}`;\n  }\n\n  static getResourceName(resource: string): string {\n    return resource.charAt(0).toUpperCase() + resource.slice(1);\n  }\n\n  static getActionName(action: string): string {\n    // Handle camelCase actions like 'resetPassword'\n    const result = action.replace(/([A-Z])/g, ' $1');\n    return result.charAt(0).toUpperCase() + result.slice(1);\n  }\n\n  static getActionDescription(action: string): string {\n    return ActionDescriptions[action] || this.getActionName(action);\n  }\n\n  static getResourceDescription(resource: string): string {\n    return ResourceDescriptions[resource] || this.getResourceName(resource);\n  }\n\n  static getActionColor(action: string): string {\n    return ActionColors[action] || 'light';\n  }\n\n  static getResourceIcon(resource: string): string {\n    return ResourceIcons[resource] || 'fa-question';\n  }\n\n  static getActionBadgeClass(action: string): string {\n    const color = this.getActionColor(action);\n    return `bg-${color}-subtle text-${color}`;\n  }\n\n  static formatPermissionDisplay(key: string): { resource: string; action: string; color: string; icon: string } {\n    const { resource, action } = this.parsePermissionKey(key);\n    return {\n      resource: this.getResourceName(resource),\n      action: this.getActionName(action),\n      color: this.getActionColor(action),\n      icon: this.getResourceIcon(resource)\n    };\n  }\n}", "import { Injectable, computed } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { PermissionUtils, PermissionResources, PermissionActions } from '../../shared/utils/permission.utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PermissionService {\n  private userPermissions = computed(() => {\n    const user = this.authService.currentUser();\n    return user?.permissions || [];\n  });\n\n  constructor(private authService: AuthService) {}\n\n  has(permission: string): boolean {\n    const permissions = this.userPermissions();\n    return permissions.includes(permission) || permissions.includes('*');\n  }\n\n  hasAny(permissions: string[]): boolean {\n    return permissions.some(permission => this.has(permission));\n  }\n\n  hasAll(permissions: string[]): boolean {\n    return permissions.every(permission => this.has(permission));\n  }\n\n  hasRole(role: string): boolean {\n    const user = this.authService.currentUser();\n    return user?.roles?.includes(role) || false;\n  }\n\n  isAdmin(): boolean {\n    return this.hasRole('Admin');\n  }\n\n  isSuperAdmin(): boolean {\n    return this.hasRole('SuperAdmin');\n  }\n\n  canAccessBranch(branchId: number): boolean {\n    const user = this.authService.currentUser();\n    if (!user?.branchIds || user.branchIds.length === 0) {\n      return true; // No branch restriction\n    }\n    return user.branchIds.includes(branchId);\n  }\n\n  // Enhanced permission checking methods using PermissionUtils\n  canRead(resource: string): boolean {\n    return this.has(PermissionUtils.buildPermissionKey(resource, PermissionActions.READ));\n  }\n\n  canCreate(resource: string): boolean {\n    return this.has(PermissionUtils.buildPermissionKey(resource, PermissionActions.CREATE));\n  }\n\n  canUpdate(resource: string): boolean {\n    return this.has(PermissionUtils.buildPermissionKey(resource, PermissionActions.UPDATE));\n  }\n\n  canDelete(resource: string): boolean {\n    return this.has(PermissionUtils.buildPermissionKey(resource, PermissionActions.DELETE));\n  }\n\n  canExport(resource: string): boolean {\n    return this.has(PermissionUtils.buildPermissionKey(resource, PermissionActions.EXPORT));\n  }\n\n  canImport(resource: string): boolean {\n    return this.has(PermissionUtils.buildPermissionKey(resource, PermissionActions.IMPORT));\n  }\n\n  canManage(resource: string): boolean {\n    return this.has(PermissionUtils.buildPermissionKey(resource, PermissionActions.MANAGE));\n  }\n\n  // Resource-specific helper methods\n  canManageUsers(): boolean {\n    return this.hasAny([\n      PermissionUtils.buildPermissionKey(PermissionResources.USER, PermissionActions.CREATE),\n      PermissionUtils.buildPermissionKey(PermissionResources.USER, PermissionActions.UPDATE),\n      PermissionUtils.buildPermissionKey(PermissionResources.USER, PermissionActions.DELETE),\n      PermissionUtils.buildPermissionKey(PermissionResources.USER, PermissionActions.MANAGE)\n    ]);\n  }\n\n  canManageRoles(): boolean {\n    return this.hasAny([\n      PermissionUtils.buildPermissionKey(PermissionResources.ROLE, PermissionActions.CREATE),\n      PermissionUtils.buildPermissionKey(PermissionResources.ROLE, PermissionActions.UPDATE),\n      PermissionUtils.buildPermissionKey(PermissionResources.ROLE, PermissionActions.DELETE),\n      PermissionUtils.buildPermissionKey(PermissionResources.ROLE, PermissionActions.MANAGE)\n    ]);\n  }\n\n  canManageEmployees(): boolean {\n    return this.hasAny([\n      PermissionUtils.buildPermissionKey(PermissionResources.EMPLOYEE, PermissionActions.CREATE),\n      PermissionUtils.buildPermissionKey(PermissionResources.EMPLOYEE, PermissionActions.UPDATE),\n      PermissionUtils.buildPermissionKey(PermissionResources.EMPLOYEE, PermissionActions.DELETE),\n      PermissionUtils.buildPermissionKey(PermissionResources.EMPLOYEE, PermissionActions.MANAGE)\n    ]);\n  }\n\n  canAccessShifts(): boolean {\n    return this.hasAny([\n      'shift.read',\n      'shift.create',\n      'shift.update',\n      'shift.delete',\n      'shift.assign',\n      'shift.unassign',\n      'shift.export',\n      'shift.import'\n    ]);\n  }\n\n\n  // ==== POLICY-BASED AUTHORIZATION METHODS (Mirroring Backend Policies) ====\n\n  // Employee Management Policies\n  canReadEmployees(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.isManager() ||\n           this.has('employee.read');\n  }\n\n  canManageEmployeesPolicy(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'employee.create',\n             'employee.update',\n             'employee.delete',\n             'employee.manage'\n           ]);\n  }\n\n  canAssignEmployeeShifts(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.isManager() ||\n           this.has('employee.assign');\n  }\n\n  // User Management Policies\n  canReadUsers(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.has('user.read');\n  }\n\n  canManageUsersPolicy(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'user.create',\n             'user.update',\n             'user.delete',\n             'user.manage'\n           ]);\n  }\n\n  canAssignUserRoles(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'user.assignRole',\n             'user.removeRole'\n           ]);\n  }\n\n  canManageUserSessions(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.has('user.session.manage');\n  }\n\n  // Shift Management Policies\n  canReadShifts(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.isManager() ||\n           this.has('shift.read');\n  }\n\n  canManageShiftsPolicy(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'shift.create',\n             'shift.update',\n             'shift.delete',\n             'shift.manage'\n           ]);\n  }\n\n  // Branch Management Policies\n  canReadBranches(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.isManager() ||\n           this.has('branch.read');\n  }\n\n  canManageBranches(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'branch.create',\n             'branch.update',\n             'branch.delete',\n             'branch.manage'\n           ]);\n  }\n\n  // Department Management Policies\n  canReadDepartments(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.isManager() ||\n           this.has('department.read');\n  }\n\n  canManageDepartments(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'department.create',\n             'department.update',\n             'department.delete',\n             'department.manage'\n           ]);\n  }\n\n  // Role and Permission Management Policies\n  canReadRoles(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.has('role.read');\n  }\n\n  canManageRolesPolicy(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'role.create',\n             'role.update',\n             'role.delete',\n             'role.manage'\n           ]);\n  }\n\n  canManagePermissions(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'permission.assign',\n             'permission.remove',\n             'permission.manage'\n           ]);\n  }\n\n  // Attendance Management Policies\n  canReadAttendance(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.isManager() ||\n           this.has('attendance.read');\n  }\n\n  canManageAttendance(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'attendance.create',\n             'attendance.update',\n             'attendance.delete',\n             'attendance.manage'\n           ]);\n  }\n\n  // Settings Management Policies\n  canReadSettings(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.has('settings.read');\n  }\n\n  canManageSettings(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'settings.create',\n             'settings.update',\n             'settings.delete',\n             'settings.manage'\n           ]);\n  }\n\n  // Report Access Policies\n  canAccessReports(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.isManager() ||\n           this.hasAny([\n             'report.read',\n             'report.view',\n             'report.access'\n           ]);\n  }\n\n  // Security and Audit Policies\n  canAccessSecurityAudit(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'audit.read',\n             'audit.view',\n             'security.audit'\n           ]);\n  }\n\n  canSystemAdministration(): boolean {\n    return this.isSystemAdmin() ||\n           this.hasAny([\n             'system.admin',\n             'system.configure',\n             'system.manage'\n           ]);\n  }\n\n  // Public Holidays Management Policies\n  canReadPublicHolidays(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.has('publicHoliday.read');\n  }\n\n  canManagePublicHolidays(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.hasAny([\n             'publicHoliday.create',\n             'publicHoliday.update',\n             'publicHoliday.delete',\n             'publicHoliday.manage'\n           ]);\n  }\n\n  canExportPublicHolidays(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.has('publicHoliday.export');\n  }\n\n  canImportPublicHolidays(): boolean {\n    return this.isSystemAdmin() ||\n           this.isAdmin() ||\n           this.has('publicHoliday.import');\n  }\n\n\n  // Role-based Helper Methods\n  private isSystemAdmin(): boolean {\n    return this.hasRole('SystemAdmin');\n  }\n\n  private isManager(): boolean {\n    return this.hasRole('Manager');\n  }\n\n  private isEmployee(): boolean {\n    return this.hasRole('Employee');\n  }\n\n  /**\n   * Get current user\n   */\n  getCurrentUser() {\n    return this.authService.currentUser();\n  }\n\n  /**\n   * Get current employee (alias for getCurrentUser)\n   */\n  getCurrentEmployee() {\n    return this.authService.currentUser();\n  }\n}"],
  "mappings": "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",
  "names": []
}
