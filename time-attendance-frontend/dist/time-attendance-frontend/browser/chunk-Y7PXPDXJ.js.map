{
  "version": 3,
  "sources": ["src/app/pages/branches/edit-branch/edit-branch.component.ts"],
  "sourcesContent": ["import { Component, OnInit, signal, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { BranchesService } from '../branches.service';\nimport { Branch } from '../../../shared/models/branch.model';\nimport { I18nService } from '../../../core/i18n/i18n.service';\n// import { TIMEZONE_LIST } from '../../../shared/constants/timezone.constants';\n\n@Component({\n  selector: 'app-edit-branch',\n  standalone: true,\n  imports: [CommonModule, RouterModule, ReactiveFormsModule],\n  template: `\n    <div class=\"container-fluid\">\n      <!-- Header -->\n      <div class=\"d-flex justify-content-between align-items-center mb-4\">\n        <div>\n          <h2>{{ i18n.t('branches.edit_branch') }}</h2>\n          <nav aria-label=\"breadcrumb\">\n            <ol class=\"breadcrumb\">\n              <li class=\"breadcrumb-item\">\n                <a routerLink=\"/dashboard\">{{ i18n.t('dashboard.title') }}</a>\n              </li>\n              <li class=\"breadcrumb-item\">\n                <a routerLink=\"/branches\">{{ i18n.t('branches.title') }}</a>\n              </li>\n              <li class=\"breadcrumb-item active\">{{ i18n.t('branches.edit_branch') }}</li>\n            </ol>\n          </nav>\n        </div>\n        <button \n          type=\"button\" \n          class=\"btn btn-outline-secondary\"\n          (click)=\"onCancel()\"\n          [disabled]=\"saving()\">\n          <i class=\"fa-solid fa-arrow-left me-2\"></i>\n          {{ i18n.t('common.back') }}\n        </button>\n      </div>\n\n      @if (loading()) {\n        <div class=\"d-flex justify-content-center py-5\">\n          <div class=\"spinner-border\" role=\"status\">\n            <span class=\"visually-hidden\">{{ i18n.t('common.loading') }}</span>\n          </div>\n        </div>\n      } @else if (branch()) {\n        <!-- Main Form Card -->\n        <div class=\"card\">\n          <div class=\"card-header\">\n            <h5 class=\"card-title mb-0\">\n              <i class=\"fa-solid fa-building me-2\"></i>\n              {{ i18n.t('branches.branch_information') }}\n            </h5>\n          </div>\n          <div class=\"card-body\">\n            <form [formGroup]=\"branchForm\" (ngSubmit)=\"onSubmit()\">\n              @if (error()) {\n                <div class=\"alert alert-danger\" role=\"alert\">\n                  <i class=\"fa-solid fa-exclamation-triangle me-2\"></i>\n                  {{ error() }}\n                </div>\n              }\n\n              <!-- Basic Information Section -->\n              <div class=\"mb-4\">\n                <h6 class=\"text-primary mb-3\">\n                  <i class=\"fa-solid fa-info-circle me-2\"></i>\n                  {{ i18n.t('branches.basic_information') }}\n                </h6>\n                <div class=\"row g-3\">\n                  <!-- Branch Name -->\n                  <div class=\"col-md-6\">\n                    <label class=\"form-label\">\n                      {{ i18n.t('branches.name') }}\n                      <span class=\"text-danger\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      formControlName=\"name\"\n                      [class.is-invalid]=\"isFieldInvalid('name')\"\n                      [placeholder]=\"i18n.t('branches.name_placeholder')\"\n                    />\n                    @if (isFieldInvalid('name')) {\n                      <div class=\"invalid-feedback\">{{ getFieldError('name') }}</div>\n                    }\n                  </div>\n\n                  <!-- Branch Code -->\n                  <div class=\"col-md-6\">\n                    <label class=\"form-label\">\n                      {{ i18n.t('branches.code') }}\n                      <span class=\"text-danger\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      formControlName=\"code\"\n                      [class.is-invalid]=\"isFieldInvalid('code')\"\n                      [placeholder]=\"i18n.t('branches.code_placeholder')\"\n                      style=\"text-transform: uppercase;\"\n                    />\n                    @if (isFieldInvalid('code')) {\n                      <div class=\"invalid-feedback\">{{ getFieldError('code') }}</div>\n                    }\n                    <div class=\"form-text\">{{ i18n.t('branches.code_hint') }}</div>\n                  </div>\n\n                  <!-- Timezone -->\n                  <div class=\"col-md-6\">\n                    <label class=\"form-label\">\n                      {{ i18n.t('branches.timezone') }}\n                      <span class=\"text-danger\">*</span>\n                    </label>\n                    <select\n                      class=\"form-select\"\n                      formControlName=\"timezone\"\n                      [class.is-invalid]=\"isFieldInvalid('timezone')\"\n                    >\n                      <option value=\"\">{{ i18n.t('branches.select_timezone') }}</option>\n                      @for (timezone of timezones; track timezone.value) {\n                        <option [value]=\"timezone.value\">{{ timezone.label }}</option>\n                      }\n                    </select>\n                    @if (isFieldInvalid('timezone')) {\n                      <div class=\"invalid-feedback\">{{ getFieldError('timezone') }}</div>\n                    }\n                  </div>\n\n                  <!-- Status -->\n                  <div class=\"col-md-6\">\n                    <label class=\"form-label\">{{ i18n.t('common.status') }}</label>\n                    <div class=\"form-check form-switch mt-2\">\n                      <input\n                        class=\"form-check-input\"\n                        type=\"checkbox\"\n                        role=\"switch\"\n                        id=\"isActiveSwitch\"\n                        formControlName=\"isActive\"\n                      />\n                      <label class=\"form-check-label\" for=\"isActiveSwitch\">\n                        {{ i18n.t('common.active') }}\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <hr>\n\n              <!-- Contact Information Section -->\n              <div class=\"mb-4\">\n                <h6 class=\"text-secondary mb-3\">\n                  <i class=\"fa-solid fa-address-book me-2\"></i>\n                  {{ i18n.t('branches.contact_information') }}\n                </h6>\n                <div class=\"row g-3\">\n                  <!-- Phone -->\n                  <div class=\"col-md-6\">\n                    <label class=\"form-label\">{{ i18n.t('common.phone') }}</label>\n                    <input\n                      type=\"tel\"\n                      class=\"form-control\"\n                      formControlName=\"phone\"\n                      [class.is-invalid]=\"isFieldInvalid('phone')\"\n                      [placeholder]=\"i18n.t('common.phone_placeholder')\"\n                    />\n                    @if (isFieldInvalid('phone')) {\n                      <div class=\"invalid-feedback\">{{ getFieldError('phone') }}</div>\n                    }\n                  </div>\n\n                  <!-- Email -->\n                  <div class=\"col-md-6\">\n                    <label class=\"form-label\">{{ i18n.t('common.email') }}</label>\n                    <input\n                      type=\"email\"\n                      class=\"form-control\"\n                      formControlName=\"email\"\n                      [class.is-invalid]=\"isFieldInvalid('email')\"\n                      [placeholder]=\"i18n.t('common.email_placeholder')\"\n                    />\n                    @if (isFieldInvalid('email')) {\n                      <div class=\"invalid-feedback\">{{ getFieldError('email') }}</div>\n                    }\n                  </div>\n\n                  <!-- Address -->\n                  <div class=\"col-12\">\n                    <label class=\"form-label\">{{ i18n.t('branches.address') }}</label>\n                    <textarea\n                      class=\"form-control\"\n                      formControlName=\"address\"\n                      [class.is-invalid]=\"isFieldInvalid('address')\"\n                      [placeholder]=\"i18n.t('branches.address_placeholder')\"\n                      rows=\"3\"\n                    ></textarea>\n                    @if (isFieldInvalid('address')) {\n                      <div class=\"invalid-feedback\">{{ getFieldError('address') }}</div>\n                    }\n                  </div>\n\n                  <!-- Description -->\n                  <div class=\"col-12\">\n                    <label class=\"form-label\">{{ i18n.t('common.description') }}</label>\n                    <textarea\n                      class=\"form-control\"\n                      formControlName=\"description\"\n                      [class.is-invalid]=\"isFieldInvalid('description')\"\n                      [placeholder]=\"i18n.t('branches.description_placeholder')\"\n                      rows=\"3\"\n                    ></textarea>\n                    @if (isFieldInvalid('description')) {\n                      <div class=\"invalid-feedback\">{{ getFieldError('description') }}</div>\n                    }\n                  </div>\n                </div>\n              </div>\n\n              <!-- Validation Info -->\n              <div class=\"alert alert-info\">\n                <h6 class=\"alert-heading\">\n                  <i class=\"fa-solid fa-info-circle me-2\"></i>\n                  {{ i18n.t('branches.validation_rules.title') }}\n                </h6>\n                <ul class=\"mb-0\">\n                  <li>{{ i18n.t('branches.validation_rules.name') }}</li>\n                  <li>{{ i18n.t('branches.validation_rules.code') }}</li>\n                  <li>{{ i18n.t('branches.validation_rules.timezone') }}</li>\n                  <li>{{ i18n.t('branches.validation_rules.email') }}</li>\n                  <li>{{ i18n.t('branches.validation_rules.phone') }}</li>\n                </ul>\n              </div>\n\n              <!-- Form Actions -->\n              <div class=\"d-flex justify-content-end gap-2 mt-4\">\n                <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"onCancel()\" [disabled]=\"saving()\">\n                  <i class=\"fa-solid fa-times me-2\"></i>\n                  {{ i18n.t('common.cancel') }}\n                </button>\n                <button \n                  type=\"submit\" \n                  class=\"btn btn-primary\" \n                  [disabled]=\"branchForm.invalid || saving()\"\n                >\n                  @if (saving()) {\n                    <span class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\n                  } @else {\n                    <i class=\"fa-solid fa-save me-2\"></i>\n                  }\n                  {{ saving() ? i18n.t('common.saving') : i18n.t('branches.update_branch') }}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      } @else {\n        <div class=\"alert alert-danger\">\n          <i class=\"fa-solid fa-exclamation-triangle me-2\"></i>\n          {{ error() || i18n.t('branches.branch_not_found') }}\n        </div>\n      }\n    </div>\n  `\n})\nexport class EditBranchComponent implements OnInit {\n  private route = inject(ActivatedRoute);\n  private router = inject(Router);\n  private branchesService = inject(BranchesService);\n  private fb = inject(FormBuilder);\n  public i18n = inject(I18nService);\n\n  branch = signal<Branch | null>(null);\n  loading = signal(true);\n  saving = signal(false);\n  error = signal('');\n  timezones = [\n    { value: 'UTC', label: 'UTC' },\n    { value: 'America/New_York', label: 'Eastern Time' },\n    { value: 'America/Chicago', label: 'Central Time' },\n    { value: 'America/Denver', label: 'Mountain Time' },\n    { value: 'America/Los_Angeles', label: 'Pacific Time' },\n    { value: 'Europe/London', label: 'London' },\n    { value: 'Europe/Paris', label: 'Paris' },\n    { value: 'Asia/Tokyo', label: 'Tokyo' },\n    { value: 'Asia/Dubai', label: 'Dubai' }\n  ];\n\n  branchForm!: FormGroup;\n\n  ngOnInit(): void {\n    this.initializeForm();\n    \n    const branchId = this.route.snapshot.paramMap.get('id');\n    if (branchId) {\n      this.loadBranch(branchId);\n    } else {\n      this.error.set('Invalid branch ID');\n      this.loading.set(false);\n    }\n  }\n\n  initializeForm(): void {\n    this.branchForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      code: ['', [Validators.required, Validators.minLength(2)]],\n      timezone: ['', Validators.required],\n      phone: [''],\n      email: ['', Validators.email],\n      address: [''],\n      description: [''],\n      isActive: [true]\n    });\n  }\n\n  loadBranch(branchId: string): void {\n    // Mock loading branch for now - replace with actual service call when available\n    setTimeout(() => {\n      const mockBranch: Branch = {\n        id: parseInt(branchId),\n        name: 'Sample Branch',\n        code: 'SAMPLE',\n        timeZone: 'UTC',\n        isActive: true,\n        employeeCount: 10,\n        departmentCount: 3,\n        createdAtUtc: '2024-01-01T00:00:00Z'\n      };\n      this.branch.set(mockBranch);\n      this.populateForm(mockBranch);\n      this.loading.set(false);\n    }, 1000);\n  }\n\n  populateForm(branch: Branch): void {\n    this.branchForm.patchValue({\n      name: branch.name,\n      code: branch.code,\n      timezone: branch.timeZone,\n      phone: '',\n      email: '',\n      address: '',\n      description: '',\n      isActive: branch.isActive\n    });\n  }\n\n  onSubmit(): void {\n    if (this.branchForm.invalid) {\n      this.branchForm.markAllAsTouched();\n      return;\n    }\n\n    this.saving.set(true);\n    this.error.set('');\n\n    const formValue = this.branchForm.value;\n    const updateRequest = {\n      name: formValue.name,\n      code: formValue.code.toUpperCase(),\n      timeZone: formValue.timezone,\n      isActive: formValue.isActive\n    };\n\n    // Mock update for now - replace with actual service call when available\n    setTimeout(() => {\n      this.saving.set(false);\n      this.router.navigate(['/branches', this.branch()!.id, 'view']);\n    }, 1000);\n  }\n\n  onCancel(): void {\n    if (this.branch()) {\n      this.router.navigate(['/branches', this.branch()!.id, 'view']);\n    } else {\n      this.router.navigate(['/branches']);\n    }\n  }\n\n  // Form field helpers\n  getFieldError(fieldName: string): string {\n    const field = this.branchForm.get(fieldName);\n    if (field?.errors && field.touched) {\n      if (field.errors['required']) {\n        return this.i18n.t('validation.required');\n      }\n      if (field.errors['email']) {\n        return this.i18n.t('validation.email');\n      }\n      if (field.errors['minlength']) {\n        return this.i18n.t('validation.minlength').replace('{{min}}', field.errors['minlength'].requiredLength);\n      }\n    }\n    return '';\n  }\n\n  isFieldInvalid(fieldName: string): boolean {\n    const field = this.branchForm.get(fieldName);\n    return !!(field?.errors && field.touched);\n  }\n\n  private getErrorMessage(error: any): string {\n    if (error?.error?.error) {\n      return error.error.error;\n    }\n    return this.i18n.t('errors.unknown');\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CQ,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAgD,GAAA,OAAA,EAAA,EACJ,GAAA,QAAA,EAAA;AACV,IAAA,iBAAA,CAAA;AAA8B,IAAA,uBAAA,EAAO,EAC/D;;;;AAD0B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,gBAAA,CAAA;;;;;;AAe1B,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,MAAA,GAAA,GAAA;;;;;;AAyBI,IAAA,yBAAA,GAAA,OAAA,EAAA;AAA8B,IAAA,iBAAA,CAAA;AAA2B,IAAA,uBAAA;;;;AAA3B,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,cAAA,MAAA,CAAA;;;;;;AAmB9B,IAAA,yBAAA,GAAA,OAAA,EAAA;AAA8B,IAAA,iBAAA,CAAA;AAA2B,IAAA,uBAAA;;;;AAA3B,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,cAAA,MAAA,CAAA;;;;;;AAkB5B,IAAA,yBAAA,GAAA,UAAA,EAAA;AAAiC,IAAA,iBAAA,CAAA;AAAoB,IAAA,uBAAA;;;;AAA7C,IAAA,qBAAA,SAAA,YAAA,KAAA;AAAyB,IAAA,oBAAA;AAAA,IAAA,4BAAA,YAAA,KAAA;;;;;;AAInC,IAAA,yBAAA,GAAA,OAAA,EAAA;AAA8B,IAAA,iBAAA,CAAA;AAA+B,IAAA,uBAAA;;;;AAA/B,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,cAAA,UAAA,CAAA;;;;;;AA2C9B,IAAA,yBAAA,GAAA,OAAA,EAAA;AAA8B,IAAA,iBAAA,CAAA;AAA4B,IAAA,uBAAA;;;;AAA5B,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,cAAA,OAAA,CAAA;;;;;;AAe9B,IAAA,yBAAA,GAAA,OAAA,EAAA;AAA8B,IAAA,iBAAA,CAAA;AAA4B,IAAA,uBAAA;;;;AAA5B,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,cAAA,OAAA,CAAA;;;;;;AAe9B,IAAA,yBAAA,GAAA,OAAA,EAAA;AAA8B,IAAA,iBAAA,CAAA;AAA8B,IAAA,uBAAA;;;;AAA9B,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,cAAA,SAAA,CAAA;;;;;;AAe9B,IAAA,yBAAA,GAAA,OAAA,EAAA;AAA8B,IAAA,iBAAA,CAAA;AAAkC,IAAA,uBAAA;;;;AAAlC,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,cAAA,aAAA,CAAA;;;;;;AAiChC,IAAA,oBAAA,GAAA,QAAA,EAAA;;;;;;AAEA,IAAA,oBAAA,GAAA,KAAA,EAAA;;;;;;;AAzMZ,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAkB,GAAA,OAAA,EAAA,EACS,GAAA,MAAA,EAAA;AAErB,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA,EAAK;AAEP,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAuB,GAAA,QAAA,EAAA;AACU,IAAA,qBAAA,YAAA,gCAAA,uEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAY,OAAA,SAAA,CAAU;IAAA,GAAtB,uEAAsB;AACnD,IAAA,8BAAA,GAAA,2DAAA,GAAA,GAAA,OAAA,EAAA;AAQA,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAkB,GAAA,MAAA,EAAA;AAEd,IAAA,oBAAA,IAAA,KAAA,EAAA;AACA,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA;AACA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAqB,IAAA,OAAA,EAAA,EAEG,IAAA,SAAA,EAAA;AAElB,IAAA,iBAAA,EAAA;AACA,IAAA,yBAAA,IAAA,QAAA,EAAA;AAA0B,IAAA,iBAAA,IAAA,GAAA;AAAC,IAAA,uBAAA,EAAO;AAEpC,IAAA,oBAAA,IAAA,SAAA,EAAA;AAOA,IAAA,8BAAA,IAAA,4DAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAGA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,SAAA,EAAA;AAElB,IAAA,iBAAA,EAAA;AACA,IAAA,yBAAA,IAAA,QAAA,EAAA;AAA0B,IAAA,iBAAA,IAAA,GAAA;AAAC,IAAA,uBAAA,EAAO;AAEpC,IAAA,oBAAA,IAAA,SAAA,EAAA;AAQA,IAAA,8BAAA,IAAA,4DAAA,GAAA,GAAA,OAAA,EAAA;AAGA,IAAA,yBAAA,IAAA,OAAA,EAAA;AAAuB,IAAA,iBAAA,EAAA;AAAkC,IAAA,uBAAA,EAAM;AAIjE,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,SAAA,EAAA;AAElB,IAAA,iBAAA,EAAA;AACA,IAAA,yBAAA,IAAA,QAAA,EAAA;AAA0B,IAAA,iBAAA,IAAA,GAAA;AAAC,IAAA,uBAAA,EAAO;AAEpC,IAAA,yBAAA,IAAA,UAAA,EAAA,EAIC,IAAA,UAAA,EAAA;AACkB,IAAA,iBAAA,EAAA;AAAwC,IAAA,uBAAA;AACzD,IAAA,2BAAA,IAAA,oDAAA,GAAA,GAAA,UAAA,IAAA,UAAA;AAGF,IAAA,uBAAA;AACA,IAAA,8BAAA,IAAA,4DAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAGA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,SAAA,EAAA;AACM,IAAA,iBAAA,EAAA;AAA6B,IAAA,uBAAA;AACvD,IAAA,yBAAA,IAAA,OAAA,EAAA;AACE,IAAA,oBAAA,IAAA,SAAA,EAAA;AAOA,IAAA,yBAAA,IAAA,SAAA,EAAA;AACE,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAQ,EACJ,EACF,EACF;AAGR,IAAA,oBAAA,IAAA,IAAA;AAGA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAkB,IAAA,MAAA,EAAA;AAEd,IAAA,oBAAA,IAAA,KAAA,EAAA;AACA,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA;AACA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAqB,IAAA,OAAA,EAAA,EAEG,IAAA,SAAA,EAAA;AACM,IAAA,iBAAA,EAAA;AAA4B,IAAA,uBAAA;AACtD,IAAA,oBAAA,IAAA,SAAA,EAAA;AAOA,IAAA,8BAAA,IAAA,4DAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAGA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,SAAA,EAAA;AACM,IAAA,iBAAA,EAAA;AAA4B,IAAA,uBAAA;AACtD,IAAA,oBAAA,IAAA,SAAA,EAAA;AAOA,IAAA,8BAAA,IAAA,4DAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAGA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAoB,IAAA,SAAA,EAAA;AACQ,IAAA,iBAAA,EAAA;AAAgC,IAAA,uBAAA;AAC1D,IAAA,oBAAA,IAAA,YAAA,EAAA;AAOA,IAAA,8BAAA,IAAA,4DAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAGA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAoB,IAAA,SAAA,EAAA;AACQ,IAAA,iBAAA,EAAA;AAAkC,IAAA,uBAAA;AAC5D,IAAA,oBAAA,IAAA,YAAA,EAAA;AAOA,IAAA,8BAAA,IAAA,4DAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA,EAAM,EACF;AAIR,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA8B,IAAA,MAAA,EAAA;AAE1B,IAAA,oBAAA,IAAA,KAAA,EAAA;AACA,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA;AACA,IAAA,yBAAA,IAAA,MAAA,EAAA,EAAiB,IAAA,IAAA;AACX,IAAA,iBAAA,EAAA;AAA8C,IAAA,uBAAA;AAClD,IAAA,yBAAA,IAAA,IAAA;AAAI,IAAA,iBAAA,EAAA;AAA8C,IAAA,uBAAA;AAClD,IAAA,yBAAA,IAAA,IAAA;AAAI,IAAA,iBAAA,EAAA;AAAkD,IAAA,uBAAA;AACtD,IAAA,yBAAA,IAAA,IAAA;AAAI,IAAA,iBAAA,EAAA;AAA+C,IAAA,uBAAA;AACnD,IAAA,yBAAA,IAAA,IAAA;AAAI,IAAA,iBAAA,EAAA;AAA+C,IAAA,uBAAA,EAAK,EACrD;AAIP,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAmD,IAAA,UAAA,CAAA;AACO,IAAA,qBAAA,SAAA,gCAAA,uEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,SAAA,CAAU;IAAA,GAAnB,uEAAmB;AACzE,IAAA,oBAAA,IAAA,KAAA,EAAA;AACA,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA;AACA,IAAA,yBAAA,IAAA,UAAA,EAAA;AAKE,IAAA,8BAAA,IAAA,4DAAA,GAAA,GAAA,QAAA,EAAA,EAAgB,IAAA,4DAAA,GAAA,GAAA,KAAA,EAAA;AAKhB,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAS,EACL,EACD,EACH;;;;AA3MF,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,KAAA,EAAA,6BAAA,GAAA,GAAA;AAII,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,aAAA,OAAA,UAAA;AACJ,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,MAAA,IAAA,IAAA,EAAA;AAWI,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,KAAA,EAAA,4BAAA,GAAA,GAAA;AAMI,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,KAAA,EAAA,eAAA,GAAA,GAAA;AAOA,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,cAAA,OAAA,eAAA,MAAA,CAAA;AACA,IAAA,qBAAA,eAAA,OAAA,KAAA,EAAA,2BAAA,CAAA;AAEF,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,eAAA,MAAA,IAAA,KAAA,EAAA;AAQE,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,KAAA,EAAA,eAAA,GAAA,GAAA;AAOA,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,cAAA,OAAA,eAAA,MAAA,CAAA;AACA,IAAA,qBAAA,eAAA,OAAA,KAAA,EAAA,2BAAA,CAAA;AAGF,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,eAAA,MAAA,IAAA,KAAA,EAAA;AAGuB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,oBAAA,CAAA;AAMrB,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,KAAA,EAAA,mBAAA,GAAA,GAAA;AAMA,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,cAAA,OAAA,eAAA,UAAA,CAAA;AAEiB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,0BAAA,CAAA;AACjB,IAAA,oBAAA;AAAA,IAAA,qBAAA,OAAA,SAAA;AAIF,IAAA,oBAAA,CAAA;AAAA,IAAA,wBAAA,OAAA,eAAA,UAAA,IAAA,KAAA,EAAA;AAO0B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,eAAA,CAAA;AAUtB,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,KAAA,EAAA,eAAA,GAAA,GAAA;AAaN,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,KAAA,EAAA,8BAAA,GAAA,GAAA;AAK4B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,cAAA,CAAA;AAKxB,IAAA,oBAAA;AAAA,IAAA,sBAAA,cAAA,OAAA,eAAA,OAAA,CAAA;AACA,IAAA,qBAAA,eAAA,OAAA,KAAA,EAAA,0BAAA,CAAA;AAEF,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,eAAA,OAAA,IAAA,KAAA,EAAA;AAO0B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,cAAA,CAAA;AAKxB,IAAA,oBAAA;AAAA,IAAA,sBAAA,cAAA,OAAA,eAAA,OAAA,CAAA;AACA,IAAA,qBAAA,eAAA,OAAA,KAAA,EAAA,0BAAA,CAAA;AAEF,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,eAAA,OAAA,IAAA,KAAA,EAAA;AAO0B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,kBAAA,CAAA;AAIxB,IAAA,oBAAA;AAAA,IAAA,sBAAA,cAAA,OAAA,eAAA,SAAA,CAAA;AACA,IAAA,qBAAA,eAAA,OAAA,KAAA,EAAA,8BAAA,CAAA;AAGF,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,eAAA,SAAA,IAAA,KAAA,EAAA;AAO0B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,oBAAA,CAAA;AAIxB,IAAA,oBAAA;AAAA,IAAA,sBAAA,cAAA,OAAA,eAAA,aAAA,CAAA;AACA,IAAA,qBAAA,eAAA,OAAA,KAAA,EAAA,kCAAA,CAAA;AAGF,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,eAAA,aAAA,IAAA,KAAA,EAAA;AAWF,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,KAAA,EAAA,iCAAA,GAAA,GAAA;AAGI,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,gCAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,gCAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,oCAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,iCAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,KAAA,EAAA,iCAAA,CAAA;AAMuE,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,OAAA,CAAA;AAE3E,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,KAAA,EAAA,eAAA,GAAA,GAAA;AAKA,IAAA,oBAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,WAAA,WAAA,OAAA,OAAA,CAAA;AAEA,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,OAAA,IAAA,KAAA,EAAA;AAKA,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,OAAA,IAAA,OAAA,KAAA,EAAA,eAAA,IAAA,OAAA,KAAA,EAAA,wBAAA,GAAA,GAAA;;;;;;AAOV,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,MAAA,KAAA,OAAA,KAAA,EAAA,2BAAA,GAAA,GAAA;;;;AAMJ,IAAO,uBAAP,MAAO,qBAAmB;EACtB,QAAQ,OAAO,cAAc;EAC7B,SAAS,OAAO,MAAM;EACtB,kBAAkB,OAAO,eAAe;EACxC,KAAK,OAAO,WAAW;EACxB,OAAO,OAAO,WAAW;EAEhC,SAAS,OAAsB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,SAAA,CAAA,IAAA,CAAA,CAAA;EACnC,UAAU,OAAO,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,UAAA,CAAA,IAAA,CAAA,CAAA;EACrB,SAAS,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,SAAA,CAAA,IAAA,CAAA,CAAA;EACrB,QAAQ,OAAO,IAAE,GAAA,YAAA,CAAA,EAAA,WAAA,QAAA,CAAA,IAAA,CAAA,CAAA;EACjB,YAAY;IACV,EAAE,OAAO,OAAO,OAAO,MAAK;IAC5B,EAAE,OAAO,oBAAoB,OAAO,eAAc;IAClD,EAAE,OAAO,mBAAmB,OAAO,eAAc;IACjD,EAAE,OAAO,kBAAkB,OAAO,gBAAe;IACjD,EAAE,OAAO,uBAAuB,OAAO,eAAc;IACrD,EAAE,OAAO,iBAAiB,OAAO,SAAQ;IACzC,EAAE,OAAO,gBAAgB,OAAO,QAAO;IACvC,EAAE,OAAO,cAAc,OAAO,QAAO;IACrC,EAAE,OAAO,cAAc,OAAO,QAAO;;EAGvC;EAEA,WAAQ;AACN,SAAK,eAAc;AAEnB,UAAM,WAAW,KAAK,MAAM,SAAS,SAAS,IAAI,IAAI;AACtD,QAAI,UAAU;AACZ,WAAK,WAAW,QAAQ;IAC1B,OAAO;AACL,WAAK,MAAM,IAAI,mBAAmB;AAClC,WAAK,QAAQ,IAAI,KAAK;IACxB;EACF;EAEA,iBAAc;AACZ,SAAK,aAAa,KAAK,GAAG,MAAM;MAC9B,MAAM,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,UAAU,CAAC,CAAC,CAAC;MACzD,MAAM,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,UAAU,CAAC,CAAC,CAAC;MACzD,UAAU,CAAC,IAAI,WAAW,QAAQ;MAClC,OAAO,CAAC,EAAE;MACV,OAAO,CAAC,IAAI,WAAW,KAAK;MAC5B,SAAS,CAAC,EAAE;MACZ,aAAa,CAAC,EAAE;MAChB,UAAU,CAAC,IAAI;KAChB;EACH;EAEA,WAAW,UAAgB;AAEzB,eAAW,MAAK;AACd,YAAM,aAAqB;QACzB,IAAI,SAAS,QAAQ;QACrB,MAAM;QACN,MAAM;QACN,UAAU;QACV,UAAU;QACV,eAAe;QACf,iBAAiB;QACjB,cAAc;;AAEhB,WAAK,OAAO,IAAI,UAAU;AAC1B,WAAK,aAAa,UAAU;AAC5B,WAAK,QAAQ,IAAI,KAAK;IACxB,GAAG,GAAI;EACT;EAEA,aAAa,QAAc;AACzB,SAAK,WAAW,WAAW;MACzB,MAAM,OAAO;MACb,MAAM,OAAO;MACb,UAAU,OAAO;MACjB,OAAO;MACP,OAAO;MACP,SAAS;MACT,aAAa;MACb,UAAU,OAAO;KAClB;EACH;EAEA,WAAQ;AACN,QAAI,KAAK,WAAW,SAAS;AAC3B,WAAK,WAAW,iBAAgB;AAChC;IACF;AAEA,SAAK,OAAO,IAAI,IAAI;AACpB,SAAK,MAAM,IAAI,EAAE;AAEjB,UAAM,YAAY,KAAK,WAAW;AAClC,UAAM,gBAAgB;MACpB,MAAM,UAAU;MAChB,MAAM,UAAU,KAAK,YAAW;MAChC,UAAU,UAAU;MACpB,UAAU,UAAU;;AAItB,eAAW,MAAK;AACd,WAAK,OAAO,IAAI,KAAK;AACrB,WAAK,OAAO,SAAS,CAAC,aAAa,KAAK,OAAM,EAAI,IAAI,MAAM,CAAC;IAC/D,GAAG,GAAI;EACT;EAEA,WAAQ;AACN,QAAI,KAAK,OAAM,GAAI;AACjB,WAAK,OAAO,SAAS,CAAC,aAAa,KAAK,OAAM,EAAI,IAAI,MAAM,CAAC;IAC/D,OAAO;AACL,WAAK,OAAO,SAAS,CAAC,WAAW,CAAC;IACpC;EACF;;EAGA,cAAc,WAAiB;AAC7B,UAAM,QAAQ,KAAK,WAAW,IAAI,SAAS;AAC3C,QAAI,OAAO,UAAU,MAAM,SAAS;AAClC,UAAI,MAAM,OAAO,UAAU,GAAG;AAC5B,eAAO,KAAK,KAAK,EAAE,qBAAqB;MAC1C;AACA,UAAI,MAAM,OAAO,OAAO,GAAG;AACzB,eAAO,KAAK,KAAK,EAAE,kBAAkB;MACvC;AACA,UAAI,MAAM,OAAO,WAAW,GAAG;AAC7B,eAAO,KAAK,KAAK,EAAE,sBAAsB,EAAE,QAAQ,WAAW,MAAM,OAAO,WAAW,EAAE,cAAc;MACxG;IACF;AACA,WAAO;EACT;EAEA,eAAe,WAAiB;AAC9B,UAAM,QAAQ,KAAK,WAAW,IAAI,SAAS;AAC3C,WAAO,CAAC,EAAE,OAAO,UAAU,MAAM;EACnC;EAEQ,gBAAgB,OAAU;AAChC,QAAI,OAAO,OAAO,OAAO;AACvB,aAAO,MAAM,MAAM;IACrB;AACA,WAAO,KAAK,KAAK,EAAE,gBAAgB;EACrC;;AA7I8B;cAAnB;mCAAA,sBAAmB;AAAA;cAAnB,uFAAA,sBAAmB,WAAA,CAAA,CAAA,iBAAA,CAAA,GAAA,OAAA,IAAA,MAAA,GAAA,QAAA,CAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,GAAA,UAAA,2BAAA,sBAAA,MAAA,GAAA,CAAA,cAAA,YAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,cAAA,YAAA,GAAA,CAAA,cAAA,WAAA,GAAA,CAAA,GAAA,mBAAA,QAAA,GAAA,CAAA,QAAA,UAAA,GAAA,OAAA,yBAAA,GAAA,SAAA,UAAA,GAAA,CAAA,GAAA,YAAA,iBAAA,MAAA,GAAA,CAAA,GAAA,UAAA,0BAAA,MAAA,GAAA,CAAA,GAAA,MAAA,GAAA,CAAA,GAAA,SAAA,cAAA,GAAA,CAAA,QAAA,UAAA,GAAA,gBAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,GAAA,cAAA,MAAA,GAAA,CAAA,GAAA,YAAA,eAAA,MAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,GAAA,YAAA,WAAA,GAAA,CAAA,QAAA,SAAA,GAAA,SAAA,cAAA,GAAA,CAAA,GAAA,MAAA,GAAA,CAAA,GAAA,gBAAA,MAAA,GAAA,CAAA,GAAA,YAAA,kBAAA,MAAA,GAAA,CAAA,GAAA,OAAA,KAAA,GAAA,CAAA,GAAA,UAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,QAAA,QAAA,mBAAA,QAAA,GAAA,gBAAA,GAAA,aAAA,GAAA,CAAA,GAAA,kBAAA,GAAA,CAAA,QAAA,QAAA,mBAAA,QAAA,GAAA,gBAAA,GAAA,kBAAA,aAAA,GAAA,aAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,mBAAA,YAAA,GAAA,aAAA,GAAA,CAAA,SAAA,EAAA,GAAA,CAAA,GAAA,OAAA,GAAA,CAAA,GAAA,cAAA,eAAA,MAAA,GAAA,CAAA,QAAA,YAAA,QAAA,UAAA,MAAA,kBAAA,mBAAA,YAAA,GAAA,kBAAA,GAAA,CAAA,OAAA,kBAAA,GAAA,kBAAA,GAAA,CAAA,GAAA,kBAAA,MAAA,GAAA,CAAA,GAAA,YAAA,mBAAA,MAAA,GAAA,CAAA,QAAA,OAAA,mBAAA,SAAA,GAAA,gBAAA,GAAA,aAAA,GAAA,CAAA,QAAA,SAAA,mBAAA,SAAA,GAAA,gBAAA,GAAA,aAAA,GAAA,CAAA,GAAA,QAAA,GAAA,CAAA,mBAAA,WAAA,QAAA,KAAA,GAAA,gBAAA,GAAA,aAAA,GAAA,CAAA,mBAAA,eAAA,QAAA,KAAA,GAAA,gBAAA,GAAA,aAAA,GAAA,CAAA,GAAA,SAAA,YAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,MAAA,GAAA,CAAA,GAAA,UAAA,uBAAA,SAAA,MAAA,GAAA,CAAA,GAAA,YAAA,YAAA,MAAA,GAAA,CAAA,QAAA,UAAA,GAAA,OAAA,eAAA,GAAA,UAAA,GAAA,CAAA,QAAA,UAAA,eAAA,QAAA,GAAA,kBAAA,qBAAA,MAAA,GAAA,CAAA,GAAA,YAAA,WAAA,MAAA,GAAA,CAAA,GAAA,YAAA,2BAAA,MAAA,CAAA,GAAA,UAAA,gCAAA,6BAAA,IAAA,KAAA;AAAA,MAAA,KAAA,GAAA;AA7P5B,IAAA,yBAAA,GAAA,OAAA,CAAA,EAA6B,GAAA,OAAA,CAAA,EAEyC,GAAA,KAAA,EAC7D,GAAA,IAAA;AACC,IAAA,iBAAA,CAAA;AAAoC,IAAA,uBAAA;AACxC,IAAA,yBAAA,GAAA,OAAA,CAAA,EAA6B,GAAA,MAAA,CAAA,EACJ,GAAA,MAAA,CAAA,EACO,GAAA,KAAA,CAAA;AACC,IAAA,iBAAA,CAAA;AAA+B,IAAA,uBAAA,EAAI;AAEhE,IAAA,yBAAA,IAAA,MAAA,CAAA,EAA4B,IAAA,KAAA,CAAA;AACA,IAAA,iBAAA,EAAA;AAA8B,IAAA,uBAAA,EAAI;AAE9D,IAAA,yBAAA,IAAA,MAAA,CAAA;AAAmC,IAAA,iBAAA,EAAA;AAAoC,IAAA,uBAAA,EAAK,EACzE,EACD;AAER,IAAA,yBAAA,IAAA,UAAA,CAAA;AAGE,IAAA,qBAAA,SAAA,gCAAA,wDAAA;AAAA,aAAS,IAAA,SAAA;IAAU,GAAnB,wDAAmB;AAEnB,IAAA,oBAAA,IAAA,KAAA,CAAA;AACA,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAS;AAGX,IAAA,8BAAA,IAAA,6CAAA,GAAA,GAAA,OAAA,EAAA,EAAiB,IAAA,6CAAA,IAAA,IAAA,OAAA,EAAA,EAMM,IAAA,6CAAA,GAAA,GAAA,OAAA,EAAA;AAyNzB,IAAA,uBAAA;;;AAtPU,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,IAAA,KAAA,EAAA,sBAAA,CAAA;AAI6B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,IAAA,KAAA,EAAA,iBAAA,CAAA;AAGD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,IAAA,KAAA,EAAA,gBAAA,CAAA;AAEO,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,IAAA,KAAA,EAAA,sBAAA,CAAA;AAQvC,IAAA,oBAAA;AAAA,IAAA,qBAAA,YAAA,IAAA,OAAA,CAAA;AAEA,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,IAAA,KAAA,EAAA,aAAA,GAAA,GAAA;AAIJ,IAAA,oBAAA;AAAA,IAAA,wBAAA,IAAA,QAAA,IAAA,KAAA,IAAA,OAAA,IAAA,KAAA,EAAA;;GAkO0B,gDA/PpB,cAAc,cAAY,YAAE,qBAAmB,oBAAA,gBAAA,8BAAA,sBAAA,8BAAA,4BAAA,iBAAA,sBAAA,oBAAA,eAAA,GAAA,eAAA,EAAA,CAAA;AA+PrD,IAAO,sBAAP;;sEAAO,qBAAmB,CAAA;UAlQ/B;WAAU;MACT,UAAU;MACV,YAAY;MACZ,SAAS,CAAC,cAAc,cAAc,mBAAmB;MACzD,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA6PX;;;;6EACY,qBAAmB,EAAA,WAAA,uBAAA,UAAA,+DAAA,YAAA,IAAA,CAAA;AAAA,GAAA;",
  "names": []
}
