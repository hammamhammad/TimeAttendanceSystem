{
  "version": 3,
  "sources": ["src/app/pages/vacation-types/vacation-types.service.ts"],
  "sourcesContent": ["import { Injectable, signal, computed } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, map, catchError, throwError, tap } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport {\r\n  VacationTypeDto,\r\n  VacationTypeDetailDto,\r\n  CreateVacationTypeRequest,\r\n  UpdateVacationTypeRequest,\r\n  VacationTypesQueryParams,\r\n  VacationTypeFilter,\r\n  PagedResult\r\n} from '../../shared/models/vacation-type.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VacationTypesService {\r\n  private readonly baseUrl = `${environment.apiUrl}/api/v1/vacation-types`;\r\n\r\n  // Signals for state management\r\n  private readonly _vacationTypes = signal<VacationTypeDto[]>([]);\r\n  private readonly _pagedResult = signal<PagedResult<VacationTypeDto> | null>(null);\r\n  private readonly _loading = signal(false);\r\n  private readonly _error = signal<string | null>(null);\r\n  private readonly _selectedVacationType = signal<VacationTypeDetailDto | null>(null);\r\n  private readonly _currentFilter = signal<VacationTypeFilter>({});\r\n\r\n  // Public readonly signals\r\n  readonly vacationTypes = this._vacationTypes.asReadonly();\r\n  readonly pagedResult = this._pagedResult.asReadonly();\r\n  readonly loading = this._loading.asReadonly();\r\n  readonly error = this._error.asReadonly();\r\n  readonly selectedVacationType = this._selectedVacationType.asReadonly();\r\n  readonly currentFilter = this._currentFilter.asReadonly();\r\n\r\n  // Computed signals\r\n  readonly totalItems = computed(() => this._pagedResult()?.totalCount ?? 0);\r\n  readonly totalPages = computed(() => {\r\n    const result = this._pagedResult();\r\n    if (!result || result.pageSize === 0) return 1;\r\n    return Math.ceil(result.totalCount / result.pageSize);\r\n  });\r\n  readonly hasNextPage = computed(() => {\r\n    const result = this._pagedResult();\r\n    if (!result) return false;\r\n    return result.page < this.totalPages();\r\n  });\r\n  readonly hasPreviousPage = computed(() => {\r\n    const result = this._pagedResult();\r\n    if (!result) return false;\r\n    return result.page > 1;\r\n  });\r\n\r\n  // Filtered vacation types based on current filter\r\n  readonly filteredVacationTypes = computed(() => {\r\n    const types = this._vacationTypes();\r\n    const filter = this._currentFilter();\r\n\r\n    if (!filter) return types;\r\n\r\n    return types.filter(vacationType => {\r\n      if (filter.search) {\r\n        const searchLower = filter.search.toLowerCase();\r\n        const matchesName = vacationType.name.toLowerCase().includes(searchLower);\r\n        const matchesArabicName = vacationType.nameAr?.toLowerCase().includes(searchLower) ?? false;\r\n        if (!matchesName && !matchesArabicName) return false;\r\n      }\r\n\r\n      if (filter.branchId !== undefined && vacationType.branchId !== filter.branchId) {\r\n        return false;\r\n      }\r\n\r\n      if (filter.isActive !== undefined && vacationType.isActive !== filter.isActive) {\r\n        return false;\r\n      }\r\n\r\n\r\n      return true;\r\n    });\r\n  });\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Retrieves vacation types with optional filtering and pagination\r\n   */\r\n  getVacationTypes(params: VacationTypesQueryParams = {}): Observable<PagedResult<VacationTypeDto>> {\r\n    this._loading.set(true);\r\n    this._error.set(null);\r\n\r\n    let httpParams = new HttpParams();\r\n\r\n    if (params.page) httpParams = httpParams.set('page', params.page.toString());\r\n    if (params.pageSize) httpParams = httpParams.set('pageSize', params.pageSize.toString());\r\n    if (params.search) httpParams = httpParams.set('search', params.search);\r\n    if (params.branchId) httpParams = httpParams.set('branchId', params.branchId.toString());\r\n    if (params.isActive !== undefined) httpParams = httpParams.set('isActive', params.isActive.toString());\r\n\r\n    return this.http.get<PagedResult<VacationTypeDto>>(this.baseUrl, { params: httpParams }).pipe(\r\n      tap(result => {\r\n        this._pagedResult.set(result);\r\n        this._vacationTypes.set(result.items);\r\n        this._loading.set(false);\r\n      }),\r\n      catchError(error => {\r\n        this._loading.set(false);\r\n        this._error.set('Failed to load vacation types');\r\n        console.error('Error loading vacation types:', error);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves a specific vacation type by ID\r\n   */\r\n  getVacationTypeById(id: number, includeStatistics: boolean = false): Observable<VacationTypeDetailDto> {\r\n    this._loading.set(true);\r\n    this._error.set(null);\r\n\r\n    let httpParams = new HttpParams();\r\n    if (includeStatistics) {\r\n      httpParams = httpParams.set('includeStatistics', 'true');\r\n    }\r\n\r\n    return this.http.get<VacationTypeDetailDto>(`${this.baseUrl}/${id}`, { params: httpParams }).pipe(\r\n      tap(vacationType => {\r\n        this._selectedVacationType.set(vacationType);\r\n        this._loading.set(false);\r\n      }),\r\n      catchError(error => {\r\n        this._loading.set(false);\r\n        this._error.set('Failed to load vacation type details');\r\n        console.error('Error loading vacation type:', error);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates a new vacation type\r\n   */\r\n  createVacationType(request: CreateVacationTypeRequest): Observable<{ id: number }> {\r\n    this._loading.set(true);\r\n    this._error.set(null);\r\n\r\n    return this.http.post<{ id: number }>(this.baseUrl, request).pipe(\r\n      tap(() => {\r\n        this._loading.set(false);\r\n      }),\r\n      catchError(error => {\r\n        this._loading.set(false);\r\n        this._error.set('Failed to create vacation type');\r\n        console.error('Error creating vacation type:', error);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates an existing vacation type\r\n   */\r\n  updateVacationType(id: number, request: UpdateVacationTypeRequest): Observable<void> {\r\n    this._loading.set(true);\r\n    this._error.set(null);\r\n\r\n    return this.http.put<void>(`${this.baseUrl}/${id}`, request).pipe(\r\n      tap(() => {\r\n        this._loading.set(false);\r\n        // Update the vacation type in the local state if it exists\r\n        const currentTypes = this._vacationTypes();\r\n        const updatedTypes = currentTypes.map(vt =>\r\n          vt.id === id ? { ...vt, ...request, modifiedAtUtc: new Date().toISOString() } : vt\r\n        );\r\n        this._vacationTypes.set(updatedTypes);\r\n      }),\r\n      catchError(error => {\r\n        this._loading.set(false);\r\n        this._error.set('Failed to update vacation type');\r\n        console.error('Error updating vacation type:', error);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deletes a vacation type\r\n   */\r\n  deleteVacationType(id: number): Observable<void> {\r\n    this._loading.set(true);\r\n    this._error.set(null);\r\n\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`).pipe(\r\n      tap(() => {\r\n        this._loading.set(false);\r\n        // Remove the vacation type from local state\r\n        const currentTypes = this._vacationTypes();\r\n        const filteredTypes = currentTypes.filter(vt => vt.id !== id);\r\n        this._vacationTypes.set(filteredTypes);\r\n\r\n        // Update paged result\r\n        const currentResult = this._pagedResult();\r\n        if (currentResult) {\r\n          this._pagedResult.set({\r\n            ...currentResult,\r\n            items: filteredTypes,\r\n            totalCount: currentResult.totalCount - 1\r\n          });\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        this._loading.set(false);\r\n        this._error.set('Failed to delete vacation type');\r\n        console.error('Error deleting vacation type:', error);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Toggles the active status of a vacation type\r\n   */\r\n  toggleVacationTypeStatus(id: number): Observable<void> {\r\n    this._loading.set(true);\r\n    this._error.set(null);\r\n\r\n    return this.http.patch<void>(`${this.baseUrl}/${id}/toggle-status`, {}).pipe(\r\n      tap(() => {\r\n        this._loading.set(false);\r\n        // Toggle the status in local state\r\n        const currentTypes = this._vacationTypes();\r\n        const updatedTypes = currentTypes.map(vt =>\r\n          vt.id === id ? { ...vt, isActive: !vt.isActive, modifiedAtUtc: new Date().toISOString() } : vt\r\n        );\r\n        this._vacationTypes.set(updatedTypes);\r\n      }),\r\n      catchError(error => {\r\n        this._loading.set(false);\r\n        this._error.set('Failed to toggle vacation type status');\r\n        console.error('Error toggling vacation type status:', error);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates the current filter\r\n   */\r\n  updateFilter(filter: VacationTypeFilter): void {\r\n    this._currentFilter.set(filter);\r\n  }\r\n\r\n  /**\r\n   * Clears the current filter\r\n   */\r\n  clearFilter(): void {\r\n    this._currentFilter.set({});\r\n  }\r\n\r\n  /**\r\n   * Clears the selected vacation type\r\n   */\r\n  clearSelectedVacationType(): void {\r\n    this._selectedVacationType.set(null);\r\n  }\r\n\r\n  /**\r\n   * Clears any error state\r\n   */\r\n  clearError(): void {\r\n    this._error.set(null);\r\n  }\r\n\r\n  /**\r\n   * Gets all branches for vacation type forms\r\n   */\r\n  getBranches(): Observable<any[]> {\r\n    const params = new HttpParams()\r\n      .set('pageSize', '1000')\r\n      .set('isActive', 'true');\r\n\r\n    return this.http.get<PagedResult<any>>(`${environment.apiUrl}/api/v1/branches`, { params })\r\n      .pipe(\r\n        map((result: PagedResult<any>) => result.items || []),\r\n        catchError(error => {\r\n          console.error('Error loading branches:', error);\r\n          return throwError(() => error);\r\n        })\r\n      );\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
