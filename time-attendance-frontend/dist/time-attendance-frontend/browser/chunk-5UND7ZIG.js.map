{
  "version": 3,
  "sources": ["src/app/core/i18n/i18n.service.ts", "src/environments/environment.ts"],
  "sourcesContent": ["import { Injectable, signal, effect } from '@angular/core';\n\nexport type Locale = 'en' | 'ar';\n\ninterface Translations {\n  [key: string]: any;\n}\n\n/**\n * Angular internationalization (i18n) service providing comprehensive localization support for multi-language applications.\n * Implements reactive localization management with Angular Signals, dynamic translation loading, and RTL support\n * for seamless English-Arabic bilingual user experience with cultural adaptation and accessibility features.\n * \n * @remarks\n * Internationalization Features:\n * - Reactive localization management using Angular Signals for immediate UI updates\n * - Dynamic translation file loading with lazy loading optimization for performance\n * - Bi-directional text support with automatic RTL/LTR switching for Arabic/English\n * - Document-level language and direction management for accessibility compliance\n * - Nested translation key support with dot notation for hierarchical organization\n * - Fallback mechanism ensuring graceful degradation when translations are missing\n * \n * Supported Languages:\n * - English (en): Primary language with left-to-right (LTR) text direction\n * - Arabic (ar): Secondary language with right-to-left (RTL) text direction and cultural formatting\n * - Extensible architecture supporting additional languages through configuration\n * - Language-specific formatting for dates, numbers, and cultural conventions\n * - Locale-aware content rendering with proper text direction and alignment\n * \n * Angular Integration:\n * - Angular Signals for reactive state management and automatic UI synchronization\n * - Effect-based translation loading ensuring translations are available when needed\n * - Injectable service pattern with root-level dependency injection for global access\n * - Component integration through service injection and translation pipe usage\n * - Route-level localization support with language parameter handling\n * - Form validation integration with localized error messages and field labels\n * \n * Performance Optimization:\n * - Lazy loading of translation files reducing initial bundle size\n * - Dynamic import statements for code splitting and performance optimization\n * - Memory-efficient translation caching with automatic cleanup mechanisms\n * - Signal-based reactivity minimizing unnecessary re-renders and computations\n * - Efficient nested property access with optimized traversal algorithms\n * - Translation key caching for frequently accessed strings\n * \n * Accessibility and User Experience:\n * - Document language attribute management for screen reader compatibility\n * - Text direction management for proper RTL/LTR rendering and layout\n * - Cultural formatting integration for dates, numbers, and currency display\n * - Keyboard navigation support with direction-aware focus management\n * - High contrast and accessibility-compliant translation key structures\n * - User preference persistence for consistent cross-session experience\n * \n * Error Handling and Resilience:\n * - Graceful fallback to translation keys when translations are missing\n * - Error logging and monitoring for translation loading failures\n * - Default language fallback ensuring application functionality under all conditions\n * - Translation validation and integrity checking for production deployments\n * - Hot-reloading support for development environments with translation updates\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nService {\n  private translations = signal<Translations>({});\n  public locale = signal<Locale>('en');\n\n  /**\n   * Initializes the I18nService with reactive locale management and automatic translation loading.\n   * Sets up Angular effects for automatic translation loading and document language updates.\n   */\n  constructor() {\n    effect(() => {\n      const currentLocale = this.locale();\n      this.updateDocumentLanguage(currentLocale);\n      this.loadTranslations(currentLocale);\n    });\n  }\n\n  /**\n   * Updates the document's language and text direction attributes for accessibility and proper rendering.\n   * Configures HTML document elements to support screen readers and RTL/LTR text rendering.\n   * \n   * @param locale - The locale to apply to the document\n   */\n  private updateDocumentLanguage(locale: Locale): void {\n    document.documentElement.lang = locale;\n    document.documentElement.dir = locale === 'ar' ? 'rtl' : 'ltr';\n  }\n\n  /**\n   * Dynamically loads translation files for the specified locale with error handling.\n   * Implements lazy loading for performance optimization and graceful error handling.\n   * \n   * @param locale - The locale for which to load translations\n   */\n  private async loadTranslations(locale: Locale): Promise<void> {\n    try {\n      const translations = await import(`./translations/${locale}.json`);\n      this.translations.set(translations.default || translations);\n    } catch (error) {\n      console.warn(`Failed to load translations for locale: ${locale}`, error);\n      this.translations.set({});\n    }\n  }\n\n  /**\n   * Sets the current application locale and triggers reactive translation updates.\n   * Automatically loads translations and updates document language attributes.\n   * \n   * @param locale - The locale to set as current\n   */\n  public setLocale(locale: Locale): void {\n    this.locale.set(locale);\n  }\n\n  /**\n   * Translates a key to the current locale's text with fallback to the key itself.\n   * Supports nested key notation with dot separation for hierarchical organization.\n   * \n   * @param key - The translation key to translate\n   * @returns The translated text or the key itself if translation is not found\n   */\n  public t(key: string): string {\n    const translations = this.translations();\n    return this.getNestedValue(translations, key) || key;\n  }\n\n  /**\n   * Retrieves nested values from translation objects using dot notation path traversal.\n   * Safely navigates nested object structures with null/undefined checking.\n   * \n   * @param obj - The object to traverse\n   * @param path - The dot-separated path to the desired value\n   * @returns The nested value or undefined if not found\n   */\n  private getNestedValue(obj: any, path: string): string | undefined {\n    return path.split('.').reduce((current, key) => {\n      return current && current[key] !== undefined ? current[key] : undefined;\n    }, obj);\n  }\n\n  /**\n   * Gets the current application locale.\n   * \n   * @returns The currently active locale\n   */\n  public getCurrentLocale(): Locale {\n    return this.locale();\n  }\n\n  /**\n   * Determines if the current locale uses right-to-left (RTL) text direction.\n   * Used for layout and styling decisions in the user interface.\n   * \n   * @returns True if the current locale is RTL, false otherwise\n   */\n  public isRtl(): boolean {\n    return this.locale() === 'ar';\n  }\n}", "export const environment = {\n  production: false,\n  apiUrl: 'http://localhost:5099'\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AA+DM,IAAO,eAAP,MAAO,aAAW;EACd,eAAe,OAAqB,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,eAAA,CAAA,IAAA,CAAA,CAAA;EACvC,SAAS,OAAe,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,SAAA,CAAA,IAAA,CAAA,CAAA;;;;;EAMnC,cAAA;AACE,WAAO,MAAK;AACV,YAAM,gBAAgB,KAAK,OAAM;AACjC,WAAK,uBAAuB,aAAa;AACzC,WAAK,iBAAiB,aAAa;IACrC,CAAC;EACH;;;;;;;EAQQ,uBAAuB,QAAc;AAC3C,aAAS,gBAAgB,OAAO;AAChC,aAAS,gBAAgB,MAAM,WAAW,OAAO,QAAQ;EAC3D;;;;;;;EAQc,iBAAiB,QAAc;;AAC3C,UAAI;AACF,cAAM,eAAe,MAAa,+CAAkB,MAAM;AAC1D,aAAK,aAAa,IAAI,aAAa,WAAW,YAAY;MAC5D,SAAS,OAAO;AACd,gBAAQ,KAAK,2CAA2C,MAAM,IAAI,KAAK;AACvE,aAAK,aAAa,IAAI,CAAA,CAAE;MAC1B;IACF;;;;;;;;EAQO,UAAU,QAAc;AAC7B,SAAK,OAAO,IAAI,MAAM;EACxB;;;;;;;;EASO,EAAE,KAAW;AAClB,UAAM,eAAe,KAAK,aAAY;AACtC,WAAO,KAAK,eAAe,cAAc,GAAG,KAAK;EACnD;;;;;;;;;EAUQ,eAAe,KAAU,MAAY;AAC3C,WAAO,KAAK,MAAM,GAAG,EAAE,OAAO,CAAC,SAAS,QAAO;AAC7C,aAAO,WAAW,QAAQ,GAAG,MAAM,SAAY,QAAQ,GAAG,IAAI;IAChE,GAAG,GAAG;EACR;;;;;;EAOO,mBAAgB;AACrB,WAAO,KAAK,OAAM;EACpB;;;;;;;EAQO,QAAK;AACV,WAAO,KAAK,OAAM,MAAO;EAC3B;;AAhGsB;cAAX;mCAAA,cAAW;AAAA;cAAX,kFAAA,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;AAEd,IAAO,cAAP;;sEAAO,aAAW,CAAA;UAHvB;WAAW;MACV,YAAY;KACb;;;;;AC9DM,IAAM,cAAc;EACzB,YAAY;EACZ,QAAQ;;",
  "names": []
}
