{
  "version": 3,
  "sources": ["src/app/core/services/attendance.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport {\r\n  AttendanceRecord,\r\n  AttendanceTransaction,\r\n  AttendanceStatistics,\r\n  AttendanceReportRequest,\r\n  CreateAttendanceTransactionRequest,\r\n  AttendanceGenerationResult,\r\n  AttendanceDashboardData,\r\n  UpdateAttendanceRecordRequest,\r\n  BulkAttendanceUpdateRequest,\r\n  BulkUpdateResult,\r\n  BulkCalculationRequest,\r\n  BulkCalculationResult\r\n} from '../../shared/models/attendance.model';\r\nimport { LeaveExcuseDetailsResponse } from '../../shared/models/leave-excuse-details.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AttendanceService {\r\n  private readonly apiUrl = `${environment.apiUrl}/api/v1/attendance`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Get attendance report with filtering and pagination\r\n   */\r\n  getAttendanceReport(request: AttendanceReportRequest): Observable<AttendanceRecord[]> {\r\n    return this.http.post<AttendanceRecord[]>(`${this.apiUrl}/report`, request);\r\n  }\r\n\r\n  /**\r\n   * Get attendance record for specific employee and date\r\n   */\r\n  getEmployeeAttendanceRecord(employeeId: number, date: string): Observable<AttendanceRecord> {\r\n    return this.http.get<AttendanceRecord>(`${this.apiUrl}/employee/${employeeId}/date/${date}`);\r\n  }\r\n\r\n  /**\r\n   * Create a new attendance transaction\r\n   */\r\n  createTransaction(request: CreateAttendanceTransactionRequest): Observable<AttendanceTransaction> {\r\n    return this.http.post<AttendanceTransaction>(`${this.apiUrl}/transactions`, request);\r\n  }\r\n\r\n  /**\r\n   * Get specific attendance transaction by ID\r\n   */\r\n  getTransaction(id: number): Observable<AttendanceTransaction> {\r\n    return this.http.get<AttendanceTransaction>(`${this.apiUrl}/transactions/${id}`);\r\n  }\r\n\r\n  /**\r\n   * Get attendance statistics for specified period\r\n   */\r\n  getAttendanceStatistics(\r\n    startDate: string,\r\n    endDate: string,\r\n    branchId?: number,\r\n    departmentId?: number\r\n  ): Observable<AttendanceStatistics> {\r\n    let params = new HttpParams()\r\n      .set('startDate', startDate)\r\n      .set('endDate', endDate);\r\n\r\n    if (branchId) {\r\n      params = params.set('branchId', branchId.toString());\r\n    }\r\n    if (departmentId) {\r\n      params = params.set('departmentId', departmentId.toString());\r\n    }\r\n\r\n    return this.http.get<AttendanceStatistics>(`${this.apiUrl}/statistics`, { params });\r\n  }\r\n\r\n  /**\r\n   * Get incomplete attendance records (missing check-out)\r\n   */\r\n  getIncompleteRecords(branchId?: number, upToDate?: string): Observable<AttendanceRecord[]> {\r\n    let params = new HttpParams();\r\n\r\n    if (branchId) {\r\n      params = params.set('branchId', branchId.toString());\r\n    }\r\n    if (upToDate) {\r\n      params = params.set('upToDate', upToDate);\r\n    }\r\n\r\n    return this.http.get<AttendanceRecord[]>(`${this.apiUrl}/incomplete`, { params });\r\n  }\r\n\r\n  /**\r\n   * Generate attendance records for a specific date (Admin only)\r\n   */\r\n  generateAttendance(date: string, branchId?: number): Observable<AttendanceGenerationResult> {\r\n    let params = new HttpParams();\r\n\r\n    if (branchId) {\r\n      params = params.set('branchId', branchId.toString());\r\n    }\r\n\r\n    return this.http.post<AttendanceGenerationResult>(\r\n      `${this.apiUrl}/generate/${date}`,\r\n      {},\r\n      { params }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Run the daily attendance generation process (Admin only)\r\n   * This simulates the background job that runs automatically each day\r\n   */\r\n  runDailyGeneration(): Observable<AttendanceGenerationResult> {\r\n    return this.http.post<AttendanceGenerationResult>(`${this.apiUrl}/generate/daily`, {});\r\n  }\r\n\r\n  /**\r\n   * Get dashboard data with today's statistics and recent activity\r\n   */\r\n  getDashboardData(branchId?: number, departmentId?: number): Observable<AttendanceDashboardData> {\r\n    let params = new HttpParams();\r\n\r\n    if (branchId) {\r\n      params = params.set('branchId', branchId.toString());\r\n    }\r\n    if (departmentId) {\r\n      params = params.set('departmentId', departmentId.toString());\r\n    }\r\n\r\n    return this.http.get<AttendanceDashboardData>(`${this.apiUrl}/dashboard`, { params });\r\n  }\r\n\r\n  /**\r\n   * Get attendance record by ID\r\n   */\r\n  getAttendanceById(attendanceId: number): Observable<AttendanceRecord> {\r\n    return this.http.get<AttendanceRecord>(`${this.apiUrl}/${attendanceId}`);\r\n  }\r\n\r\n  /**\r\n   * Get attendance records for a specific date range and employee\r\n   */\r\n  getEmployeeAttendanceHistory(\r\n    employeeId: number,\r\n    startDate: string,\r\n    endDate: string\r\n  ): Observable<AttendanceRecord[]> {\r\n    const request: AttendanceReportRequest = {\r\n      startDate,\r\n      endDate,\r\n      employeeId,\r\n      includeTransactions: true,\r\n      includeWorkingDayAnalysis: true,\r\n      pageNumber: 1,\r\n      pageSize: 1000 // Large number to get all records\r\n    };\r\n\r\n    return this.getAttendanceReport(request);\r\n  }\r\n\r\n  /**\r\n   * Get comprehensive attendance history for a specific employee with absent days included.\r\n   * This method ensures that missing attendance records are generated as \"Absent\" status.\r\n   */\r\n  getEmployeeAttendanceHistoryComplete(\r\n    employeeId: number,\r\n    startDate: string,\r\n    endDate: string\r\n  ): Observable<AttendanceRecord[]> {\r\n    let params = new HttpParams()\r\n      .set('startDate', startDate)\r\n      .set('endDate', endDate);\r\n\r\n    return this.http.get<AttendanceRecord[]>(`${this.apiUrl}/employee/${employeeId}/history`, { params });\r\n  }\r\n\r\n  /**\r\n   * Get daily attendance for all employees on a specific date\r\n   */\r\n  getDailyAttendance(\r\n    date: string,\r\n    branchId?: number,\r\n    departmentId?: number,\r\n    employeeId?: number\r\n  ): Observable<AttendanceRecord[]> {\r\n    const request: AttendanceReportRequest = {\r\n      startDate: date,\r\n      endDate: date,\r\n      branchId,\r\n      departmentId,\r\n      employeeId,\r\n      includeTransactions: false,\r\n      includeWorkingDayAnalysis: false,\r\n      pageNumber: 1,\r\n      pageSize: 1000\r\n    };\r\n\r\n    return this.getAttendanceReport(request);\r\n  }\r\n\r\n  /**\r\n   * Bulk create transactions (for import functionality)\r\n   */\r\n  bulkCreateTransactions(transactions: CreateAttendanceTransactionRequest[]): Observable<AttendanceTransaction[]> {\r\n    // This would require a bulk endpoint on the backend\r\n    // For now, we'll make individual calls\r\n    return new Observable(observer => {\r\n      const results: AttendanceTransaction[] = [];\r\n      let completed = 0;\r\n\r\n      transactions.forEach(transaction => {\r\n        this.createTransaction(transaction).subscribe({\r\n          next: (result) => {\r\n            results.push(result);\r\n            completed++;\r\n            if (completed === transactions.length) {\r\n              observer.next(results);\r\n              observer.complete();\r\n            }\r\n          },\r\n          error: (error) => observer.error(error)\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get transactions by date\r\n   */\r\n  getTransactionsByDate(date: string): Observable<AttendanceTransaction[]> {\r\n    return this.http.get<AttendanceTransaction[]>(`${this.apiUrl}/transactions/date/${date}`);\r\n  }\r\n\r\n  /**\r\n   * Delete transaction\r\n   */\r\n  deleteTransaction(transactionId: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/transactions/${transactionId}`);\r\n  }\r\n\r\n  /**\r\n   * Get employee attendance records (multiple records)\r\n   */\r\n  getEmployeeAttendanceRecords(\r\n    employeeId: number,\r\n    startDate: string,\r\n    endDate: string\r\n  ): Observable<AttendanceRecord[]> {\r\n    return this.getEmployeeAttendanceHistory(employeeId, startDate, endDate);\r\n  }\r\n\r\n  /**\r\n   * Get employee recent transactions\r\n   */\r\n  getEmployeeRecentTransactions(employeeId: number, limit: number = 10): Observable<AttendanceTransaction[]> {\r\n    let params = new HttpParams()\r\n      .set('employeeId', employeeId.toString())\r\n      .set('limit', limit.toString());\r\n\r\n    return this.http.get<AttendanceTransaction[]>(`${this.apiUrl}/transactions/recent`, { params });\r\n  }\r\n\r\n  /**\r\n   * Get attendance record by ID for editing\r\n   */\r\n  getAttendanceRecordById(recordId: number): Observable<AttendanceRecord> {\r\n    return this.http.get<AttendanceRecord>(`${this.apiUrl}/${recordId}`);\r\n  }\r\n\r\n  /**\r\n   * Update attendance record with manual overrides\r\n   */\r\n  updateAttendanceRecord(recordId: number, request: UpdateAttendanceRecordRequest): Observable<AttendanceRecord> {\r\n    return this.http.put<AttendanceRecord>(`${this.apiUrl}/${recordId}`, request);\r\n  }\r\n\r\n  /**\r\n   * Update multiple attendance records in bulk\r\n   */\r\n  bulkUpdateAttendanceRecords(requests: BulkAttendanceUpdateRequest[]): Observable<BulkUpdateResult[]> {\r\n    return this.http.put<BulkUpdateResult[]>(`${this.apiUrl}/bulk-update`, requests);\r\n  }\r\n\r\n  // ====================================================================\r\n  // ENHANCED MANUAL CALCULATION METHODS\r\n  // ====================================================================\r\n\r\n  /**\r\n   * Manually calculate attendance for a specific employee on a specific date.\r\n   * This allows manual recalculation of attendance based on the shift assigned on that date.\r\n   */\r\n  calculateAttendanceForEmployeeDate(employeeId: number, date: string): Observable<AttendanceRecord> {\r\n    return this.http.post<AttendanceRecord>(`${this.apiUrl}/calculate/employee/${employeeId}/date/${date}`, {});\r\n  }\r\n\r\n  /**\r\n   * Manually calculate attendance for all employees on a specific date.\r\n   * This forces recalculation/generation for all active employees.\r\n   */\r\n  calculateAttendanceForDate(date: string, forceRecalculate: boolean = false): Observable<AttendanceGenerationResult> {\r\n    let params = new HttpParams();\r\n    if (forceRecalculate) {\r\n      params = params.set('forceRecalculate', forceRecalculate.toString());\r\n    }\r\n\r\n    return this.http.post<AttendanceGenerationResult>(`${this.apiUrl}/calculate/date/${date}`, {}, { params });\r\n  }\r\n\r\n  /**\r\n   * Bulk manual calculation for multiple employees and dates.\r\n   * Useful for fixing attendance records after system issues or data imports.\r\n   */\r\n  bulkCalculateAttendance(request: BulkCalculationRequest): Observable<BulkCalculationResult> {\r\n    return this.http.post<BulkCalculationResult>(`${this.apiUrl}/calculate/bulk`, request);\r\n  }\r\n\r\n  /**\r\n   * Recalculate a specific attendance record (useful after editing transactions)\r\n   */\r\n  recalculateAttendanceRecord(recordId: number): Observable<AttendanceRecord> {\r\n    return this.http.post<AttendanceRecord>(`${this.apiUrl}/${recordId}/recalculate`, {});\r\n  }\r\n\r\n  /**\r\n   * Force generation of attendance record for employee on specific date\r\n   * This is useful when an employee was added after the daily generation ran\r\n   */\r\n  forceGenerateAttendanceRecord(employeeId: number, date: string): Observable<AttendanceRecord> {\r\n    return this.calculateAttendanceForEmployeeDate(employeeId, date);\r\n  }\r\n\r\n  /**\r\n   * Change shift for a specific attendance record\r\n   * This creates a temporary shift assignment for the attendance date and recalculates attendance\r\n   */\r\n  changeAttendanceShift(changeData: {attendanceId: number, shiftId: number, notes?: string}): Observable<AttendanceRecord> {\r\n    const request = {\r\n      shiftId: changeData.shiftId,\r\n      notes: changeData.notes\r\n    };\r\n    return this.http.post<AttendanceRecord>(`${this.apiUrl}/${changeData.attendanceId}/change-shift`, request);\r\n  }\r\n\r\n  /**\r\n   * Get monthly attendance report with summary statistics and employee records\r\n   */\r\n  getMonthlyReport(request: {\r\n    month: number;\r\n    year: number;\r\n    branchIds?: number[];\r\n    departmentIds?: number[];\r\n    employeeIds?: number[];\r\n  }): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/monthly-report`, request);\r\n  }\r\n\r\n  /**\r\n   * Get leave, excuse, and remote work details for a specific employee and date.\r\n   * Used in the Daily Attendance Detail page to show comprehensive absence information.\r\n   */\r\n  getLeaveExcuseDetails(employeeId: number, date: string): Observable<LeaveExcuseDetailsResponse> {\r\n    let params = new HttpParams().set('date', date);\r\n    return this.http.get<LeaveExcuseDetailsResponse>(`${this.apiUrl}/employee/${employeeId}/leave-excuse-details`, { params });\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
