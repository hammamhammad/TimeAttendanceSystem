{
  "version": 3,
  "sources": ["src/app/pages/dashboard/dashboard.service.ts", "src/app/pages/dashboard/dashboard.component.ts", "src/app/pages/dashboard/dashboard.component.html"],
  "sourcesContent": ["import { Injectable, signal, effect } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, interval, map, catchError, of } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n/**\r\n * Comprehensive dashboard overview data structure\r\n */\r\nexport interface DashboardOverview {\r\n  organization: OrganizationStatistics;\r\n  humanResources: HumanResourcesStatistics;\r\n  attendance: AttendanceStatistics;\r\n  leaves: LeaveStatistics;\r\n  shifts: ShiftStatistics;\r\n  system: SystemStatistics;\r\n}\r\n\r\n/**\r\n * Organization structure statistics\r\n */\r\nexport interface OrganizationStatistics {\r\n  totalBranches: number;\r\n  totalDepartments: number;\r\n  activeBranches: number;\r\n  activeDepartments: number;\r\n  branchSummaries: BranchSummary[];\r\n  departmentSummaries: DepartmentSummary[];\r\n}\r\n\r\n/**\r\n * Human resources statistics\r\n */\r\nexport interface HumanResourcesStatistics {\r\n  totalEmployees: number;\r\n  activeEmployees: number;\r\n  inactiveEmployees: number;\r\n  totalUsers: number;\r\n  activeUsers: number;\r\n  inactiveUsers: number;\r\n  roleDistribution: RoleDistribution[];\r\n  employmentStatusDistribution: EmploymentStatusDistribution[];\r\n}\r\n\r\n/**\r\n * Attendance overview statistics\r\n */\r\nexport interface AttendanceStatistics {\r\n  todayPresent: number;\r\n  todayAbsent: number;\r\n  todayLate: number;\r\n  attendanceRate: number;\r\n  todayOvertime: number;\r\n  weeklyTrend: DailyAttendanceTrend[];\r\n  incompleteRecords: IncompleteAttendanceRecord[];\r\n}\r\n\r\n/**\r\n * Leave management statistics\r\n */\r\nexport interface LeaveStatistics {\r\n  pendingRequests: number;\r\n  approvedToday: number;\r\n  onLeaveToday: number;\r\n  rejectedToday: number;\r\n  upcomingVacations: VacationSummary[];\r\n  vacationTypeBreakdown: VacationTypeSummary[];\r\n}\r\n\r\n/**\r\n * Shift management statistics\r\n */\r\nexport interface ShiftStatistics {\r\n  activeShifts: number;\r\n  totalShiftAssignments: number;\r\n  todayCoverage: number;\r\n  unassignedShifts: number;\r\n  shiftCoverage: ShiftCoverageSummary[];\r\n}\r\n\r\n/**\r\n * System health and activity statistics\r\n */\r\nexport interface SystemStatistics {\r\n  activeSessions: number;\r\n  lastBackup: string;\r\n  systemUptime: string;\r\n  recentActivities: RecentActivity[];\r\n  todayLogins: number;\r\n  todayApiCalls: number;\r\n}\r\n\r\n// Supporting interfaces\r\nexport interface BranchSummary {\r\n  id: number;\r\n  name: string;\r\n  employeeCount: number;\r\n  activeEmployees: number;\r\n  isActive: boolean;\r\n}\r\n\r\nexport interface DepartmentSummary {\r\n  id: number;\r\n  name: string;\r\n  branchName: string;\r\n  employeeCount: number;\r\n  activeEmployees: number;\r\n  isActive: boolean;\r\n}\r\n\r\nexport interface RoleDistribution {\r\n  roleName: string;\r\n  userCount: number;\r\n  percentage: number;\r\n}\r\n\r\nexport interface EmploymentStatusDistribution {\r\n  status: string;\r\n  count: number;\r\n  percentage: number;\r\n}\r\n\r\nexport interface DailyAttendanceTrend {\r\n  date: string;\r\n  totalEmployees: number;\r\n  presentEmployees: number;\r\n  absentEmployees: number;\r\n  lateEmployees: number;\r\n  attendanceRate: number;\r\n}\r\n\r\nexport interface IncompleteAttendanceRecord {\r\n  employeeId: number;\r\n  employeeNumber: string;\r\n  employeeName: string;\r\n  date: string;\r\n  status: string;\r\n  checkInTime?: string;\r\n  checkOutTime?: string;\r\n}\r\n\r\nexport interface VacationSummary {\r\n  vacationId: number;\r\n  employeeId: number;\r\n  employeeNumber: string;\r\n  employeeName: string;\r\n  vacationType: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  daysCount: number;\r\n  status: string;\r\n}\r\n\r\nexport interface VacationTypeSummary {\r\n  vacationType: string;\r\n  totalRequests: number;\r\n  pendingRequests: number;\r\n  approvedRequests: number;\r\n  rejectedRequests: number;\r\n}\r\n\r\nexport interface ShiftCoverageSummary {\r\n  shiftId: number;\r\n  shiftName: string;\r\n  timeRange: string;\r\n  requiredEmployees: number;\r\n  assignedEmployees: number;\r\n  coveragePercentage: number;\r\n}\r\n\r\nexport interface RecentActivity {\r\n  id: number;\r\n  activityType: string;\r\n  description: string;\r\n  userName: string;\r\n  timestamp: string;\r\n  module: string;\r\n  action: string;\r\n}\r\n\r\n/**\r\n * Dashboard filter options\r\n */\r\nexport interface DashboardFilters {\r\n  branchId?: number;\r\n  departmentId?: number;\r\n  refreshInterval?: number; // in seconds\r\n}\r\n\r\n/**\r\n * Service for managing comprehensive dashboard data.\r\n * Provides system-wide statistics with real-time updates and permission-based filtering.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService {\r\n  private readonly apiUrl = `${environment.apiUrl}/api/v1/dashboard`;\r\n\r\n  // Signal-based state management\r\n  private readonly _dashboardData = signal<DashboardOverview | null>(null);\r\n  private readonly _loading = signal<boolean>(false);\r\n  private readonly _error = signal<string | null>(null);\r\n  private readonly _lastRefresh = signal<Date | null>(null);\r\n  private readonly _autoRefresh = signal<boolean>(false);\r\n  private readonly _refreshInterval = signal<number>(30); // seconds\r\n\r\n  // Read-only signals for external consumption\r\n  readonly dashboardData = this._dashboardData.asReadonly();\r\n  readonly loading = this._loading.asReadonly();\r\n  readonly error = this._error.asReadonly();\r\n  readonly lastRefresh = this._lastRefresh.asReadonly();\r\n  readonly autoRefresh = this._autoRefresh.asReadonly();\r\n  readonly refreshInterval = this._refreshInterval.asReadonly();\r\n\r\n  // BehaviorSubject for reactive dashboard updates\r\n  private dashboardSubject = new BehaviorSubject<DashboardOverview | null>(null);\r\n  public dashboard$ = this.dashboardSubject.asObservable();\r\n\r\n  // Auto-refresh subscription\r\n  private refreshSubscription: any;\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Auto-refresh will be managed manually through component methods\r\n    // Removed effect() to prevent infinite loop issues\r\n  }\r\n\r\n  /**\r\n   * Gets comprehensive dashboard overview data\r\n   */\r\n  getDashboardOverview(filters?: DashboardFilters): Observable<DashboardOverview> {\r\n    this._loading.set(true);\r\n    this._error.set(null);\r\n\r\n    let params = new HttpParams();\r\n    if (filters?.branchId) {\r\n      params = params.set('branchId', filters.branchId.toString());\r\n    }\r\n    if (filters?.departmentId) {\r\n      params = params.set('departmentId', filters.departmentId.toString());\r\n    }\r\n\r\n    return this.http.get<DashboardOverview>(`${this.apiUrl}/overview`, { params })\r\n      .pipe(\r\n        map(data => {\r\n          this._dashboardData.set(data);\r\n          this._lastRefresh.set(new Date());\r\n          this._loading.set(false);\r\n          this.dashboardSubject.next(data);\r\n          return data;\r\n        }),\r\n        catchError(error => {\r\n          this._error.set(error.message || 'Failed to load dashboard data');\r\n          this._loading.set(false);\r\n          console.error('Dashboard data loading failed:', error);\r\n          return of({\r\n            organization: {} as OrganizationStatistics,\r\n            humanResources: {} as HumanResourcesStatistics,\r\n            attendance: {} as AttendanceStatistics,\r\n            leaves: {} as LeaveStatistics,\r\n            shifts: {} as ShiftStatistics,\r\n            system: {} as SystemStatistics\r\n          } as DashboardOverview);\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Gets specific widget data for incremental updates\r\n   */\r\n  getWidgetData(widgetName: string, filters?: DashboardFilters): Observable<any> {\r\n    let params = new HttpParams();\r\n    if (filters?.branchId) {\r\n      params = params.set('branchId', filters.branchId.toString());\r\n    }\r\n    if (filters?.departmentId) {\r\n      params = params.set('departmentId', filters.departmentId.toString());\r\n    }\r\n\r\n    return this.http.get<any>(`${this.apiUrl}/widgets/${widgetName}`, { params })\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error(`Failed to load ${widgetName} widget data:`, error);\r\n          return of(null);\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Refreshes dashboard data manually\r\n   */\r\n  refreshDashboard(filters?: DashboardFilters): void {\r\n    this.getDashboardOverview(filters).subscribe();\r\n  }\r\n\r\n  /**\r\n   * Starts auto-refresh functionality\r\n   */\r\n  startAutoRefresh(intervalSeconds?: number): void {\r\n    if (intervalSeconds) {\r\n      this._refreshInterval.set(intervalSeconds);\r\n    }\r\n\r\n    this.stopAutoRefresh(); // Stop any existing refresh\r\n\r\n    this._autoRefresh.set(true);\r\n\r\n    this.refreshSubscription = interval(this._refreshInterval() * 1000)\r\n      .subscribe(() => {\r\n        if (this._autoRefresh()) {\r\n          this.refreshDashboard();\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Stops auto-refresh functionality\r\n   */\r\n  stopAutoRefresh(): void {\r\n    if (this.refreshSubscription) {\r\n      this.refreshSubscription.unsubscribe();\r\n      this.refreshSubscription = null;\r\n    }\r\n    this._autoRefresh.set(false);\r\n  }\r\n\r\n  /**\r\n   * Updates refresh interval\r\n   */\r\n  updateRefreshInterval(seconds: number): void {\r\n    this._refreshInterval.set(seconds);\r\n    if (this._autoRefresh()) {\r\n      this.startAutoRefresh(seconds);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears dashboard data and error state\r\n   */\r\n  clearData(): void {\r\n    this._dashboardData.set(null);\r\n    this._error.set(null);\r\n    this._lastRefresh.set(null);\r\n    this.dashboardSubject.next(null);\r\n  }\r\n\r\n  /**\r\n   * Gets formatted time since last refresh\r\n   */\r\n  getTimeSinceLastRefresh(): string {\r\n    const lastRefresh = this._lastRefresh();\r\n    if (!lastRefresh) return 'Never';\r\n\r\n    const now = new Date();\r\n    const diffMs = now.getTime() - lastRefresh.getTime();\r\n    const diffSeconds = Math.floor(diffMs / 1000);\r\n    const diffMinutes = Math.floor(diffSeconds / 60);\r\n\r\n    if (diffSeconds < 60) {\r\n      return `${diffSeconds} seconds ago`;\r\n    } else if (diffMinutes < 60) {\r\n      return `${diffMinutes} minutes ago`;\r\n    } else {\r\n      const diffHours = Math.floor(diffMinutes / 60);\r\n      return `${diffHours} hours ago`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if dashboard data is available\r\n   */\r\n  hasData(): boolean {\r\n    return this._dashboardData() !== null;\r\n  }\r\n\r\n  /**\r\n   * Gets current dashboard filters (if any were applied)\r\n   */\r\n  getCurrentFilters(): DashboardFilters {\r\n    // This would be enhanced to store and return current filters\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Destroys the service and cleans up subscriptions\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.stopAutoRefresh();\r\n  }\r\n}", "import { Component, signal, computed, OnInit, OnDestroy, effect, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthService } from '../../core/auth/auth.service';\r\nimport { I18nService } from '../../core/i18n/i18n.service';\r\nimport { DashboardService, DashboardOverview, DashboardFilters } from './dashboard.service';\r\nimport { NotificationService } from '../../core/notifications/notification.service';\r\nimport { PageHeaderComponent } from '../../shared/components/page-header/page-header.component';\r\nimport { LoadingSpinnerComponent } from '../../shared/components/loading-spinner/loading-spinner.component';\r\nimport { StatsGridComponent, StatGridItem } from '../../shared/components/stats-grid/stats-grid.component';\r\n\r\ninterface DashboardCard {\r\n  title: string;\r\n  value: number;\r\n  icon: string;\r\n  color: string;\r\n  change?: number;\r\n  trend?: 'up' | 'down' | 'stable';\r\n  module: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, PageHeaderComponent, LoadingSpinnerComponent, StatsGridComponent],\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrl: './dashboard.component.css'\r\n})\r\nexport class DashboardComponent implements OnInit, OnDestroy {\r\n  currentUser = computed(() => this.authService.currentUser());\r\n\r\n  // Dashboard state - will be initialized in ngOnInit\r\n  dashboardData!: any;\r\n  loading!: any;\r\n  error!: any;\r\n  lastRefresh!: any;\r\n  autoRefresh!: any;\r\n\r\n  // Dashboard cards computed from API data\r\n  dashboardCards = computed(() => {\r\n    const data = this.dashboardData();\r\n    if (!data) return [];\r\n\r\n    return [\r\n      {\r\n        title: this.t('dashboard.total_employees'),\r\n        value: data.humanResources?.totalEmployees || 0,\r\n        icon: 'fa-solid fa-users',\r\n        color: 'primary',\r\n        change: this.calculateChange(data.humanResources?.activeEmployees, data.humanResources?.totalEmployees),\r\n        trend: 'up' as const,\r\n        module: 'humanResources'\r\n      },\r\n      {\r\n        title: this.t('dashboard.today_attendance'),\r\n        value: data.attendance?.todayPresent || 0,\r\n        icon: 'fa-solid fa-calendar-check',\r\n        color: 'success',\r\n        change: data.attendance?.attendanceRate || 0,\r\n        trend: (data.attendance?.attendanceRate || 0) >= 90 ? 'up' as const : 'down' as const,\r\n        module: 'attendance'\r\n      },\r\n      {\r\n        title: this.t('dashboard.pending_vacations'),\r\n        value: data.leaves?.pendingRequests || 0,\r\n        icon: 'fa-solid fa-calendar-times',\r\n        color: 'warning',\r\n        trend: 'stable' as const,\r\n        module: 'leaves'\r\n      },\r\n      {\r\n        title: this.t('dashboard.active_shifts'),\r\n        value: data.shifts?.activeShifts || 0,\r\n        icon: 'fa-solid fa-clock',\r\n        color: 'info',\r\n        trend: 'stable' as const,\r\n        module: 'shifts'\r\n      },\r\n      {\r\n        title: this.t('dashboard.total_branches'),\r\n        value: data.organization?.totalBranches || 0,\r\n        icon: 'fa-solid fa-code-branch',\r\n        color: 'secondary',\r\n        trend: 'stable' as const,\r\n        module: 'organization'\r\n      },\r\n      {\r\n        title: this.t('dashboard.active_users'),\r\n        value: data.humanResources?.activeUsers || 0,\r\n        icon: 'fa-solid fa-user-check',\r\n        color: 'primary',\r\n        trend: 'up' as const,\r\n        module: 'humanResources'\r\n      },\r\n      {\r\n        title: this.t('dashboard.today_late'),\r\n        value: data.attendance?.todayLate || 0,\r\n        icon: 'fa-solid fa-exclamation-triangle',\r\n        color: 'danger',\r\n        trend: (data.attendance?.todayLate || 0) > 5 ? 'up' as const : 'down' as const,\r\n        module: 'attendance'\r\n      },\r\n      {\r\n        title: this.t('dashboard.active_sessions'),\r\n        value: data.system?.activeSessions || 0,\r\n        icon: 'fa-solid fa-wifi',\r\n        color: 'info',\r\n        trend: 'stable' as const,\r\n        module: 'system'\r\n      }\r\n    ];\r\n  });\r\n\r\n  // Transform dashboard cards to StatGridItems for StatsGridComponent\r\n  dashboardStats = computed<StatGridItem[]>(() => {\r\n    const cards = this.dashboardCards();\r\n    return cards.map(card => ({\r\n      label: card.title,\r\n      value: card.value,\r\n      icon: card.icon,\r\n      variant: this.mapColorToVariant(card.color),\r\n      change: card.change !== undefined ? {\r\n        value: Math.abs(card.change),\r\n        type: card.trend === 'up' ? 'increase' as const : card.trend === 'down' ? 'decrease' as const : 'neutral' as const,\r\n        isPercentage: card.module === 'attendance'\r\n      } : undefined\r\n    }));\r\n  });\r\n\r\n  // Filter state\r\n  filters = signal<DashboardFilters>({});\r\n  availableBranches = signal<any[]>([]);\r\n  availableDepartments = signal<any[]>([]);\r\n\r\n  // Widget visibility based on user permissions\r\n  showOrganizationWidget = computed(() => this.hasPermission('branch.read') || this.hasPermission('department.read'));\r\n  showHumanResourcesWidget = computed(() => this.hasPermission('user.read') || this.hasPermission('employee.read'));\r\n  showAttendanceWidget = computed(() => this.hasPermission('attendance.read'));\r\n  showVacationWidget = computed(() => this.hasPermission('vacation.read'));\r\n  showShiftWidget = computed(() => this.hasPermission('shift.read'));\r\n  showSystemWidget = computed(() => this.isSystemAdmin());\r\n\r\n  // Auto-refresh options\r\n  refreshIntervals = [\r\n    { value: 15, label: '15 seconds' },\r\n    { value: 30, label: '30 seconds' },\r\n    { value: 60, label: '1 minute' },\r\n    { value: 300, label: '5 minutes' },\r\n    { value: 900, label: '15 minutes' }\r\n  ];\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    public i18n: I18nService,\r\n    public dashboardService: DashboardService,\r\n    private notificationService: NotificationService\r\n  ) {\r\n    this.setupErrorHandling();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Initialize dashboard state signals\r\n    this.dashboardData = this.dashboardService.dashboardData;\r\n    this.loading = this.dashboardService.loading;\r\n    this.error = this.dashboardService.error;\r\n    this.lastRefresh = this.dashboardService.lastRefresh;\r\n    this.autoRefresh = this.dashboardService.autoRefresh;\r\n\r\n    this.loadDashboardData();\r\n    this.loadFilterOptions();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.dashboardService.stopAutoRefresh();\r\n  }\r\n\r\n  /**\r\n   * Loads dashboard data with current filters\r\n   */\r\n  loadDashboardData(): void {\r\n    const filters = this.filters();\r\n    this.dashboardService.getDashboardOverview(filters).subscribe({\r\n      next: (data) => {\r\n        // Update available options based on loaded data\r\n        if (data.organization?.branchSummaries) {\r\n          this.availableBranches.set(data.organization.branchSummaries);\r\n        }\r\n        if (data.organization?.departmentSummaries) {\r\n          this.availableDepartments.set(data.organization.departmentSummaries);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        this.notificationService.error(this.t('dashboard.load_error'));\r\n        console.error('Dashboard load failed:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refreshes dashboard data manually\r\n   */\r\n  refreshData(): void {\r\n    this.dashboardService.refreshDashboard(this.filters());\r\n    this.notificationService.success(this.t('dashboard.refreshed'));\r\n  }\r\n\r\n  /**\r\n   * Updates dashboard filters\r\n   */\r\n  updateFilters(newFilters: Partial<DashboardFilters>): void {\r\n    this.filters.update(current => ({ ...current, ...newFilters }));\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  /**\r\n   * Toggles auto-refresh functionality\r\n   */\r\n  toggleAutoRefresh(): void {\r\n    if (this.autoRefresh()) {\r\n      this.dashboardService.stopAutoRefresh();\r\n      this.notificationService.info(this.t('dashboard.auto_refresh_disabled'));\r\n    } else {\r\n      this.dashboardService.startAutoRefresh();\r\n      this.notificationService.info(this.t('dashboard.auto_refresh_enabled'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates auto-refresh interval\r\n   */\r\n  updateRefreshInterval(seconds: number): void {\r\n    this.dashboardService.updateRefreshInterval(seconds);\r\n    if (this.autoRefresh()) {\r\n      this.notificationService.info(\r\n        this.t('dashboard.refresh_interval_updated')\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets formatted time since last refresh\r\n   */\r\n  getTimeSinceLastRefresh(): string {\r\n    return this.dashboardService.getTimeSinceLastRefresh();\r\n  }\r\n\r\n  /**\r\n   * Translation helper\r\n   */\r\n  t(key: string): string {\r\n    return this.i18n.t(key);\r\n  }\r\n\r\n  /**\r\n   * Gets card color class for styling\r\n   */\r\n  getCardColorClass(color: string): string {\r\n    return `card-${color}`;\r\n  }\r\n\r\n  /**\r\n   * Gets trend icon for dashboard cards\r\n   */\r\n  getTrendIcon(trend?: string): string {\r\n    switch (trend) {\r\n      case 'up': return 'fa-solid fa-arrow-up text-success';\r\n      case 'down': return 'fa-solid fa-arrow-down text-danger';\r\n      default: return 'fa-solid fa-minus text-muted';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates percentage change\r\n   */\r\n  private calculateChange(current?: number, total?: number): number {\r\n    if (!current || !total || total === 0) return 0;\r\n    return Math.round((current / total) * 100);\r\n  }\r\n\r\n  /**\r\n   * Maps dashboard card color to StatGridItem variant\r\n   */\r\n  private mapColorToVariant(color: string): 'primary' | 'success' | 'warning' | 'danger' | 'info' | 'secondary' {\r\n    const variantMap: Record<string, 'primary' | 'success' | 'warning' | 'danger' | 'info' | 'secondary'> = {\r\n      'primary': 'primary',\r\n      'success': 'success',\r\n      'warning': 'warning',\r\n      'danger': 'danger',\r\n      'info': 'info',\r\n      'secondary': 'secondary'\r\n    };\r\n    return variantMap[color] || 'primary';\r\n  }\r\n\r\n  /**\r\n   * Checks if user has specific permission\r\n   */\r\n  private hasPermission(permission: string): boolean {\r\n    const user = this.currentUser();\r\n    return user?.permissions?.includes(permission) || this.isSystemAdmin();\r\n  }\r\n\r\n  /**\r\n   * Checks if user is system admin\r\n   */\r\n  private isSystemAdmin(): boolean {\r\n    const user = this.currentUser();\r\n    return user?.roles?.includes('SystemAdmin') || false;\r\n  }\r\n\r\n  /**\r\n   * Sets up error handling for dashboard service\r\n   */\r\n  private setupErrorHandling(): void {\r\n    // Subscribe to error state changes using effect\r\n    effect(() => {\r\n      const errorMsg = this.error();\r\n      if (errorMsg) {\r\n        this.notificationService.error(errorMsg);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Loads filter options (branches, departments)\r\n   */\r\n  private loadFilterOptions(): void {\r\n    // This could be enhanced to load filter options independently\r\n    // For now, they're loaded as part of the dashboard data\r\n  }\r\n\r\n  /**\r\n   * Export dashboard data to PDF/CSV (placeholder for future implementation)\r\n   */\r\n  exportDashboard(format: 'pdf' | 'csv'): void {\r\n    // Placeholder for export functionality\r\n    this.notificationService.info(\r\n      this.t('dashboard.export_not_implemented')\r\n    );\r\n  }\r\n}", "<div class=\"dashboard-container\">\n  <!-- Page Header -->\n  <app-page-header\n    [title]=\"t('dashboard.title')\">\n  </app-page-header>\n\n  <!-- Dashboard Controls -->\n  <div class=\"dashboard-controls mb-4\">\n    <div class=\"d-flex justify-content-between align-items-start\">\n      <div class=\"welcome-section\">\n        <p class=\"dashboard-subtitle mb-0\">{{ t('dashboard.welcome') }}</p>\n        @if (lastRefresh()) {\n          <small class=\"text-muted\">\n            <i class=\"fa-solid fa-clock me-1\"></i>\n            {{ t('dashboard.last_refresh') }}: {{ getTimeSinceLastRefresh() }}\n          </small>\n        }\n      </div>\n\n      <div class=\"controls-section\">\n        <!-- Refresh Controls -->\n        <div class=\"d-flex align-items-center gap-3\">\n          <button\n            class=\"btn btn-outline-primary btn-sm\"\n            (click)=\"refreshData()\"\n            [disabled]=\"loading()\">\n            <i class=\"fa-solid fa-refresh\" [class.fa-spin]=\"loading()\"></i>\n            {{ t('dashboard.refresh') }}\n          </button>\n\n          <div class=\"form-check form-switch\">\n            <input\n              class=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"autoRefreshToggle\"\n              [checked]=\"autoRefresh()\"\n              (change)=\"toggleAutoRefresh()\">\n            <label class=\"form-check-label\" for=\"autoRefreshToggle\">\n              {{ t('dashboard.auto_refresh') }}\n            </label>\n          </div>\n\n          <!-- Filters -->\n          <div class=\"d-flex gap-2\">\n            @if (availableBranches().length > 1) {\n              <select\n                class=\"form-select form-select-sm\"\n                [value]=\"filters().branchId || ''\"\n                (change)=\"updateFilters({ branchId: $any($event.target).value ? +$any($event.target).value : undefined })\">\n                <option value=\"\">{{ t('dashboard.all_branches') }}</option>\n                @for (branch of availableBranches(); track branch.id) {\n                  <option [value]=\"branch.id\">{{ branch.name }}</option>\n                }\n              </select>\n            }\n\n            @if (availableDepartments().length > 1) {\n              <select\n                class=\"form-select form-select-sm\"\n                [value]=\"filters().departmentId || ''\"\n                (change)=\"updateFilters({ departmentId: $any($event.target).value ? +$any($event.target).value : undefined })\">\n                <option value=\"\">{{ t('dashboard.all_departments') }}</option>\n                @for (dept of availableDepartments(); track dept.id) {\n                  <option [value]=\"dept.id\">{{ dept.name }}</option>\n                }\n              </select>\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Loading State -->\n  @if (loading()) {\n    <div class=\"loading-overlay\">\n      <div class=\"loading-content\">\n        <app-loading-spinner\n          [message]=\"t('dashboard.loading_comprehensive')\"\n          [variant]=\"'primary'\"\n          [centered]=\"true\">\n        </app-loading-spinner>\n      </div>\n    </div>\n  }\n\n  <!-- Error State -->\n  @if (error() && !loading()) {\n    <div class=\"alert alert-danger\" role=\"alert\">\n      <i class=\"fa-solid fa-exclamation-triangle me-2\"></i>\n      {{ error() }}\n      <button class=\"btn btn-sm btn-outline-danger ms-2\" (click)=\"refreshData()\">\n        {{ t('common.retry') }}\n      </button>\n    </div>\n  }\n\n  <!-- Dashboard Content -->\n  @if (!loading() && !error()) {\n    <!-- Key Metrics Cards -->\n    <div class=\"metrics-section\">\n      <h2 class=\"section-title\">{{ t('dashboard.key_metrics') }}</h2>\n      <app-stats-grid\n        [stats]=\"dashboardStats()\"\n        [columns]=\"4\"\n        [loading]=\"loading()\">\n      </app-stats-grid>\n    </div>\n\n    <!-- Widget Sections -->\n    <div class=\"widgets-section\">\n      <div class=\"widgets-grid\">\n\n        <!-- Attendance Widget -->\n        @if (showAttendanceWidget() && dashboardData()?.attendance) {\n          <div class=\"widget attendance-widget\">\n            <div class=\"widget-header\">\n              <h3><i class=\"fa-solid fa-calendar-check me-2\"></i>{{ t('dashboard.attendance_overview') }}</h3>\n            </div>\n            <div class=\"widget-content\">\n              <div class=\"attendance-stats\">\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">{{ t('dashboard.present_today') }}</span>\n                  <span class=\"stat-value text-success\">{{ dashboardData()?.attendance.todayPresent || 0 }}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">{{ t('dashboard.absent_today') }}</span>\n                  <span class=\"stat-value text-danger\">{{ dashboardData()?.attendance.todayAbsent || 0 }}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">{{ t('dashboard.late_today') }}</span>\n                  <span class=\"stat-value text-warning\">{{ dashboardData()?.attendance.todayLate || 0 }}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">{{ t('dashboard.attendance_rate') }}</span>\n                  <span class=\"stat-value text-primary\">{{ (dashboardData()?.attendance.attendanceRate || 0) | number:'1.1-1' }}%</span>\n                </div>\n              </div>\n\n              @if (dashboardData()?.attendance?.incompleteRecords?.length) {\n                <div class=\"incomplete-records mt-3\">\n                  <h5>{{ t('dashboard.incomplete_records') }}</h5>\n                  <div class=\"records-list\">\n                    @for (record of dashboardData()?.attendance?.incompleteRecords?.slice(0, 5) || []; track record.employeeId) {\n                      <div class=\"record-item\">\n                        <span class=\"employee-name\">{{ record.employeeName }}</span>\n                        <span class=\"employee-status badge bg-warning\">{{ record.status }}</span>\n                      </div>\n                    }\n                  </div>\n                </div>\n              }\n            </div>\n          </div>\n        }\n\n        <!-- Human Resources Widget -->\n        @if (showHumanResourcesWidget() && dashboardData()?.humanResources) {\n          <div class=\"widget hr-widget\">\n            <div class=\"widget-header\">\n              <h3><i class=\"fa-solid fa-users me-2\"></i>{{ t('dashboard.human_resources') }}</h3>\n            </div>\n            <div class=\"widget-content\">\n              <div class=\"hr-stats\">\n                <div class=\"stat-row\">\n                  <span class=\"stat-label\">{{ t('dashboard.total_employees') }}</span>\n                  <span class=\"stat-value\">{{ dashboardData()?.humanResources.totalEmployees || 0 }}</span>\n                </div>\n                <div class=\"stat-row\">\n                  <span class=\"stat-label\">{{ t('dashboard.active_employees') }}</span>\n                  <span class=\"stat-value text-success\">{{ dashboardData()?.humanResources.activeEmployees || 0 }}</span>\n                </div>\n                <div class=\"stat-row\">\n                  <span class=\"stat-label\">{{ t('dashboard.total_users') }}</span>\n                  <span class=\"stat-value\">{{ dashboardData()?.humanResources.totalUsers || 0 }}</span>\n                </div>\n                <div class=\"stat-row\">\n                  <span class=\"stat-label\">{{ t('dashboard.active_users') }}</span>\n                  <span class=\"stat-value text-success\">{{ dashboardData()?.humanResources.activeUsers || 0 }}</span>\n                </div>\n              </div>\n\n              @if (dashboardData()?.humanResources?.roleDistribution?.length) {\n                <div class=\"role-distribution mt-3\">\n                  <h5>{{ t('dashboard.role_distribution') }}</h5>\n                  @for (role of dashboardData()?.humanResources?.roleDistribution?.slice(0, 4) || []; track role.roleName) {\n                    <div class=\"role-item\">\n                      <span class=\"role-name\">{{ role.roleName }}</span>\n                      <span class=\"role-count\">{{ role.userCount }}</span>\n                      <span class=\"role-percentage\">({{ role.percentage | number:'1.0-0' }}%)</span>\n                    </div>\n                  }\n                </div>\n              }\n            </div>\n          </div>\n        }\n\n        <!-- Vacation/Leave Widget -->\n        @if (showVacationWidget() && dashboardData()?.leaves) {\n          <div class=\"widget vacation-widget\">\n            <div class=\"widget-header\">\n              <h3><i class=\"fa-solid fa-calendar-times me-2\"></i>{{ t('dashboard.leave_management') }}</h3>\n            </div>\n            <div class=\"widget-content\">\n              <div class=\"vacation-stats\">\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">{{ t('dashboard.pending_requests') }}</span>\n                  <span class=\"stat-value text-warning\">{{ dashboardData()?.leaves.pendingRequests || 0 }}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">{{ t('dashboard.on_leave_today') }}</span>\n                  <span class=\"stat-value text-info\">{{ dashboardData()?.leaves.onLeaveToday || 0 }}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">{{ t('dashboard.approved_today') }}</span>\n                  <span class=\"stat-value text-success\">{{ dashboardData()?.leaves.approvedToday || 0 }}</span>\n                </div>\n              </div>\n\n              @if (dashboardData()?.leaves?.upcomingVacations?.length) {\n                <div class=\"upcoming-vacations mt-3\">\n                  <h5>{{ t('dashboard.upcoming_vacations') }}</h5>\n                  @for (vacation of dashboardData()?.leaves?.upcomingVacations?.slice(0, 3) || []; track vacation.vacationId) {\n                    <div class=\"vacation-item\">\n                      <span class=\"employee-name\">{{ vacation.employeeName }}</span>\n                      <span class=\"vacation-type\">{{ vacation.vacationType }}</span>\n                      <span class=\"vacation-dates\">{{ vacation.startDate | date:'shortDate' }} - {{ vacation.endDate | date:'shortDate' }}</span>\n                    </div>\n                  }\n                </div>\n              }\n            </div>\n          </div>\n        }\n\n        <!-- Organization Widget -->\n        @if (showOrganizationWidget() && dashboardData()?.organization) {\n          <div class=\"widget organization-widget\">\n            <div class=\"widget-header\">\n              <h3><i class=\"fa-solid fa-sitemap me-2\"></i>{{ t('dashboard.organization_structure') }}</h3>\n            </div>\n            <div class=\"widget-content\">\n              <div class=\"org-stats\">\n                <div class=\"stat-row\">\n                  <span class=\"stat-label\">{{ t('dashboard.total_branches') }}</span>\n                  <span class=\"stat-value\">{{ dashboardData()?.organization.totalBranches || 0 }}</span>\n                </div>\n                <div class=\"stat-row\">\n                  <span class=\"stat-label\">{{ t('dashboard.active_branches') }}</span>\n                  <span class=\"stat-value text-success\">{{ dashboardData()?.organization.activeBranches || 0 }}</span>\n                </div>\n                <div class=\"stat-row\">\n                  <span class=\"stat-label\">{{ t('dashboard.total_departments') }}</span>\n                  <span class=\"stat-value\">{{ dashboardData()?.organization.totalDepartments || 0 }}</span>\n                </div>\n                <div class=\"stat-row\">\n                  <span class=\"stat-label\">{{ t('dashboard.active_departments') }}</span>\n                  <span class=\"stat-value text-success\">{{ dashboardData()?.organization.activeDepartments || 0 }}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        }\n\n        <!-- Shift Management Widget -->\n        @if (showShiftWidget() && dashboardData()?.shifts) {\n          <div class=\"widget shift-widget\">\n            <div class=\"widget-header\">\n              <h3><i class=\"fa-solid fa-clock me-2\"></i>{{ t('dashboard.shift_management') }}</h3>\n            </div>\n            <div class=\"widget-content\">\n              <div class=\"shift-stats\">\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">{{ t('dashboard.active_shifts') }}</span>\n                  <span class=\"stat-value\">{{ dashboardData()?.shifts.activeShifts || 0 }}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">{{ t('dashboard.total_assignments') }}</span>\n                  <span class=\"stat-value\">{{ dashboardData()?.shifts.totalShiftAssignments || 0 }}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-label\">{{ t('dashboard.today_coverage') }}</span>\n                  <span class=\"stat-value text-success\">{{ dashboardData()?.shifts.todayCoverage || 0 }}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        }\n\n        <!-- System Health Widget -->\n        @if (showSystemWidget() && dashboardData()?.system) {\n          <div class=\"widget system-widget\">\n            <div class=\"widget-header\">\n              <h3><i class=\"fa-solid fa-server me-2\"></i>{{ t('dashboard.system_health') }}</h3>\n            </div>\n            <div class=\"widget-content\">\n              <div class=\"system-stats\">\n                <div class=\"stat-row\">\n                  <span class=\"stat-label\">{{ t('dashboard.active_sessions') }}</span>\n                  <span class=\"stat-value text-success\">{{ dashboardData()?.system.activeSessions || 0 }}</span>\n                </div>\n                <div class=\"stat-row\">\n                  <span class=\"stat-label\">{{ t('dashboard.today_logins') }}</span>\n                  <span class=\"stat-value\">{{ dashboardData()?.system.todayLogins || 0 }}</span>\n                </div>\n                <div class=\"stat-row\">\n                  <span class=\"stat-label\">{{ t('dashboard.system_uptime') }}</span>\n                  <span class=\"stat-value text-info\">{{ dashboardData()?.system.systemUptime || 'N/A' }}</span>\n                </div>\n              </div>\n\n              @if (dashboardData()?.system?.recentActivities?.length) {\n                <div class=\"recent-activities mt-3\">\n                  <h5>{{ t('dashboard.recent_activities') }}</h5>\n                  @for (activity of dashboardData()?.system?.recentActivities?.slice(0, 3) || []; track activity.id) {\n                    <div class=\"activity-item\">\n                      <span class=\"activity-description\">{{ activity.description }}</span>\n                      <span class=\"activity-time\">{{ activity.timestamp | date:'short' }}</span>\n                    </div>\n                  }\n                </div>\n              }\n            </div>\n          </div>\n        }\n\n      </div>\n    </div>\n\n    <!-- Auto-refresh settings -->\n    @if (autoRefresh()) {\n      <div class=\"auto-refresh-settings\">\n        <div class=\"settings-card\">\n          <label for=\"refreshInterval\" class=\"form-label\">{{ t('dashboard.refresh_interval') }}</label>\n          <select\n            id=\"refreshInterval\"\n            class=\"form-select form-select-sm\"\n            [value]=\"dashboardService.refreshInterval()\"\n            (change)=\"updateRefreshInterval(+($any($event.target).value))\">\n            @for (interval of refreshIntervals; track interval.value) {\n              <option [value]=\"interval.value\">{{ interval.label }}</option>\n            }\n          </select>\n        </div>\n      </div>\n    }\n  }"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmMM,IAAO,oBAAP,MAAO,kBAAgB;EA0BP;EAzBH,SAAS,GAAG,YAAY,MAAM;;EAG9B,iBAAiB,OAAiC,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,iBAAA,CAAA,IAAA,CAAA,CAAA;EACtD,WAAW,OAAgB,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,WAAA,CAAA,IAAA,CAAA,CAAA;EAChC,SAAS,OAAsB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,SAAA,CAAA,IAAA,CAAA,CAAA;EACnC,eAAe,OAAoB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,eAAA,CAAA,IAAA,CAAA,CAAA;EACvC,eAAe,OAAgB,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,eAAA,CAAA,IAAA,CAAA,CAAA;EACpC,mBAAmB,OAAe,IAAE,GAAA,YAAA,CAAA,EAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,CAAA;;;EAG5C,gBAAgB,KAAK,eAAe,WAAU;EAC9C,UAAU,KAAK,SAAS,WAAU;EAClC,QAAQ,KAAK,OAAO,WAAU;EAC9B,cAAc,KAAK,aAAa,WAAU;EAC1C,cAAc,KAAK,aAAa,WAAU;EAC1C,kBAAkB,KAAK,iBAAiB,WAAU;;EAGnD,mBAAmB,IAAI,gBAA0C,IAAI;EACtE,aAAa,KAAK,iBAAiB,aAAY;;EAG9C;EAER,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAGpB;;;;EAKA,qBAAqB,SAA0B;AAC7C,SAAK,SAAS,IAAI,IAAI;AACtB,SAAK,OAAO,IAAI,IAAI;AAEpB,QAAI,SAAS,IAAI,WAAU;AAC3B,QAAI,SAAS,UAAU;AACrB,eAAS,OAAO,IAAI,YAAY,QAAQ,SAAS,SAAQ,CAAE;IAC7D;AACA,QAAI,SAAS,cAAc;AACzB,eAAS,OAAO,IAAI,gBAAgB,QAAQ,aAAa,SAAQ,CAAE;IACrE;AAEA,WAAO,KAAK,KAAK,IAAuB,GAAG,KAAK,MAAM,aAAa,EAAE,OAAM,CAAE,EAC1E,KACC,IAAI,UAAO;AACT,WAAK,eAAe,IAAI,IAAI;AAC5B,WAAK,aAAa,IAAI,oBAAI,KAAI,CAAE;AAChC,WAAK,SAAS,IAAI,KAAK;AACvB,WAAK,iBAAiB,KAAK,IAAI;AAC/B,aAAO;IACT,CAAC,GACD,WAAW,WAAQ;AACjB,WAAK,OAAO,IAAI,MAAM,WAAW,+BAA+B;AAChE,WAAK,SAAS,IAAI,KAAK;AACvB,cAAQ,MAAM,kCAAkC,KAAK;AACrD,aAAO,GAAG;QACR,cAAc,CAAA;QACd,gBAAgB,CAAA;QAChB,YAAY,CAAA;QACZ,QAAQ,CAAA;QACR,QAAQ,CAAA;QACR,QAAQ,CAAA;OACY;IACxB,CAAC,CAAC;EAER;;;;EAKA,cAAc,YAAoB,SAA0B;AAC1D,QAAI,SAAS,IAAI,WAAU;AAC3B,QAAI,SAAS,UAAU;AACrB,eAAS,OAAO,IAAI,YAAY,QAAQ,SAAS,SAAQ,CAAE;IAC7D;AACA,QAAI,SAAS,cAAc;AACzB,eAAS,OAAO,IAAI,gBAAgB,QAAQ,aAAa,SAAQ,CAAE;IACrE;AAEA,WAAO,KAAK,KAAK,IAAS,GAAG,KAAK,MAAM,YAAY,UAAU,IAAI,EAAE,OAAM,CAAE,EACzE,KACC,WAAW,WAAQ;AACjB,cAAQ,MAAM,kBAAkB,UAAU,iBAAiB,KAAK;AAChE,aAAO,GAAG,IAAI;IAChB,CAAC,CAAC;EAER;;;;EAKA,iBAAiB,SAA0B;AACzC,SAAK,qBAAqB,OAAO,EAAE,UAAS;EAC9C;;;;EAKA,iBAAiB,iBAAwB;AACvC,QAAI,iBAAiB;AACnB,WAAK,iBAAiB,IAAI,eAAe;IAC3C;AAEA,SAAK,gBAAe;AAEpB,SAAK,aAAa,IAAI,IAAI;AAE1B,SAAK,sBAAsB,SAAS,KAAK,iBAAgB,IAAK,GAAI,EAC/D,UAAU,MAAK;AACd,UAAI,KAAK,aAAY,GAAI;AACvB,aAAK,iBAAgB;MACvB;IACF,CAAC;EACL;;;;EAKA,kBAAe;AACb,QAAI,KAAK,qBAAqB;AAC5B,WAAK,oBAAoB,YAAW;AACpC,WAAK,sBAAsB;IAC7B;AACA,SAAK,aAAa,IAAI,KAAK;EAC7B;;;;EAKA,sBAAsB,SAAe;AACnC,SAAK,iBAAiB,IAAI,OAAO;AACjC,QAAI,KAAK,aAAY,GAAI;AACvB,WAAK,iBAAiB,OAAO;IAC/B;EACF;;;;EAKA,YAAS;AACP,SAAK,eAAe,IAAI,IAAI;AAC5B,SAAK,OAAO,IAAI,IAAI;AACpB,SAAK,aAAa,IAAI,IAAI;AAC1B,SAAK,iBAAiB,KAAK,IAAI;EACjC;;;;EAKA,0BAAuB;AACrB,UAAM,cAAc,KAAK,aAAY;AACrC,QAAI,CAAC;AAAa,aAAO;AAEzB,UAAM,MAAM,oBAAI,KAAI;AACpB,UAAM,SAAS,IAAI,QAAO,IAAK,YAAY,QAAO;AAClD,UAAM,cAAc,KAAK,MAAM,SAAS,GAAI;AAC5C,UAAM,cAAc,KAAK,MAAM,cAAc,EAAE;AAE/C,QAAI,cAAc,IAAI;AACpB,aAAO,GAAG,WAAW;IACvB,WAAW,cAAc,IAAI;AAC3B,aAAO,GAAG,WAAW;IACvB,OAAO;AACL,YAAM,YAAY,KAAK,MAAM,cAAc,EAAE;AAC7C,aAAO,GAAG,SAAS;IACrB;EACF;;;;EAKA,UAAO;AACL,WAAO,KAAK,eAAc,MAAO;EACnC;;;;EAKA,oBAAiB;AAEf,WAAO,CAAA;EACT;;;;EAKA,cAAW;AACT,SAAK,gBAAe;EACtB;;AAhM2B;cAAhB;mCAAA,mBAAgB,mBAAA,UAAA,CAAA;AAAA;cAAhB,uFAAA,mBAAgB,SAAhB,kBAAgB,WAAA,YAFf,OAAM,CAAA;AAEd,IAAO,mBAAP;;sEAAO,kBAAgB,CAAA;UAH5B;WAAW;MACV,YAAY;KACb;;;;;;;;;;;;;AEtLS,IAAA,yBAAA,GAAA,SAAA,CAAA;AACE,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,EAAA,wBAAA,GAAA,MAAA,OAAA,wBAAA,GAAA,GAAA;;;;;;AAqCM,IAAA,yBAAA,GAAA,UAAA,EAAA;AAA4B,IAAA,iBAAA,CAAA;AAAiB,IAAA,uBAAA;;;;AAArC,IAAA,qBAAA,SAAA,UAAA,EAAA;AAAoB,IAAA,oBAAA;AAAA,IAAA,4BAAA,UAAA,IAAA;;;;;;;AANhC,IAAA,yBAAA,GAAA,UAAA,EAAA;AAGE,IAAA,qBAAA,UAAA,gCAAA,oEAAA,QAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAU,OAAA,cAAc,EAAA,UAAA,OAAA,OAAA,QAAA,CAAA,OAAA,OAAA,QAAqE,OAAS,CAAE,CAAC;IAAA,GAAzG,sEAAyG;AACzG,IAAA,yBAAA,GAAA,UAAA,EAAA;AAAiB,IAAA,iBAAA,CAAA;AAAiC,IAAA,uBAAA;AAClD,IAAA,2BAAA,GAAA,kDAAA,GAAA,GAAA,UAAA,IAAA,UAAA;AAGF,IAAA,uBAAA;;;;AANE,IAAA,qBAAA,SAAA,OAAA,QAAA,EAAA,YAAA,EAAA;AAEiB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,wBAAA,CAAA;AACjB,IAAA,oBAAA;AAAA,IAAA,qBAAA,OAAA,kBAAA,CAAmB;;;;;;AAajB,IAAA,yBAAA,GAAA,UAAA,EAAA;AAA0B,IAAA,iBAAA,CAAA;AAAe,IAAA,uBAAA;;;;AAAjC,IAAA,qBAAA,SAAA,QAAA,EAAA;AAAkB,IAAA,oBAAA;AAAA,IAAA,4BAAA,QAAA,IAAA;;;;;;;AAN9B,IAAA,yBAAA,GAAA,UAAA,EAAA;AAGE,IAAA,qBAAA,UAAA,gCAAA,oEAAA,QAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAU,OAAA,cAAc,EAAA,cAAA,OAAA,OAAA,QAAA,CAAA,OAAA,OAAA,QAAyE,OAAS,CAAE,CAAC;IAAA,GAA7G,sEAA6G;AAC7G,IAAA,yBAAA,GAAA,UAAA,EAAA;AAAiB,IAAA,iBAAA,CAAA;AAAoC,IAAA,uBAAA;AACrD,IAAA,2BAAA,GAAA,kDAAA,GAAA,GAAA,UAAA,IAAA,UAAA;AAGF,IAAA,uBAAA;;;;AANE,IAAA,qBAAA,SAAA,OAAA,QAAA,EAAA,gBAAA,EAAA;AAEiB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,2BAAA,CAAA;AACjB,IAAA,oBAAA;AAAA,IAAA,qBAAA,OAAA,qBAAA,CAAsB;;;;;;AAalC,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA6B,GAAA,OAAA,EAAA;AAEzB,IAAA,oBAAA,GAAA,uBAAA,EAAA;AAKF,IAAA,uBAAA,EAAM;;;;AAJF,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,EAAA,iCAAA,CAAA,EAAgD,WAAA,SAAA,EAC3B,YAAA,IAAA;;;;;;;AAS3B,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,KAAA,EAAA;AACA,IAAA,iBAAA,CAAA;AACA,IAAA,yBAAA,GAAA,UAAA,EAAA;AAAmD,IAAA,qBAAA,SAAA,gCAAA,qEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,YAAA,CAAa;IAAA,GAAtB,qEAAsB;AACvE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA,EAAS;;;;AAHT,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,MAAA,GAAA,GAAA;AAEE,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,EAAA,cAAA,GAAA,GAAA;;;;;;AAoDc,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAyB,GAAA,QAAA,EAAA;AACK,IAAA,iBAAA,CAAA;AAAyB,IAAA,uBAAA;AACrD,IAAA,yBAAA,GAAA,QAAA,EAAA;AAA+C,IAAA,iBAAA,CAAA;AAAmB,IAAA,uBAAA,EAAO;;;;AAD7C,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,UAAA,YAAA;AACmB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,UAAA,MAAA;;;;;;AANvD,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAqC,GAAA,IAAA;AAC/B,IAAA,iBAAA,CAAA;AAAuC,IAAA,uBAAA;AAC3C,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,2BAAA,GAAA,+EAAA,GAAA,GAAA,OAAA,IAAA,UAAA;AAMF,IAAA,uBAAA,EAAM;;;;;AARF,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,8BAAA,CAAA;AAEF,IAAA,oBAAA,CAAA;AAAA,IAAA,uBAAA,UAAA,OAAA,cAAA,MAAe,OAAA,OAAA,QAAA,cAAA,OAAA,OAAA,QAAA,WAAA,qBAAA,OAAA,OAAA,QAAA,WAAA,kBAAA,MAAuC,GAAG,CAAC,MAAA,0BAAA,GAAA,GAAA,CAAA;;;;;;AA5BpE,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAsC,GAAA,OAAA,EAAA,EACT,GAAA,IAAA;AACrB,IAAA,oBAAA,GAAA,KAAA,EAAA;AAA+C,IAAA,iBAAA,CAAA;AAAwC,IAAA,uBAAA,EAAK;AAElG,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA4B,GAAA,OAAA,EAAA,EACI,GAAA,OAAA,EAAA,EACL,GAAA,QAAA,EAAA;AACI,IAAA,iBAAA,CAAA;AAAkC,IAAA,uBAAA;AAC3D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAsC,IAAA,iBAAA,EAAA;AAAmD,IAAA,uBAAA,EAAO;AAElG,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAuB,IAAA,QAAA,EAAA;AACI,IAAA,iBAAA,EAAA;AAAiC,IAAA,uBAAA;AAC1D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAqC,IAAA,iBAAA,EAAA;AAAkD,IAAA,uBAAA,EAAO;AAEhG,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAuB,IAAA,QAAA,EAAA;AACI,IAAA,iBAAA,EAAA;AAA+B,IAAA,uBAAA;AACxD,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAsC,IAAA,iBAAA,EAAA;AAAgD,IAAA,uBAAA,EAAO;AAE/F,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAuB,IAAA,QAAA,EAAA;AACI,IAAA,iBAAA,EAAA;AAAoC,IAAA,uBAAA;AAC7D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAsC,IAAA,iBAAA,EAAA;;AAAyE,IAAA,uBAAA,EAAO,EAClH;AAGR,IAAA,8BAAA,IAAA,yEAAA,GAAA,GAAA,OAAA,EAAA;AAaF,IAAA,uBAAA,EAAM;;;;;;;;;AAnC+C,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,+BAAA,CAAA;AAKtB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,yBAAA,CAAA;AACa,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,WAAA,iBAAA,CAAA;AAGb,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,wBAAA,CAAA;AACY,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,WAAA,gBAAA,CAAA;AAGZ,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,sBAAA,CAAA;AACa,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,WAAA,cAAA,CAAA;AAGb,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,2BAAA,CAAA;AACa,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,sBAAA,IAAA,MAAA,WAAA,OAAA,cAAA,MAAA,OAAA,OAAA,SAAA,WAAA,mBAAA,GAAA,OAAA,GAAA,GAAA;AAI1C,IAAA,oBAAA,CAAA;AAAA,IAAA,0BAAA,WAAA,OAAA,cAAA,MAAA,OAAA,OAAA,SAAA,cAAA,OAAA,OAAA,SAAA,WAAA,qBAAA,OAAA,OAAA,SAAA,WAAA,kBAAA,UAAA,KAAA,EAAA;;;;;;AA+CM,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAuB,GAAA,QAAA,EAAA;AACG,IAAA,iBAAA,CAAA;AAAmB,IAAA,uBAAA;AAC3C,IAAA,yBAAA,GAAA,QAAA,EAAA;AAAyB,IAAA,iBAAA,CAAA;AAAoB,IAAA,uBAAA;AAC7C,IAAA,yBAAA,GAAA,QAAA,EAAA;AAA8B,IAAA,iBAAA,CAAA;;AAAyC,IAAA,uBAAA,EAAO;;;;AAFtD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,QAAA,QAAA;AACC,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,QAAA,SAAA;AACK,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,sBAAA,GAAA,GAAA,QAAA,YAAA,OAAA,GAAA,IAAA;;;;;;AANpC,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAoC,GAAA,IAAA;AAC9B,IAAA,iBAAA,CAAA;AAAsC,IAAA,uBAAA;AAC1C,IAAA,2BAAA,GAAA,+EAAA,GAAA,GAAA,OAAA,IAAA,UAAA;AAOF,IAAA,uBAAA;;;;;AARM,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,6BAAA,CAAA;AACJ,IAAA,oBAAA;AAAA,IAAA,uBAAA,UAAA,OAAA,cAAA,MAAe,OAAA,OAAA,QAAA,kBAAA,OAAA,OAAA,QAAA,eAAA,oBAAA,OAAA,OAAA,QAAA,eAAA,iBAAA,MAA0C,GAAG,CAAC,MAAA,0BAAA,GAAA,GAAA,CAAA;;;;;;AA3BrE,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA8B,GAAA,OAAA,EAAA,EACD,GAAA,IAAA;AACrB,IAAA,oBAAA,GAAA,KAAA,EAAA;AAAsC,IAAA,iBAAA,CAAA;AAAoC,IAAA,uBAAA,EAAK;AAErF,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA4B,GAAA,OAAA,EAAA,EACJ,GAAA,OAAA,EAAA,EACE,GAAA,QAAA,EAAA;AACK,IAAA,iBAAA,CAAA;AAAoC,IAAA,uBAAA;AAC7D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAyB,IAAA,iBAAA,EAAA;AAAyD,IAAA,uBAAA,EAAO;AAE3F,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,QAAA,EAAA;AACK,IAAA,iBAAA,EAAA;AAAqC,IAAA,uBAAA;AAC9D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAsC,IAAA,iBAAA,EAAA;AAA0D,IAAA,uBAAA,EAAO;AAEzG,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,QAAA,EAAA;AACK,IAAA,iBAAA,EAAA;AAAgC,IAAA,uBAAA;AACzD,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAyB,IAAA,iBAAA,EAAA;AAAqD,IAAA,uBAAA,EAAO;AAEvF,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,QAAA,EAAA;AACK,IAAA,iBAAA,EAAA;AAAiC,IAAA,uBAAA;AAC1D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAsC,IAAA,iBAAA,EAAA;AAAsD,IAAA,uBAAA,EAAO,EAC/F;AAGR,IAAA,8BAAA,IAAA,yEAAA,GAAA,GAAA,OAAA,EAAA;AAYF,IAAA,uBAAA,EAAM;;;;;;;;;AAlCsC,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,2BAAA,CAAA;AAKb,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,2BAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,eAAA,mBAAA,CAAA;AAGA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,4BAAA,CAAA;AACa,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,eAAA,oBAAA,CAAA;AAGb,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,uBAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,eAAA,eAAA,CAAA;AAGA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,wBAAA,CAAA;AACa,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,WAAA,OAAA,cAAA,MAAA,OAAA,OAAA,SAAA,eAAA,gBAAA,CAAA;AAI1C,IAAA,oBAAA;AAAA,IAAA,0BAAA,WAAA,OAAA,cAAA,MAAA,OAAA,OAAA,SAAA,kBAAA,OAAA,OAAA,SAAA,eAAA,oBAAA,OAAA,OAAA,SAAA,eAAA,iBAAA,UAAA,KAAA,EAAA;;;;;;AA0CM,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA2B,GAAA,QAAA,EAAA;AACG,IAAA,iBAAA,CAAA;AAA2B,IAAA,uBAAA;AACvD,IAAA,yBAAA,GAAA,QAAA,EAAA;AAA4B,IAAA,iBAAA,CAAA;AAA2B,IAAA,uBAAA;AACvD,IAAA,yBAAA,GAAA,QAAA,EAAA;AAA6B,IAAA,iBAAA,CAAA;;;AAAuF,IAAA,uBAAA,EAAO;;;;AAF/F,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,YAAA,YAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,YAAA,YAAA;AACC,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,sBAAA,GAAA,GAAA,YAAA,WAAA,WAAA,GAAA,OAAA,sBAAA,GAAA,GAAA,YAAA,SAAA,WAAA,CAAA;;;;;;AANnC,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAqC,GAAA,IAAA;AAC/B,IAAA,iBAAA,CAAA;AAAuC,IAAA,uBAAA;AAC3C,IAAA,2BAAA,GAAA,+EAAA,GAAA,IAAA,OAAA,IAAA,UAAA;AAOF,IAAA,uBAAA;;;;;AARM,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,8BAAA,CAAA;AACJ,IAAA,oBAAA;AAAA,IAAA,uBAAA,UAAA,OAAA,cAAA,MAAe,OAAA,OAAA,QAAA,UAAA,OAAA,OAAA,QAAA,OAAA,qBAAA,OAAA,OAAA,QAAA,OAAA,kBAAA,MAAmC,GAAG,CAAC,MAAA,0BAAA,GAAA,GAAA,CAAA;;;;;;AAvB9D,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAoC,GAAA,OAAA,EAAA,EACP,GAAA,IAAA;AACrB,IAAA,oBAAA,GAAA,KAAA,EAAA;AAA+C,IAAA,iBAAA,CAAA;AAAqC,IAAA,uBAAA,EAAK;AAE/F,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA4B,GAAA,OAAA,EAAA,EACE,GAAA,OAAA,EAAA,EACH,GAAA,QAAA,EAAA;AACI,IAAA,iBAAA,CAAA;AAAqC,IAAA,uBAAA;AAC9D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAsC,IAAA,iBAAA,EAAA;AAAkD,IAAA,uBAAA,EAAO;AAEjG,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAuB,IAAA,QAAA,EAAA;AACI,IAAA,iBAAA,EAAA;AAAmC,IAAA,uBAAA;AAC5D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAmC,IAAA,iBAAA,EAAA;AAA+C,IAAA,uBAAA,EAAO;AAE3F,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAuB,IAAA,QAAA,EAAA;AACI,IAAA,iBAAA,EAAA;AAAmC,IAAA,uBAAA;AAC5D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAsC,IAAA,iBAAA,EAAA;AAAgD,IAAA,uBAAA,EAAO,EACzF;AAGR,IAAA,8BAAA,IAAA,yEAAA,GAAA,GAAA,OAAA,EAAA;AAYF,IAAA,uBAAA,EAAM;;;;;;;;AA9B+C,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,4BAAA,CAAA;AAKtB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,4BAAA,CAAA;AACa,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,OAAA,oBAAA,CAAA;AAGb,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,0BAAA,CAAA;AACU,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,OAAA,iBAAA,CAAA;AAGV,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,0BAAA,CAAA;AACa,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,OAAA,kBAAA,CAAA;AAI1C,IAAA,oBAAA;AAAA,IAAA,0BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,UAAA,OAAA,OAAA,QAAA,OAAA,qBAAA,OAAA,OAAA,QAAA,OAAA,kBAAA,UAAA,KAAA,EAAA;;;;;;AAkBJ,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAwC,GAAA,OAAA,EAAA,EACX,GAAA,IAAA;AACrB,IAAA,oBAAA,GAAA,KAAA,EAAA;AAAwC,IAAA,iBAAA,CAAA;AAA2C,IAAA,uBAAA,EAAK;AAE9F,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA4B,GAAA,OAAA,EAAA,EACH,GAAA,OAAA,EAAA,EACC,GAAA,QAAA,EAAA;AACK,IAAA,iBAAA,CAAA;AAAmC,IAAA,uBAAA;AAC5D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAyB,IAAA,iBAAA,EAAA;AAAsD,IAAA,uBAAA,EAAO;AAExF,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,QAAA,EAAA;AACK,IAAA,iBAAA,EAAA;AAAoC,IAAA,uBAAA;AAC7D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAsC,IAAA,iBAAA,EAAA;AAAuD,IAAA,uBAAA,EAAO;AAEtG,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,QAAA,EAAA;AACK,IAAA,iBAAA,EAAA;AAAsC,IAAA,uBAAA;AAC/D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAyB,IAAA,iBAAA,EAAA;AAAyD,IAAA,uBAAA,EAAO;AAE3F,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,QAAA,EAAA;AACK,IAAA,iBAAA,EAAA;AAAuC,IAAA,uBAAA;AAChE,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAsC,IAAA,iBAAA,EAAA;AAA0D,IAAA,uBAAA,EAAO,EACnG,EACF,EACF;;;;;;;;AArBwC,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,kCAAA,CAAA;AAKf,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,0BAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,aAAA,kBAAA,CAAA;AAGA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,2BAAA,CAAA;AACa,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,aAAA,mBAAA,CAAA;AAGb,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,6BAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,aAAA,qBAAA,CAAA;AAGA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,8BAAA,CAAA;AACa,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,WAAA,OAAA,cAAA,MAAA,OAAA,OAAA,SAAA,aAAA,sBAAA,CAAA;;;;;;AAS9C,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAiC,GAAA,OAAA,EAAA,EACJ,GAAA,IAAA;AACrB,IAAA,oBAAA,GAAA,KAAA,EAAA;AAAsC,IAAA,iBAAA,CAAA;AAAqC,IAAA,uBAAA,EAAK;AAEtF,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA4B,GAAA,OAAA,EAAA,EACD,GAAA,OAAA,EAAA,EACA,GAAA,QAAA,EAAA;AACI,IAAA,iBAAA,CAAA;AAAkC,IAAA,uBAAA;AAC3D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAyB,IAAA,iBAAA,EAAA;AAA+C,IAAA,uBAAA,EAAO;AAEjF,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAuB,IAAA,QAAA,EAAA;AACI,IAAA,iBAAA,EAAA;AAAsC,IAAA,uBAAA;AAC/D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAyB,IAAA,iBAAA,EAAA;AAAwD,IAAA,uBAAA,EAAO;AAE1F,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAuB,IAAA,QAAA,EAAA;AACI,IAAA,iBAAA,EAAA;AAAmC,IAAA,uBAAA;AAC5D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAsC,IAAA,iBAAA,EAAA;AAAgD,IAAA,uBAAA,EAAO,EACzF,EACF,EACF;;;;;;;AAjBsC,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,4BAAA,CAAA;AAKb,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,yBAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,OAAA,iBAAA,CAAA;AAGA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,6BAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,OAAA,0BAAA,CAAA;AAGA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,0BAAA,CAAA;AACa,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,OAAA,kBAAA,CAAA;;;;;;AAiCpC,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA2B,GAAA,QAAA,EAAA;AACU,IAAA,iBAAA,CAAA;AAA0B,IAAA,uBAAA;AAC7D,IAAA,yBAAA,GAAA,QAAA,EAAA;AAA4B,IAAA,iBAAA,CAAA;;AAAuC,IAAA,uBAAA,EAAO;;;;AADvC,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,aAAA,WAAA;AACP,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,sBAAA,GAAA,GAAA,aAAA,WAAA,OAAA,CAAA;;;;;;AALlC,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAoC,GAAA,IAAA;AAC9B,IAAA,iBAAA,CAAA;AAAsC,IAAA,uBAAA;AAC1C,IAAA,2BAAA,GAAA,gFAAA,GAAA,GAAA,OAAA,IAAA,UAAA;AAMF,IAAA,uBAAA;;;;;AAPM,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,6BAAA,CAAA;AACJ,IAAA,oBAAA;AAAA,IAAA,uBAAA,UAAA,OAAA,cAAA,MAAe,OAAA,OAAA,QAAA,UAAA,OAAA,OAAA,QAAA,OAAA,oBAAA,OAAA,OAAA,QAAA,OAAA,iBAAA,MAAkC,GAAG,CAAC,MAAA,0BAAA,GAAA,GAAA,CAAA;;;;;;AAvB7D,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAkC,GAAA,OAAA,EAAA,EACL,GAAA,IAAA;AACrB,IAAA,oBAAA,GAAA,KAAA,EAAA;AAAuC,IAAA,iBAAA,CAAA;AAAkC,IAAA,uBAAA,EAAK;AAEpF,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA4B,GAAA,OAAA,EAAA,EACA,GAAA,OAAA,EAAA,EACF,GAAA,QAAA,EAAA;AACK,IAAA,iBAAA,CAAA;AAAoC,IAAA,uBAAA;AAC7D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAsC,IAAA,iBAAA,EAAA;AAAiD,IAAA,uBAAA,EAAO;AAEhG,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,QAAA,EAAA;AACK,IAAA,iBAAA,EAAA;AAAiC,IAAA,uBAAA;AAC1D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAyB,IAAA,iBAAA,EAAA;AAA8C,IAAA,uBAAA,EAAO;AAEhF,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAsB,IAAA,QAAA,EAAA;AACK,IAAA,iBAAA,EAAA;AAAkC,IAAA,uBAAA;AAC3D,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAmC,IAAA,iBAAA,EAAA;AAAmD,IAAA,uBAAA,EAAO,EACzF;AAGR,IAAA,8BAAA,IAAA,0EAAA,GAAA,GAAA,OAAA,EAAA;AAWF,IAAA,uBAAA,EAAM;;;;;;;;AA7BuC,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,yBAAA,CAAA;AAKd,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,2BAAA,CAAA;AACa,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,OAAA,mBAAA,CAAA;AAGb,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,wBAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,OAAA,gBAAA,CAAA;AAGA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,yBAAA,CAAA;AACU,IAAA,oBAAA,CAAA;AAAA,IAAA,8BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,OAAA,iBAAA,KAAA;AAIvC,IAAA,oBAAA;AAAA,IAAA,0BAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,UAAA,OAAA,OAAA,QAAA,OAAA,oBAAA,OAAA,OAAA,QAAA,OAAA,iBAAA,UAAA,KAAA,EAAA;;;;;;AA6BA,IAAA,yBAAA,GAAA,UAAA,EAAA;AAAiC,IAAA,iBAAA,CAAA;AAAoB,IAAA,uBAAA;;;;AAA7C,IAAA,qBAAA,SAAA,aAAA,KAAA;AAAyB,IAAA,oBAAA;AAAA,IAAA,4BAAA,aAAA,KAAA;;;;;;;AATzC,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAmC,GAAA,OAAA,EAAA,EACN,GAAA,SAAA,EAAA;AACuB,IAAA,iBAAA,CAAA;AAAqC,IAAA,uBAAA;AACrF,IAAA,yBAAA,GAAA,UAAA,EAAA;AAIE,IAAA,qBAAA,UAAA,gCAAA,mFAAA,QAAA;AAAA,MAAA,wBAAA,IAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAU,OAAA,sBAAA,CAAA,OAAA,OAAA,KAAA,CAAmD;IAAA,GAA7D,qFAA6D;AAC7D,IAAA,2BAAA,GAAA,iEAAA,GAAA,GAAA,UAAA,IAAA,UAAA;AAGF,IAAA,uBAAA,EAAS,EACL;;;;AAV4C,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,4BAAA,CAAA;AAI9C,IAAA,oBAAA;AAAA,IAAA,qBAAA,SAAA,OAAA,iBAAA,gBAAA,CAAA;AAEA,IAAA,oBAAA;AAAA,IAAA,qBAAA,OAAA,gBAAA;;;;;;AAhPR,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA6B,GAAA,MAAA,EAAA;AACD,IAAA,iBAAA,CAAA;AAAgC,IAAA,uBAAA;AAC1D,IAAA,oBAAA,GAAA,kBAAA,EAAA;AAKF,IAAA,uBAAA;AAGA,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA6B,GAAA,OAAA,EAAA;AAIzB,IAAA,8BAAA,GAAA,0DAAA,IAAA,IAAA,OAAA,EAAA;AA2CA,IAAA,8BAAA,GAAA,0DAAA,IAAA,IAAA,OAAA,EAAA;AA0CA,IAAA,8BAAA,GAAA,0DAAA,IAAA,GAAA,OAAA,EAAA;AAsCA,IAAA,8BAAA,GAAA,0DAAA,IAAA,GAAA,OAAA,EAAA;AA6BA,IAAA,8BAAA,IAAA,2DAAA,IAAA,GAAA,OAAA,EAAA;AAyBA,IAAA,8BAAA,IAAA,2DAAA,IAAA,GAAA,OAAA,EAAA;AAoCF,IAAA,uBAAA,EAAM;AAIR,IAAA,8BAAA,IAAA,2DAAA,GAAA,GAAA,OAAA,EAAA;;;;;;;;;;AAtO4B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,EAAA,uBAAA,CAAA;AAExB,IAAA,oBAAA;AAAA,IAAA,qBAAA,SAAA,OAAA,eAAA,CAAA,EAA0B,WAAA,CAAA,EACb,WAAA,OAAA,QAAA,CAAA;AAUb,IAAA,oBAAA,CAAA;AAAA,IAAA,wBAAA,OAAA,qBAAA,OAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,cAAA,IAAA,EAAA;AA2CA,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,yBAAA,OAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,kBAAA,IAAA,EAAA;AA0CA,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,mBAAA,OAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,UAAA,IAAA,EAAA;AAsCA,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,uBAAA,OAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,gBAAA,IAAA,EAAA;AA6BA,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,gBAAA,OAAA,UAAA,OAAA,cAAA,MAAA,OAAA,OAAA,QAAA,UAAA,KAAA,EAAA;AAyBA,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,iBAAA,OAAA,WAAA,OAAA,cAAA,MAAA,OAAA,OAAA,SAAA,UAAA,KAAA,EAAA;AAwCJ,IAAA,oBAAA;AAAA,IAAA,wBAAA,OAAA,YAAA,IAAA,KAAA,EAAA;;;;AD/SE,IAAO,sBAAP,MAAO,oBAAkB;EA4HnB;EACD;EACA;EACC;EA9HV,cAAc,SAAS,MAAM,KAAK,YAAY,YAAW,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,cAAA,CAAA,IAAA,CAAA,CAAA;;EAG3D;EACA;EACA;EACA;EACA;;EAGA,iBAAiB,SAAS,MAAK;AAC7B,UAAM,OAAO,KAAK,cAAa;AAC/B,QAAI,CAAC;AAAM,aAAO,CAAA;AAElB,WAAO;MACL;QACE,OAAO,KAAK,EAAE,2BAA2B;QACzC,OAAO,KAAK,gBAAgB,kBAAkB;QAC9C,MAAM;QACN,OAAO;QACP,QAAQ,KAAK,gBAAgB,KAAK,gBAAgB,iBAAiB,KAAK,gBAAgB,cAAc;QACtG,OAAO;QACP,QAAQ;;MAEV;QACE,OAAO,KAAK,EAAE,4BAA4B;QAC1C,OAAO,KAAK,YAAY,gBAAgB;QACxC,MAAM;QACN,OAAO;QACP,QAAQ,KAAK,YAAY,kBAAkB;QAC3C,QAAQ,KAAK,YAAY,kBAAkB,MAAM,KAAK,OAAgB;QACtE,QAAQ;;MAEV;QACE,OAAO,KAAK,EAAE,6BAA6B;QAC3C,OAAO,KAAK,QAAQ,mBAAmB;QACvC,MAAM;QACN,OAAO;QACP,OAAO;QACP,QAAQ;;MAEV;QACE,OAAO,KAAK,EAAE,yBAAyB;QACvC,OAAO,KAAK,QAAQ,gBAAgB;QACpC,MAAM;QACN,OAAO;QACP,OAAO;QACP,QAAQ;;MAEV;QACE,OAAO,KAAK,EAAE,0BAA0B;QACxC,OAAO,KAAK,cAAc,iBAAiB;QAC3C,MAAM;QACN,OAAO;QACP,OAAO;QACP,QAAQ;;MAEV;QACE,OAAO,KAAK,EAAE,wBAAwB;QACtC,OAAO,KAAK,gBAAgB,eAAe;QAC3C,MAAM;QACN,OAAO;QACP,OAAO;QACP,QAAQ;;MAEV;QACE,OAAO,KAAK,EAAE,sBAAsB;QACpC,OAAO,KAAK,YAAY,aAAa;QACrC,MAAM;QACN,OAAO;QACP,QAAQ,KAAK,YAAY,aAAa,KAAK,IAAI,OAAgB;QAC/D,QAAQ;;MAEV;QACE,OAAO,KAAK,EAAE,2BAA2B;QACzC,OAAO,KAAK,QAAQ,kBAAkB;QACtC,MAAM;QACN,OAAO;QACP,OAAO;QACP,QAAQ;;;EAGd,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,iBAAA,CAAA,IAAA,CAAA,CAAA;;EAGD,iBAAiB,SAAyB,MAAK;AAC7C,UAAM,QAAQ,KAAK,eAAc;AACjC,WAAO,MAAM,IAAI,WAAS;MACxB,OAAO,KAAK;MACZ,OAAO,KAAK;MACZ,MAAM,KAAK;MACX,SAAS,KAAK,kBAAkB,KAAK,KAAK;MAC1C,QAAQ,KAAK,WAAW,SAAY;QAClC,OAAO,KAAK,IAAI,KAAK,MAAM;QAC3B,MAAM,KAAK,UAAU,OAAO,aAAsB,KAAK,UAAU,SAAS,aAAsB;QAChG,cAAc,KAAK,WAAW;UAC5B;MACJ;EACJ,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,iBAAA,CAAA,IAAA,CAAA,CAAA;;EAGD,UAAU,OAAyB,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,UAAA,CAAA,IAAA,CAAA,CAAA;EACrC,oBAAoB,OAAc,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,oBAAA,CAAA,IAAA,CAAA,CAAA;EACpC,uBAAuB,OAAc,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,uBAAA,CAAA,IAAA,CAAA,CAAA;;EAGvC,yBAAyB,SAAS,MAAM,KAAK,cAAc,aAAa,KAAK,KAAK,cAAc,iBAAiB,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,yBAAA,CAAA,IAAA,CAAA,CAAA;EAClH,2BAA2B,SAAS,MAAM,KAAK,cAAc,WAAW,KAAK,KAAK,cAAc,eAAe,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,2BAAA,CAAA,IAAA,CAAA,CAAA;EAChH,uBAAuB,SAAS,MAAM,KAAK,cAAc,iBAAiB,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,uBAAA,CAAA,IAAA,CAAA,CAAA;EAC3E,qBAAqB,SAAS,MAAM,KAAK,cAAc,eAAe,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,qBAAA,CAAA,IAAA,CAAA,CAAA;EACvE,kBAAkB,SAAS,MAAM,KAAK,cAAc,YAAY,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,kBAAA,CAAA,IAAA,CAAA,CAAA;EACjE,mBAAmB,SAAS,MAAM,KAAK,cAAa,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,CAAA;;EAGtD,mBAAmB;IACjB,EAAE,OAAO,IAAI,OAAO,aAAY;IAChC,EAAE,OAAO,IAAI,OAAO,aAAY;IAChC,EAAE,OAAO,IAAI,OAAO,WAAU;IAC9B,EAAE,OAAO,KAAK,OAAO,YAAW;IAChC,EAAE,OAAO,KAAK,OAAO,aAAY;;EAGnC,YACU,aACD,MACA,kBACC,qBAAwC;AAHxC,SAAA,cAAA;AACD,SAAA,OAAA;AACA,SAAA,mBAAA;AACC,SAAA,sBAAA;AAER,SAAK,mBAAkB;EACzB;EAEA,WAAQ;AAEN,SAAK,gBAAgB,KAAK,iBAAiB;AAC3C,SAAK,UAAU,KAAK,iBAAiB;AACrC,SAAK,QAAQ,KAAK,iBAAiB;AACnC,SAAK,cAAc,KAAK,iBAAiB;AACzC,SAAK,cAAc,KAAK,iBAAiB;AAEzC,SAAK,kBAAiB;AACtB,SAAK,kBAAiB;EACxB;EAEA,cAAW;AACT,SAAK,iBAAiB,gBAAe;EACvC;;;;EAKA,oBAAiB;AACf,UAAM,UAAU,KAAK,QAAO;AAC5B,SAAK,iBAAiB,qBAAqB,OAAO,EAAE,UAAU;MAC5D,MAAM,wBAAC,SAAQ;AAEb,YAAI,KAAK,cAAc,iBAAiB;AACtC,eAAK,kBAAkB,IAAI,KAAK,aAAa,eAAe;QAC9D;AACA,YAAI,KAAK,cAAc,qBAAqB;AAC1C,eAAK,qBAAqB,IAAI,KAAK,aAAa,mBAAmB;QACrE;MACF,GARM;MASN,OAAO,wBAAC,UAAS;AACf,aAAK,oBAAoB,MAAM,KAAK,EAAE,sBAAsB,CAAC;AAC7D,gBAAQ,MAAM,0BAA0B,KAAK;MAC/C,GAHO;KAIR;EACH;;;;EAKA,cAAW;AACT,SAAK,iBAAiB,iBAAiB,KAAK,QAAO,CAAE;AACrD,SAAK,oBAAoB,QAAQ,KAAK,EAAE,qBAAqB,CAAC;EAChE;;;;EAKA,cAAc,YAAqC;AACjD,SAAK,QAAQ,OAAO,aAAY,kCAAK,UAAY,WAAa;AAC9D,SAAK,kBAAiB;EACxB;;;;EAKA,oBAAiB;AACf,QAAI,KAAK,YAAW,GAAI;AACtB,WAAK,iBAAiB,gBAAe;AACrC,WAAK,oBAAoB,KAAK,KAAK,EAAE,iCAAiC,CAAC;IACzE,OAAO;AACL,WAAK,iBAAiB,iBAAgB;AACtC,WAAK,oBAAoB,KAAK,KAAK,EAAE,gCAAgC,CAAC;IACxE;EACF;;;;EAKA,sBAAsB,SAAe;AACnC,SAAK,iBAAiB,sBAAsB,OAAO;AACnD,QAAI,KAAK,YAAW,GAAI;AACtB,WAAK,oBAAoB,KACvB,KAAK,EAAE,oCAAoC,CAAC;IAEhD;EACF;;;;EAKA,0BAAuB;AACrB,WAAO,KAAK,iBAAiB,wBAAuB;EACtD;;;;EAKA,EAAE,KAAW;AACX,WAAO,KAAK,KAAK,EAAE,GAAG;EACxB;;;;EAKA,kBAAkB,OAAa;AAC7B,WAAO,QAAQ,KAAK;EACtB;;;;EAKA,aAAa,OAAc;AACzB,YAAQ,OAAO;MACb,KAAK;AAAM,eAAO;MAClB,KAAK;AAAQ,eAAO;MACpB;AAAS,eAAO;IAClB;EACF;;;;EAKQ,gBAAgB,SAAkB,OAAc;AACtD,QAAI,CAAC,WAAW,CAAC,SAAS,UAAU;AAAG,aAAO;AAC9C,WAAO,KAAK,MAAO,UAAU,QAAS,GAAG;EAC3C;;;;EAKQ,kBAAkB,OAAa;AACrC,UAAM,aAAkG;MACtG,WAAW;MACX,WAAW;MACX,WAAW;MACX,UAAU;MACV,QAAQ;MACR,aAAa;;AAEf,WAAO,WAAW,KAAK,KAAK;EAC9B;;;;EAKQ,cAAc,YAAkB;AACtC,UAAM,OAAO,KAAK,YAAW;AAC7B,WAAO,MAAM,aAAa,SAAS,UAAU,KAAK,KAAK,cAAa;EACtE;;;;EAKQ,gBAAa;AACnB,UAAM,OAAO,KAAK,YAAW;AAC7B,WAAO,MAAM,OAAO,SAAS,aAAa,KAAK;EACjD;;;;EAKQ,qBAAkB;AAExB,WAAO,MAAK;AACV,YAAM,WAAW,KAAK,MAAK;AAC3B,UAAI,UAAU;AACZ,aAAK,oBAAoB,MAAM,QAAQ;MACzC;IACF,CAAC;EACH;;;;EAKQ,oBAAiB;EAGzB;;;;EAKA,gBAAgB,QAAqB;AAEnC,SAAK,oBAAoB,KACvB,KAAK,EAAE,kCAAkC,CAAC;EAE9C;;AAvT6B;cAAlB;mCAAA,qBAAkB,4BAAA,WAAA,GAAA,4BAAA,WAAA,GAAA,4BAAA,gBAAA,GAAA,4BAAA,mBAAA,CAAA;AAAA;cAAlB,sFAAA,qBAAkB,WAAA,CAAA,CAAA,eAAA,CAAA,GAAA,OAAA,IAAA,MAAA,IAAA,QAAA,CAAA,CAAA,GAAA,qBAAA,GAAA,CAAA,GAAA,OAAA,GAAA,CAAA,GAAA,sBAAA,MAAA,GAAA,CAAA,GAAA,UAAA,2BAAA,mBAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,GAAA,sBAAA,MAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,kBAAA,GAAA,CAAA,GAAA,UAAA,sBAAA,OAAA,GAAA,CAAA,GAAA,OAAA,uBAAA,UAAA,GAAA,SAAA,UAAA,GAAA,CAAA,GAAA,YAAA,YAAA,GAAA,CAAA,GAAA,cAAA,aAAA,GAAA,CAAA,QAAA,YAAA,MAAA,qBAAA,GAAA,oBAAA,GAAA,UAAA,SAAA,GAAA,CAAA,OAAA,qBAAA,GAAA,kBAAA,GAAA,CAAA,GAAA,UAAA,OAAA,GAAA,CAAA,GAAA,eAAA,kBAAA,GAAA,OAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,QAAA,SAAA,GAAA,SAAA,cAAA,GAAA,CAAA,GAAA,YAAA,YAAA,MAAA,GAAA,CAAA,GAAA,eAAA,kBAAA,GAAA,UAAA,OAAA,GAAA,CAAA,SAAA,EAAA,GAAA,CAAA,GAAA,OAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,GAAA,WAAA,WAAA,UAAA,GAAA,CAAA,GAAA,YAAA,2BAAA,MAAA,GAAA,CAAA,GAAA,OAAA,UAAA,sBAAA,QAAA,GAAA,OAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,SAAA,WAAA,SAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,UAAA,mBAAA,GAAA,CAAA,GAAA,UAAA,WAAA,GAAA,CAAA,GAAA,UAAA,iBAAA,GAAA,CAAA,GAAA,UAAA,qBAAA,GAAA,CAAA,GAAA,UAAA,cAAA,GAAA,CAAA,GAAA,UAAA,eAAA,GAAA,CAAA,GAAA,uBAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,YAAA,qBAAA,MAAA,GAAA,CAAA,GAAA,gBAAA,GAAA,CAAA,GAAA,kBAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,cAAA,cAAA,GAAA,CAAA,GAAA,cAAA,aAAA,GAAA,CAAA,GAAA,cAAA,cAAA,GAAA,CAAA,GAAA,cAAA,cAAA,GAAA,CAAA,GAAA,sBAAA,MAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,mBAAA,SAAA,YAAA,GAAA,CAAA,GAAA,YAAA,YAAA,MAAA,GAAA,CAAA,GAAA,UAAA,GAAA,CAAA,GAAA,UAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,qBAAA,MAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,CAAA,GAAA,YAAA,qBAAA,MAAA,GAAA,CAAA,GAAA,gBAAA,GAAA,CAAA,GAAA,cAAA,WAAA,GAAA,CAAA,GAAA,sBAAA,MAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,gBAAA,GAAA,CAAA,GAAA,YAAA,cAAA,MAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,GAAA,YAAA,YAAA,MAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,GAAA,YAAA,aAAA,MAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,qBAAA,MAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,sBAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,OAAA,mBAAA,GAAA,YAAA,GAAA,CAAA,MAAA,mBAAA,GAAA,eAAA,kBAAA,GAAA,UAAA,OAAA,CAAA,GAAA,UAAA,gCAAA,4BAAA,IAAA,KAAA;AAAA,MAAA,KAAA,GAAA;AC5B/B,IAAA,yBAAA,GAAA,OAAA,CAAA;AAEE,IAAA,oBAAA,GAAA,mBAAA,CAAA;AAKA,IAAA,yBAAA,GAAA,OAAA,CAAA,EAAqC,GAAA,OAAA,CAAA,EAC2B,GAAA,OAAA,CAAA,EAC/B,GAAA,KAAA,CAAA;AACQ,IAAA,iBAAA,CAAA;AAA4B,IAAA,uBAAA;AAC/D,IAAA,8BAAA,GAAA,2CAAA,GAAA,GAAA,SAAA,CAAA;AAMF,IAAA,uBAAA;AAEA,IAAA,yBAAA,GAAA,OAAA,CAAA,EAA8B,GAAA,OAAA,CAAA,EAEiB,IAAA,UAAA,CAAA;AAGzC,IAAA,qBAAA,SAAA,gCAAA,uDAAA;AAAA,aAAS,IAAA,YAAA;IAAa,GAAtB,uDAAsB;AAEtB,IAAA,oBAAA,IAAA,KAAA,EAAA;AACA,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA;AAEA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAoC,IAAA,SAAA,EAAA;AAMhC,IAAA,qBAAA,UAAA,gCAAA,uDAAA;AAAA,aAAU,IAAA,kBAAA;IAAmB,GAA7B,uDAA6B;AAL/B,IAAA,uBAAA;AAMA,IAAA,yBAAA,IAAA,SAAA,EAAA;AACE,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAQ;AAIV,IAAA,yBAAA,IAAA,OAAA,EAAA;AACE,IAAA,8BAAA,IAAA,4CAAA,GAAA,GAAA,UAAA,EAAA;AAYA,IAAA,8BAAA,IAAA,4CAAA,GAAA,GAAA,UAAA,EAAA;AAWF,IAAA,uBAAA,EAAM,EACF,EACF,EACF;AAIR,IAAA,8BAAA,IAAA,4CAAA,GAAA,GAAA,OAAA,EAAA;AAaA,IAAA,8BAAA,IAAA,4CAAA,GAAA,GAAA,OAAA,EAAA;AAWA,IAAA,8BAAA,IAAA,4CAAA,IAAA,EAAA;AAlGF,IAAA,uBAAA;;;AAGI,IAAA,oBAAA;AAAA,IAAA,qBAAA,SAAA,IAAA,EAAA,iBAAA,CAAA;AAOuC,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,IAAA,EAAA,mBAAA,CAAA;AACnC,IAAA,oBAAA;AAAA,IAAA,wBAAA,IAAA,YAAA,IAAA,IAAA,EAAA;AAcI,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,YAAA,IAAA,QAAA,CAAA;AAC+B,IAAA,oBAAA;AAAA,IAAA,sBAAA,WAAA,IAAA,QAAA,CAAA;AAC/B,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,IAAA,EAAA,mBAAA,GAAA,GAAA;AAQE,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,WAAA,IAAA,YAAA,CAAA;AAGA,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,IAAA,EAAA,wBAAA,GAAA,GAAA;AAMF,IAAA,oBAAA,CAAA;AAAA,IAAA,wBAAA,IAAA,kBAAA,EAAA,SAAA,IAAA,KAAA,EAAA;AAYA,IAAA,oBAAA;AAAA,IAAA,wBAAA,IAAA,qBAAA,EAAA,SAAA,IAAA,KAAA,EAAA;AAkBV,IAAA,oBAAA;AAAA,IAAA,wBAAA,IAAA,QAAA,IAAA,KAAA,EAAA;AAaA,IAAA,oBAAA;AAAA,IAAA,wBAAA,IAAA,MAAA,KAAA,CAAA,IAAA,QAAA,IAAA,KAAA,EAAA;AAWA,IAAA,oBAAA;AAAA,IAAA,wBAAA,CAAA,IAAA,QAAA,KAAA,CAAA,IAAA,MAAA,IAAA,KAAA,EAAA;;GDtE6B,+CAJnB,cAAc,aAAW,gBAAA,8BAAE,qBAAqB,yBAAyB,oBAAkB,aAAA,QAAA,GAAA,QAAA,CAAA,ioXAAA,EAAA,CAAA;AAIjG,IAAO,qBAAP;;sEAAO,oBAAkB,CAAA;UAP9B;uBACW,iBAAe,YACb,MAAI,SACP,CAAC,cAAc,aAAa,qBAAqB,yBAAyB,kBAAkB,GAAC,UAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAAA,QAAA,CAAA,iySAAA,EAAA,CAAA;;;;6EAI3F,oBAAkB,EAAA,WAAA,sBAAA,UAAA,kDAAA,YAAA,GAAA,CAAA;AAAA,GAAA;",
  "names": []
}
