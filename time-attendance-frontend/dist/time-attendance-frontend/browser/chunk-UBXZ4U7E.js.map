{
  "version": 3,
  "sources": ["src/app/pages/attendance/edit-attendance/edit-attendance.component.ts", "src/app/pages/attendance/edit-attendance/edit-attendance.component.html"],
  "sourcesContent": ["import { Component, OnInit, signal, inject, computed } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AttendanceService } from '../../../core/services/attendance.service';\r\nimport { I18nService } from '../../../core/i18n/i18n.service';\r\nimport { FormHeaderComponent } from '../../../shared/components/form-header/form-header.component';\r\nimport { StatusBadgeComponent } from '../../../shared/components/status-badge/status-badge.component';\r\nimport { NotificationService } from '../../../core/notifications/notification.service';\r\nimport {\r\n  AttendanceRecord,\r\n  AttendanceStatus,\r\n  UpdateAttendanceRecordRequest\r\n} from '../../../shared/models/attendance.model';\r\n\r\n@Component({\r\n  selector: 'app-edit-attendance',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, FormHeaderComponent, StatusBadgeComponent],\r\n  templateUrl: './edit-attendance.component.html',\r\n  styleUrls: ['./edit-attendance.component.css']\r\n})\r\nexport class EditAttendanceComponent implements OnInit {\r\n  private fb = inject(FormBuilder);\r\n  private route = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private attendanceService = inject(AttendanceService);\r\n  private notificationService = inject(NotificationService);\r\n  public i18n = inject(I18nService);\r\n\r\n  // Signals for reactive state management\r\n  attendanceRecord = signal<AttendanceRecord | null>(null);\r\n  loading = signal(true);\r\n  saving = signal(false);\r\n  error = signal<string | null>(null);\r\n\r\n  // Form group for editing\r\n  editForm: FormGroup;\r\n\r\n  // Constants for template\r\n  AttendanceStatus = AttendanceStatus;\r\n  availableStatuses = [\r\n    { value: AttendanceStatus.Present, label: 'attendance.status.present' },\r\n    { value: AttendanceStatus.Absent, label: 'attendance.status.absent' },\r\n    { value: AttendanceStatus.Late, label: 'attendance.status.late' },\r\n    { value: AttendanceStatus.EarlyLeave, label: 'attendance.status.early_leave' },\r\n    { value: AttendanceStatus.OnLeave, label: 'attendance.status.on_leave' },\r\n    { value: AttendanceStatus.DayOff, label: 'attendance.status.day_off' },\r\n    { value: AttendanceStatus.Overtime, label: 'attendance.status.overtime' },\r\n    { value: AttendanceStatus.Holiday, label: 'attendance.status.holiday' },\r\n    { value: AttendanceStatus.SickLeave, label: 'attendance.status.sick_leave' }\r\n  ];\r\n\r\n  recordId: number | null = null;\r\n  private returnDate: string | null = null;\r\n\r\n  // Additional signals for business rules\r\n  shiftHasBreak = signal(false);\r\n  calculatedStatus = signal<AttendanceStatus | null>(null);\r\n  calculatedWorkingHours = signal(0);\r\n  calculatedOvertimeHours = signal(0);\r\n  calculatedLateMinutes = signal(0);\r\n  calculatedEarlyLeaveMinutes = signal(0);\r\n  totalLateMinutes = signal(0);\r\n\r\n  /**\r\n   * Computed property for status badge\r\n   */\r\n  statusBadge = computed<{ label: string; variant: 'success' | 'danger' | 'warning' | 'info' | 'secondary' | 'primary' }>(() => {\r\n    const status = this.calculatedStatus();\r\n    if (!status) {\r\n      return { label: this.i18n.t('attendance.status.pending'), variant: 'secondary' };\r\n    }\r\n\r\n    const label = this.i18n.t(this.getStatusText(status));\r\n\r\n    switch (status) {\r\n      case AttendanceStatus.Present:\r\n        return { label, variant: 'success' };\r\n      case AttendanceStatus.Absent:\r\n        return { label, variant: 'danger' };\r\n      case AttendanceStatus.Late:\r\n      case AttendanceStatus.EarlyLeave:\r\n      case AttendanceStatus.SickLeave:\r\n        return { label, variant: 'warning' };\r\n      case AttendanceStatus.OnLeave:\r\n        return { label, variant: 'info' };\r\n      case AttendanceStatus.Overtime:\r\n        return { label, variant: 'primary' };\r\n      case AttendanceStatus.DayOff:\r\n      case AttendanceStatus.Holiday:\r\n      default:\r\n        return { label, variant: 'secondary' };\r\n    }\r\n  });\r\n\r\n  constructor() {\r\n    // Simplified form - only editable fields based on business rules\r\n    this.editForm = this.fb.group({\r\n      actualCheckInTime: [''],\r\n      actualCheckOutTime: [''],\r\n      breakHours: [null, [Validators.min(0), Validators.max(24)]], // Conditionally visible\r\n      isApproved: [false],\r\n      notes: ['', [Validators.maxLength(1000)]],\r\n      overrideNotes: ['', [Validators.maxLength(500)]]\r\n    });\r\n\r\n    // Note: Removed client-side calculation listeners\r\n    // The \"Hours & Calculations\" section now shows backend values only\r\n    // for accurate flexible hours business logic\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe(params => {\r\n      const id = params['id'];\r\n      if (id) {\r\n        this.recordId = parseInt(id, 10);\r\n        this.loadAttendanceRecord(this.recordId);\r\n      } else {\r\n        this.error.set('Invalid attendance record ID');\r\n        this.loading.set(false);\r\n      }\r\n    });\r\n\r\n    // Capture the return date from query parameters\r\n    this.route.queryParams.subscribe(params => {\r\n      this.returnDate = params['returnDate'] || null;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Load attendance record by ID\r\n   */\r\n  private loadAttendanceRecord(recordId: number): void {\r\n    this.loading.set(true);\r\n    this.error.set(null);\r\n\r\n    this.attendanceService.getAttendanceRecordById(recordId).subscribe({\r\n      next: (record) => {\r\n        this.attendanceRecord.set(record);\r\n        this.populateForm(record);\r\n        this.loading.set(false);\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading attendance record:', error);\r\n        this.error.set(this.getErrorMessage(error));\r\n        this.loading.set(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Populate form with existing record data\r\n   */\r\n  private populateForm(record: AttendanceRecord): void {\r\n    // Only populate editable fields\r\n    this.editForm.patchValue({\r\n      actualCheckInTime: this.formatTimeForInput(record.actualCheckInTime),\r\n      actualCheckOutTime: this.formatTimeForInput(record.actualCheckOutTime),\r\n      breakHours: record.breakHours || null,\r\n      isApproved: record.isApproved,\r\n      notes: record.notes || '',\r\n      overrideNotes: ''\r\n    });\r\n\r\n    // Use the backend's calculated values directly - they include flexible hours logic\r\n    this.calculatedStatus.set(record.status);\r\n    this.calculatedWorkingHours.set(record.workingHours || 0);\r\n    this.calculatedOvertimeHours.set(record.overtimeHours || 0);\r\n    this.calculatedLateMinutes.set(record.lateMinutes || 0);\r\n    this.calculatedEarlyLeaveMinutes.set(record.earlyLeaveMinutes || 0);\r\n\r\n    // Calculate total late minutes (could be historical data)\r\n    this.calculateTotalLateMinutes(record);\r\n\r\n    // Determine if shift has break (mock logic - would normally come from shift data)\r\n    this.determineShiftBreakSettings(record);\r\n\r\n    // Don't override backend calculations with client-side calculations\r\n    // The backend values are authoritative and include flexible hours business logic\r\n  }\r\n\r\n  /**\r\n   * Determine if the employee's shift includes break time\r\n   */\r\n  private determineShiftBreakSettings(record: AttendanceRecord): void {\r\n    // This would normally query shift assignment data\r\n    // For now, assume break is included if breakHours > 0 in record\r\n    this.shiftHasBreak.set((record.breakHours || 0) > 0);\r\n  }\r\n\r\n  /**\r\n   * Calculate total late minutes (late minutes + early leave minutes)\r\n   */\r\n  private calculateTotalLateMinutes(record: AttendanceRecord): void {\r\n    // Total late includes both late check-in and early leave\r\n    const lateMinutes = record.lateMinutes || 0;\r\n    const earlyLeaveMinutes = record.earlyLeaveMinutes || 0;\r\n    this.totalLateMinutes.set(lateMinutes + earlyLeaveMinutes);\r\n  }\r\n\r\n  /**\r\n   * Calculate dependent fields based on check-in/check-out times\r\n   * Uses backend calculation service for accurate business logic\r\n   */\r\n  private calculateFields(): void {\r\n    const record = this.attendanceRecord();\r\n    if (!record) return;\r\n\r\n    const checkInTime = this.editForm.get('actualCheckInTime')?.value;\r\n    const checkOutTime = this.editForm.get('actualCheckOutTime')?.value;\r\n\r\n    if (!checkInTime || !checkOutTime) {\r\n      // Reset calculated values if times are incomplete\r\n      this.calculatedStatus.set(AttendanceStatus.Incomplete);\r\n      this.calculatedWorkingHours.set(0);\r\n      this.calculatedOvertimeHours.set(0);\r\n      this.calculatedLateMinutes.set(0);\r\n      this.calculatedEarlyLeaveMinutes.set(0);\r\n      return;\r\n    }\r\n\r\n    // For manual calculations during editing, call backend service\r\n    // to ensure consistent business logic with flexible hours\r\n    this.calculateFieldsUsingBackend();\r\n  }\r\n\r\n  /**\r\n   * Use backend calculation service to get accurate values\r\n   * This ensures consistent business logic including flexible hours\r\n   */\r\n  private calculateFieldsUsingBackend(): void {\r\n    const record = this.attendanceRecord();\r\n    if (!record || !this.recordId) return;\r\n\r\n    const checkInTime = this.editForm.get('actualCheckInTime')?.value;\r\n    const checkOutTime = this.editForm.get('actualCheckOutTime')?.value;\r\n\r\n    if (!checkInTime || !checkOutTime) return;\r\n\r\n    // Create a request with updated times to get calculated values\r\n    const request: UpdateAttendanceRecordRequest = {\r\n      actualCheckInTime: this.convertTimeToDateTime(checkInTime),\r\n      actualCheckOutTime: this.convertTimeToDateTime(checkOutTime),\r\n      breakHours: this.editForm.get('breakHours')?.value || undefined\r\n    };\r\n\r\n    // Call backend to get calculated values (without saving)\r\n    // For now, we'll use client-side calculation as fallback\r\n    // Note: Using backend business logic values only\r\n    // No client-side calculations needed as they don't match backend flexible hours logic\r\n  }\r\n\r\n\r\n  /**\r\n   * Format time string for HTML time input\r\n   */\r\n  private formatTimeForInput(timeString: string | null): string {\r\n    if (!timeString) return '';\r\n\r\n    try {\r\n      // Handle both full datetime and time-only strings\r\n      let date: Date;\r\n      if (timeString.includes('T')) {\r\n        date = new Date(timeString);\r\n      } else {\r\n        date = new Date(`1970-01-01T${timeString}`);\r\n      }\r\n\r\n      const hours = date.getHours().toString().padStart(2, '0');\r\n      const minutes = date.getMinutes().toString().padStart(2, '0');\r\n      return `${hours}:${minutes}`;\r\n    } catch {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert time string (HH:mm) to DateTime string for API\r\n   */\r\n  private convertTimeToDateTime(timeString: string | null): string | undefined {\r\n    if (!timeString) return undefined;\r\n\r\n    const record = this.attendanceRecord();\r\n    if (!record) return undefined;\r\n\r\n    try {\r\n      // Use the attendance date as the date part\r\n      const attendanceDate = new Date(record.attendanceDate);\r\n      const year = attendanceDate.getFullYear();\r\n      const month = (attendanceDate.getMonth() + 1).toString().padStart(2, '0');\r\n      const day = attendanceDate.getDate().toString().padStart(2, '0');\r\n\r\n      // Combine date with time\r\n      const dateTimeString = `${year}-${month}-${day}T${timeString}:00`;\r\n\r\n      // Validate by parsing\r\n      const testDate = new Date(dateTimeString);\r\n      if (isNaN(testDate.getTime())) {\r\n        return undefined;\r\n      }\r\n\r\n      return dateTimeString;\r\n    } catch {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save attendance record changes\r\n   */\r\n  onSave(): void {\r\n    if (this.editForm.invalid) {\r\n      this.markFormGroupTouched(this.editForm);\r\n      this.notificationService.error('Please fix validation errors before saving');\r\n      return;\r\n    }\r\n\r\n    if (!this.recordId) {\r\n      this.notificationService.error('Invalid record ID');\r\n      return;\r\n    }\r\n\r\n    // Validate that manual overrides require override notes\r\n    const formValue = this.editForm.value;\r\n    if (this.hasManualOverrides(formValue) && !formValue.overrideNotes?.trim()) {\r\n      this.notificationService.error('Override notes are required when making manual adjustments');\r\n      return;\r\n    }\r\n\r\n    // Validate time order\r\n    if (formValue.actualCheckInTime && formValue.actualCheckOutTime) {\r\n      const checkInDateTime = this.convertTimeToDateTime(formValue.actualCheckInTime);\r\n      const checkOutDateTime = this.convertTimeToDateTime(formValue.actualCheckOutTime);\r\n\r\n      if (checkInDateTime && checkOutDateTime) {\r\n        const checkIn = new Date(checkInDateTime);\r\n        const checkOut = new Date(checkOutDateTime);\r\n        if (checkOut <= checkIn) {\r\n          this.notificationService.error('Check-out time must be after check-in time');\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Validate break hours\r\n    if (formValue.breakHours && formValue.breakHours < 0) {\r\n      this.notificationService.error('Break hours cannot be negative');\r\n      return;\r\n    }\r\n\r\n    this.saving.set(true);\r\n\r\n    const request: UpdateAttendanceRecordRequest = {\r\n      // Only send editable fields - calculated fields will be computed by backend\r\n      actualCheckInTime: this.convertTimeToDateTime(formValue.actualCheckInTime),\r\n      actualCheckOutTime: this.convertTimeToDateTime(formValue.actualCheckOutTime),\r\n      breakHours: formValue.breakHours || undefined,\r\n      isApproved: formValue.isApproved || undefined,\r\n      notes: formValue.notes?.trim() || undefined,\r\n      overrideNotes: formValue.overrideNotes?.trim() || undefined\r\n    };\r\n\r\n    this.attendanceService.updateAttendanceRecord(this.recordId, request).subscribe({\r\n      next: (updatedRecord) => {\r\n        this.attendanceRecord.set(updatedRecord);\r\n        this.saving.set(false);\r\n        this.notificationService.success('Attendance record updated successfully');\r\n        this.navigateBackToDailyAttendance();\r\n      },\r\n      error: (error) => {\r\n        console.error('Error updating attendance record:', error);\r\n        this.saving.set(false);\r\n        this.notificationService.error(this.getErrorMessage(error));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if form has manual overrides\r\n   */\r\n  private hasManualOverrides(formValue: any): boolean {\r\n    const originalRecord = this.attendanceRecord();\r\n    if (!originalRecord) return false;\r\n\r\n    return formValue.actualCheckInTime !== this.formatTimeForInput(originalRecord.actualCheckInTime) ||\r\n           formValue.actualCheckOutTime !== this.formatTimeForInput(originalRecord.actualCheckOutTime) ||\r\n           formValue.breakHours !== originalRecord.breakHours;\r\n  }\r\n\r\n  /**\r\n   * Navigate back to daily attendance page with preserved date\r\n   */\r\n  private navigateBackToDailyAttendance(): void {\r\n    if (this.returnDate) {\r\n      this.router.navigate(['/attendance/daily'], {\r\n        queryParams: { date: this.returnDate }\r\n      });\r\n    } else {\r\n      this.router.navigate(['/attendance/daily']);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel editing and go back\r\n   */\r\n  onCancel(): void {\r\n    this.navigateBackToDailyAttendance();\r\n  }\r\n\r\n  /**\r\n   * Reset form to original values\r\n   */\r\n  onReset(): void {\r\n    const record = this.attendanceRecord();\r\n    if (record) {\r\n      this.populateForm(record);\r\n      this.notificationService.info('Form reset to original values');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get status text translation key\r\n   */\r\n  getStatusText(status: AttendanceStatus): string {\r\n    switch (status) {\r\n      case AttendanceStatus.Present:\r\n        return 'attendance.status.present';\r\n      case AttendanceStatus.Absent:\r\n        return 'attendance.status.absent';\r\n      case AttendanceStatus.Late:\r\n        return 'attendance.status.late';\r\n      case AttendanceStatus.EarlyLeave:\r\n        return 'attendance.status.early_leave';\r\n      case AttendanceStatus.OnLeave:\r\n        return 'attendance.status.on_leave';\r\n      case AttendanceStatus.DayOff:\r\n        return 'attendance.status.day_off';\r\n      case AttendanceStatus.Overtime:\r\n        return 'attendance.status.overtime';\r\n      case AttendanceStatus.Holiday:\r\n        return 'attendance.status.holiday';\r\n      case AttendanceStatus.SickLeave:\r\n        return 'attendance.status.sick_leave';\r\n      default:\r\n        return 'attendance.status.pending';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get status badge class\r\n   */\r\n  getStatusBadgeClass(status: AttendanceStatus | null): string {\r\n    if (!status) return 'badge bg-secondary';\r\n\r\n    switch (status) {\r\n      case AttendanceStatus.Present:\r\n        return 'badge bg-success';\r\n      case AttendanceStatus.Absent:\r\n        return 'badge bg-danger';\r\n      case AttendanceStatus.Late:\r\n        return 'badge bg-warning';\r\n      case AttendanceStatus.EarlyLeave:\r\n        return 'badge bg-warning';\r\n      case AttendanceStatus.OnLeave:\r\n        return 'badge bg-info';\r\n      case AttendanceStatus.DayOff:\r\n        return 'badge bg-secondary';\r\n      case AttendanceStatus.Overtime:\r\n        return 'badge bg-primary';\r\n      case AttendanceStatus.Holiday:\r\n        return 'badge bg-secondary';\r\n      case AttendanceStatus.SickLeave:\r\n        return 'badge bg-warning';\r\n      default:\r\n        return 'badge bg-secondary';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get status display text\r\n   */\r\n  getStatusDisplayText(status: AttendanceStatus | null): string {\r\n    if (!status) return this.i18n.t('attendance.status.pending');\r\n    return this.i18n.t(this.getStatusText(status));\r\n  }\r\n\r\n  /**\r\n   * Get error message from HTTP error\r\n   */\r\n  private getErrorMessage(error: any): string {\r\n    if (error?.status === 403) {\r\n      return 'You do not have permission to edit attendance records';\r\n    }\r\n    if (error?.status === 404) {\r\n      return 'Attendance record not found';\r\n    }\r\n    if (error?.error && typeof error.error === 'string') {\r\n      return error.error;\r\n    }\r\n    if (error?.message) {\r\n      return error.message;\r\n    }\r\n    return 'An error occurred while processing your request';\r\n  }\r\n\r\n  /**\r\n   * Mark all form controls as touched to show validation errors\r\n   */\r\n  private markFormGroupTouched(formGroup: FormGroup): void {\r\n    Object.keys(formGroup.controls).forEach(key => {\r\n      const control = formGroup.get(key);\r\n      control?.markAsTouched();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get form control error message\r\n   */\r\n  getControlErrorMessage(controlName: string): string {\r\n    const control = this.editForm.get(controlName);\r\n    if (!control || !control.touched || !control.errors) {\r\n      return '';\r\n    }\r\n\r\n    if (control.errors['required']) {\r\n      return `${controlName} is required`;\r\n    }\r\n    if (control.errors['min']) {\r\n      return `${controlName} must be greater than or equal to ${control.errors['min'].min}`;\r\n    }\r\n    if (control.errors['max']) {\r\n      return `${controlName} must be less than or equal to ${control.errors['max'].max}`;\r\n    }\r\n    if (control.errors['maxlength']) {\r\n      return `${controlName} cannot exceed ${control.errors['maxlength'].requiredLength} characters`;\r\n    }\r\n\r\n    return 'Invalid value';\r\n  }\r\n\r\n  /**\r\n   * Check if form control has error\r\n   */\r\n  hasControlError(controlName: string): boolean {\r\n    const control = this.editForm.get(controlName);\r\n    return !!(control?.touched && control?.invalid);\r\n  }\r\n\r\n  /**\r\n   * Format decimal hours to time format (H:MM)\r\n   * Example: 7.983333 becomes \"7:59\"\r\n   */\r\n  formatHoursAsTime(hours: number): string {\r\n    if (!hours || hours === 0) return '0:00';\r\n\r\n    const wholeHours = Math.floor(hours);\r\n    const minutes = Math.round((hours - wholeHours) * 60);\r\n\r\n    // Handle case where minutes round to 60\r\n    if (minutes === 60) {\r\n      return `${wholeHours + 1}:00`;\r\n    }\r\n\r\n    const minutesStr = minutes.toString().padStart(2, '0');\r\n    return `${wholeHours}:${minutesStr}`;\r\n  }\r\n}", "<div class=\"container-fluid\">\r\n  <app-form-header\r\n    mode=\"edit\"\r\n    [title]=\"i18n.t('attendance.edit.title')\"\r\n    moduleName=\"attendance\"\r\n    moduleRoute=\"attendance\"\r\n    [entityId]=\"recordId || 0\"\r\n    [loading]=\"saving()\">\r\n  </app-form-header>\r\n\r\n  <!-- Loading State -->\r\n  @if (loading()) {\r\n    <div class=\"d-flex justify-content-center align-items-center\" style=\"min-height: 200px;\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">{{ i18n.t('common.loading') }}</span>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  <!-- Error State -->\r\n  @if (error()) {\r\n    <div class=\"alert alert-danger\" role=\"alert\">\r\n      <i class=\"fas fa-exclamation-triangle me-2\"></i>\r\n      {{ error() }}\r\n    </div>\r\n  }\r\n\r\n  <!-- Main Content -->\r\n  @if (!loading() && !error() && attendanceRecord()) {\r\n\r\n    <!-- Employee Information Card -->\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-12\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-4\">\r\n                <strong>{{ i18n.t('attendance.fields.employee_name') }}:</strong>\r\n                {{ attendanceRecord()?.employeeName }}\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <strong>{{ i18n.t('attendance.fields.attendance_date') }}:</strong>\r\n                {{ attendanceRecord()?.attendanceDate | date: 'fullDate' }}\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <strong>{{ i18n.t('attendance.fields.status') }}:</strong>\r\n                <app-status-badge\r\n                  [status]=\"statusBadge().label\"\r\n                  [variant]=\"statusBadge().variant\">\r\n                </app-status-badge>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Edit Form -->\r\n    <form [formGroup]=\"editForm\" (ngSubmit)=\"onSave()\">\r\n      <div class=\"row\">\r\n        <!-- Editable Time Fields -->\r\n        <div class=\"col-lg-6\">\r\n          <div class=\"card mb-4\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"card-title mb-0\">\r\n                <i class=\"fas fa-clock me-2\"></i>\r\n                {{ i18n.t('attendance.edit.basic_info') }}\r\n              </h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <!-- Check-in Time -->\r\n              <div class=\"mb-3\">\r\n                <label for=\"actualCheckInTime\" class=\"form-label\">\r\n                  {{ i18n.t('attendance.fields.check_in_time') }}\r\n                </label>\r\n                <input\r\n                  type=\"time\"\r\n                  id=\"actualCheckInTime\"\r\n                  class=\"form-control\"\r\n                  formControlName=\"actualCheckInTime\"\r\n                  [class.is-invalid]=\"hasControlError('actualCheckInTime')\">\r\n                <div class=\"form-text\">\r\n                  {{ i18n.t('attendance.edit.original') }}:\r\n                  {{ attendanceRecord()?.actualCheckInTime ? (attendanceRecord()?.actualCheckInTime | date: 'HH:mm') : '--:--' }}\r\n                </div>\r\n                @if (hasControlError('actualCheckInTime')) {\r\n                  <div class=\"invalid-feedback\">\r\n                    {{ getControlErrorMessage('actualCheckInTime') }}\r\n                  </div>\r\n                }\r\n              </div>\r\n\r\n              <!-- Check-out Time -->\r\n              <div class=\"mb-3\">\r\n                <label for=\"actualCheckOutTime\" class=\"form-label\">\r\n                  {{ i18n.t('attendance.fields.check_out_time') }}\r\n                </label>\r\n                <input\r\n                  type=\"time\"\r\n                  id=\"actualCheckOutTime\"\r\n                  class=\"form-control\"\r\n                  formControlName=\"actualCheckOutTime\"\r\n                  [class.is-invalid]=\"hasControlError('actualCheckOutTime')\">\r\n                <div class=\"form-text\">\r\n                  {{ i18n.t('attendance.edit.original') }}:\r\n                  {{ attendanceRecord()?.actualCheckOutTime ? (attendanceRecord()?.actualCheckOutTime | date: 'HH:mm') : '--:--' }}\r\n                </div>\r\n                @if (hasControlError('actualCheckOutTime')) {\r\n                  <div class=\"invalid-feedback\">\r\n                    {{ getControlErrorMessage('actualCheckOutTime') }}\r\n                  </div>\r\n                }\r\n              </div>\r\n\r\n              <!-- Break Hours - Only show if shift has break -->\r\n              @if (shiftHasBreak()) {\r\n                <div class=\"mb-3\">\r\n                  <label for=\"breakHours\" class=\"form-label\">\r\n                    {{ i18n.t('attendance.fields.break_hours') }}\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    id=\"breakHours\"\r\n                    class=\"form-control\"\r\n                    formControlName=\"breakHours\"\r\n                    step=\"0.1\"\r\n                    [class.is-invalid]=\"hasControlError('breakHours')\">\r\n                  <div class=\"form-text\">\r\n                    {{ i18n.t('attendance.edit.original') }}: {{ attendanceRecord()?.breakHours || 0 }} {{ i18n.t('common.hours') }}\r\n                  </div>\r\n                  @if (hasControlError('breakHours')) {\r\n                    <div class=\"invalid-feedback\">\r\n                      {{ getControlErrorMessage('breakHours') }}\r\n                    </div>\r\n                  }\r\n                </div>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Calculated Fields (Read-only) -->\r\n        <div class=\"col-lg-6\">\r\n          <div class=\"card mb-4\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"card-title mb-0\">\r\n                <i class=\"fas fa-calculator me-2\"></i>\r\n                {{ i18n.t('attendance.edit.hours_calculations') }}\r\n              </h5>\r\n              <small class=\"text-muted\">{{ i18n.t('attendance.edit.calculated_automatically') }}</small>\r\n              <br>\r\n              <small class=\"text-info\">Uses backend business logic including flexible hours</small>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <!-- Calculated Working Hours -->\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">{{ i18n.t('attendance.fields.working_hours') }}</label>\r\n                <div class=\"form-control-plaintext bg-light p-2 rounded\">\r\n                  <strong>{{ formatHoursAsTime(calculatedWorkingHours()) }}</strong>\r\n                  <small class=\"text-muted ms-2\">\r\n                    ({{ i18n.t('attendance.edit.original') }}: {{ formatHoursAsTime(attendanceRecord()?.workingHours || 0) }})\r\n                  </small>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Calculated Overtime Hours -->\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">{{ i18n.t('attendance.fields.overtime_hours') }}</label>\r\n                <div class=\"form-control-plaintext bg-light p-2 rounded\">\r\n                  <strong>{{ formatHoursAsTime(calculatedOvertimeHours()) }}</strong>\r\n                  <small class=\"text-muted ms-2\">\r\n                    ({{ i18n.t('attendance.edit.original') }}: {{ formatHoursAsTime(attendanceRecord()?.overtimeHours || 0) }})\r\n                  </small>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Calculated Late Minutes -->\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">{{ i18n.t('attendance.fields.late_minutes') }}</label>\r\n                <div class=\"form-control-plaintext bg-light p-2 rounded\">\r\n                  <strong>{{ calculatedLateMinutes() }} {{ i18n.t('common.minutes') }}</strong>\r\n                  <small class=\"text-muted ms-2\">\r\n                    ({{ i18n.t('attendance.edit.original') }}: {{ attendanceRecord()?.lateMinutes || 0 }} {{ i18n.t('common.minutes') }})\r\n                  </small>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Calculated Early Leave Minutes -->\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">{{ i18n.t('attendance.fields.early_leave_minutes') }}</label>\r\n                <div class=\"form-control-plaintext bg-light p-2 rounded\">\r\n                  <strong>{{ calculatedEarlyLeaveMinutes() }} {{ i18n.t('common.minutes') }}</strong>\r\n                  <small class=\"text-muted ms-2\">\r\n                    ({{ i18n.t('attendance.edit.original') }}: {{ attendanceRecord()?.earlyLeaveMinutes || 0 }} {{ i18n.t('common.minutes') }})\r\n                  </small>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- New Total Late Field -->\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">{{ i18n.t('attendance.fields.total_late') }}</label>\r\n                <div class=\"form-control-plaintext bg-warning bg-opacity-10 p-2 rounded border border-warning\">\r\n                  <strong class=\"text-warning\">{{ totalLateMinutes() }} {{ i18n.t('common.minutes') }}</strong>\r\n                  <small class=\"text-muted ms-2\">{{ i18n.t('attendance.edit.total_late_help') }}</small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Notes and Approval Section -->\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <div class=\"card mb-4\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"card-title mb-0\">\r\n                <i class=\"fas fa-sticky-note me-2\"></i>\r\n                {{ i18n.t('attendance.edit.notes') }}\r\n              </h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <div class=\"row\">\r\n                <!-- Approval -->\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"form-check mb-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"isApproved\"\r\n                      class=\"form-check-input\"\r\n                      formControlName=\"isApproved\">\r\n                    <label for=\"isApproved\" class=\"form-check-label\">\r\n                      {{ i18n.t('attendance.edit.approve_record') }}\r\n                    </label>\r\n                    <div class=\"form-text\">\r\n                      {{ i18n.t('attendance.edit.approval_help') }}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row\">\r\n                <!-- General Notes -->\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"mb-3\">\r\n                    <label for=\"notes\" class=\"form-label\">\r\n                      {{ i18n.t('attendance.fields.notes') }}\r\n                    </label>\r\n                    <textarea\r\n                      id=\"notes\"\r\n                      class=\"form-control\"\r\n                      formControlName=\"notes\"\r\n                      rows=\"3\"\r\n                      [class.is-invalid]=\"hasControlError('notes')\"\r\n                      [placeholder]=\"i18n.t('attendance.edit.notes_help')\">\r\n                    </textarea>\r\n                    @if (hasControlError('notes')) {\r\n                      <div class=\"invalid-feedback\">\r\n                        {{ getControlErrorMessage('notes') }}\r\n                      </div>\r\n                    }\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- Override Notes (Required) -->\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"mb-3\">\r\n                    <label for=\"overrideNotes\" class=\"form-label\">\r\n                      {{ i18n.t('attendance.edit.override_notes') }}\r\n                      <span class=\"text-danger\">*</span>\r\n                    </label>\r\n                    <textarea\r\n                      id=\"overrideNotes\"\r\n                      class=\"form-control\"\r\n                      formControlName=\"overrideNotes\"\r\n                      rows=\"3\"\r\n                      [class.is-invalid]=\"hasControlError('overrideNotes')\"\r\n                      [placeholder]=\"i18n.t('attendance.edit.override_notes_help')\">\r\n                    </textarea>\r\n                    @if (hasControlError('overrideNotes')) {\r\n                      <div class=\"invalid-feedback\">\r\n                        {{ getControlErrorMessage('overrideNotes') }}\r\n                      </div>\r\n                    }\r\n                    <div class=\"form-text\">\r\n                      {{ i18n.t('attendance.edit.override_notes_help') }}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Action Buttons -->\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n              <div class=\"d-flex justify-content-between\">\r\n                <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"onCancel()\">\r\n                  <i class=\"fas fa-times me-2\"></i>\r\n                  {{ i18n.t('attendance.edit.discard_changes') }}\r\n                </button>\r\n                <button\r\n                  type=\"submit\"\r\n                  class=\"btn btn-primary\"\r\n                  [disabled]=\"saving() || editForm.invalid\"\r\n                  [class.loading]=\"saving()\">\r\n                  @if (!saving()) {\r\n                    <i class=\"fas fa-save me-2\"></i>\r\n                  }\r\n                  @if (saving()) {\r\n                    <div class=\"spinner-border spinner-border-sm me-2\" role=\"status\">\r\n                      <span class=\"visually-hidden\">{{ i18n.t('attendance.edit.saving') }}</span>\r\n                    </div>\r\n                  }\r\n                  {{ saving() ? i18n.t('attendance.edit.saving') : i18n.t('attendance.edit.save_changes') }}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  }\r\n</div>"],
  "mappings": "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",
  "names": []
}
