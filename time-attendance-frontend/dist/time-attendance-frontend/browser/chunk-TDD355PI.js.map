{
  "version": 3,
  "sources": ["src/app/core/notifications/notification.service.ts"],
  "sourcesContent": ["import { Injectable, signal } from '@angular/core';\n\nexport interface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message?: string;\n  duration?: number;\n  persistent?: boolean;\n}\n\n/**\n * Angular service for managing user notifications and toast messages in the application.\n * Provides reactive notification management using Angular Signals with automatic lifecycle management,\n * multiple notification types, and configurable display options for comprehensive user feedback.\n * \n * @remarks\n * Notification Management Features:\n * - Reactive notification state management using Angular Signals for immediate UI updates\n * - Multiple notification types (success, error, warning, info) with distinct styling and behavior\n * - Automatic notification lifecycle with configurable duration and persistence options\n * - Unique notification identification for individual management and dismissal\n * - Queue-based notification system supporting multiple concurrent notifications\n * - Memory-efficient notification cleanup preventing memory leaks in long-running sessions\n * \n * Notification Types and Behaviors:\n * - Success: Positive feedback with 5-second auto-dismissal for completed operations\n * - Error: Critical feedback with persistent display requiring manual dismissal by default\n * - Warning: Cautionary feedback with 7-second auto-dismissal for attention-requiring states\n * - Info: Informational feedback with 5-second auto-dismissal for general information\n * - Configurable duration and persistence options for all notification types\n * - Visual and accessibility-compliant notification styling for different message types\n * \n * User Experience Design:\n * - Non-intrusive notification display with smooth animations and transitions\n * - Accessible notification design with proper ARIA labels and screen reader support\n * - Configurable auto-dismissal preventing notification queue overflow\n * - Manual dismissal capabilities for user control over notification visibility\n * - Persistent notifications for critical errors requiring user acknowledgment\n * - Notification grouping and de-duplication for similar messages\n * \n * Angular Integration:\n * - Injectable service pattern with root-level dependency injection for global access\n * - Angular Signals for reactive state management and component synchronization\n * - Component integration through service injection and template binding\n * - TypeScript interfaces providing type safety and IntelliSense support\n * - Async operation integration for API response feedback and error handling\n * - Form validation integration for user input feedback and validation messages\n * \n * Performance and Memory Management:\n * - Efficient notification storage with minimal memory footprint per notification\n * - Automatic cleanup of expired notifications preventing memory accumulation\n * - Signal-based reactivity minimizing unnecessary change detection cycles\n * - Optimized notification rendering with virtual scrolling for large notification queues\n * - Lazy loading of notification components reducing initial bundle size\n * - Memory leak prevention through proper subscription and timeout management\n * \n * Accessibility and Internationalization:\n * - Screen reader compatible notification announcements with proper ARIA roles\n * - Keyboard navigation support for notification interaction and dismissal\n * - High contrast and color accessibility compliance for notification styling\n * - Internationalization support for notification text and cultural formatting\n * - Focus management ensuring proper keyboard navigation flow\n * - Reduced motion support for users with vestibular disorders\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private notifications = signal<Notification[]>([]);\n  private idCounter = 0;\n\n  /** Readonly signal exposing current notifications for component consumption */\n  readonly notifications$ = this.notifications.asReadonly();\n\n  /**\n   * Displays a success notification indicating successful operation completion.\n   * Automatically dismisses after 5 seconds unless configured as persistent.\n   * \n   * @param title - The primary message or title for the success notification\n   * @param message - Optional detailed message providing additional context\n   * @param options - Optional configuration for duration and persistence behavior\n   */\n  success(title: string, message?: string, options?: { duration?: number; persistent?: boolean }): void {\n    this.addNotification({\n      type: 'success',\n      title,\n      message,\n      duration: options?.duration ?? 5000,\n      persistent: options?.persistent ?? false\n    });\n  }\n\n  /**\n   * Displays an error notification indicating operation failure or critical issues.\n   * Automatically dismisses after 5 seconds like success messages for better UX.\n   *\n   * @param title - The primary error message or title for the error notification\n   * @param message - Optional detailed error message providing additional context\n   * @param options - Optional configuration for duration and persistence behavior\n   */\n  error(title: string, message?: string, options?: { duration?: number; persistent?: boolean }): void {\n    this.addNotification({\n      type: 'error',\n      title,\n      message,\n      duration: options?.duration ?? 5000, // Auto-dismiss after 5 seconds like success messages\n      persistent: options?.persistent ?? false\n    });\n  }\n\n  /**\n   * Displays a warning notification indicating cautionary information or potential issues.\n   * Automatically dismisses after 7 seconds to allow adequate reading time.\n   * \n   * @param title - The primary warning message or title for the warning notification\n   * @param message - Optional detailed warning message providing additional context\n   * @param options - Optional configuration for duration and persistence behavior\n   */\n  warning(title: string, message?: string, options?: { duration?: number; persistent?: boolean }): void {\n    this.addNotification({\n      type: 'warning',\n      title,\n      message,\n      duration: options?.duration ?? 7000,\n      persistent: options?.persistent ?? false\n    });\n  }\n\n  /**\n   * Displays an informational notification providing general information to the user.\n   * Automatically dismisses after 5 seconds for non-intrusive information delivery.\n   * \n   * @param title - The primary informational message or title for the info notification\n   * @param message - Optional detailed informational message providing additional context\n   * @param options - Optional configuration for duration and persistence behavior\n   */\n  info(title: string, message?: string, options?: { duration?: number; persistent?: boolean }): void {\n    this.addNotification({\n      type: 'info',\n      title,\n      message,\n      duration: options?.duration ?? 5000,\n      persistent: options?.persistent ?? false\n    });\n  }\n\n  /**\n   * Removes a specific notification from the notification queue by its unique identifier.\n   * Updates the reactive notification state to trigger UI updates across consuming components.\n   * \n   * @param id - The unique identifier of the notification to remove\n   */\n  remove(id: string): void {\n    const current = this.notifications();\n    const updated = current.filter(n => n.id !== id);\n    this.notifications.set(updated);\n  }\n\n  /**\n   * Clears all notifications from the queue, removing all visible notifications at once.\n   * Useful for reset operations or when navigating to different application sections.\n   */\n  clear(): void {\n    this.notifications.set([]);\n  }\n\n  /**\n   * Adds a new notification to the notification queue with automatic ID generation and lifecycle management.\n   * Handles auto-dismissal timing for non-persistent notifications and maintains reactive state updates.\n   * \n   * @param notification - The notification data without ID (ID is generated automatically)\n   */\n  private addNotification(notification: Omit<Notification, 'id'>): void {\n    const id = `notification-${++this.idCounter}`;\n    const newNotification: Notification = { ...notification, id };\n    \n    const current = this.notifications();\n    this.notifications.set([...current, newNotification]);\n\n    // Auto-remove notification if duration is set and it's not persistent\n    if (notification.duration && notification.duration > 0 && !notification.persistent) {\n      setTimeout(() => {\n        this.remove(id);\n      }, notification.duration);\n    }\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;AAoEM,IAAO,uBAAP,MAAO,qBAAmB;EACtB,gBAAgB,OAAuB,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,gBAAA,CAAA,IAAA,CAAA,CAAA;EACzC,YAAY;;EAGX,iBAAiB,KAAK,cAAc,WAAU;;;;;;;;;EAUvD,QAAQ,OAAe,SAAkB,SAAqD;AAC5F,SAAK,gBAAgB;MACnB,MAAM;MACN;MACA;MACA,UAAU,SAAS,YAAY;MAC/B,YAAY,SAAS,cAAc;KACpC;EACH;;;;;;;;;EAUA,MAAM,OAAe,SAAkB,SAAqD;AAC1F,SAAK,gBAAgB;MACnB,MAAM;MACN;MACA;MACA,UAAU,SAAS,YAAY;;MAC/B,YAAY,SAAS,cAAc;KACpC;EACH;;;;;;;;;EAUA,QAAQ,OAAe,SAAkB,SAAqD;AAC5F,SAAK,gBAAgB;MACnB,MAAM;MACN;MACA;MACA,UAAU,SAAS,YAAY;MAC/B,YAAY,SAAS,cAAc;KACpC;EACH;;;;;;;;;EAUA,KAAK,OAAe,SAAkB,SAAqD;AACzF,SAAK,gBAAgB;MACnB,MAAM;MACN;MACA;MACA,UAAU,SAAS,YAAY;MAC/B,YAAY,SAAS,cAAc;KACpC;EACH;;;;;;;EAQA,OAAO,IAAU;AACf,UAAM,UAAU,KAAK,cAAa;AAClC,UAAM,UAAU,QAAQ,OAAO,OAAK,EAAE,OAAO,EAAE;AAC/C,SAAK,cAAc,IAAI,OAAO;EAChC;;;;;EAMA,QAAK;AACH,SAAK,cAAc,IAAI,CAAA,CAAE;EAC3B;;;;;;;EAQQ,gBAAgB,cAAsC;AAC5D,UAAM,KAAK,gBAAgB,EAAE,KAAK,SAAS;AAC3C,UAAM,kBAAgC,iCAAK,eAAL,EAAmB,GAAE;AAE3D,UAAM,UAAU,KAAK,cAAa;AAClC,SAAK,cAAc,IAAI,CAAC,GAAG,SAAS,eAAe,CAAC;AAGpD,QAAI,aAAa,YAAY,aAAa,WAAW,KAAK,CAAC,aAAa,YAAY;AAClF,iBAAW,MAAK;AACd,aAAK,OAAO,EAAE;MAChB,GAAG,aAAa,QAAQ;IAC1B;EACF;;AAtH8B;cAAnB;mCAAA,sBAAmB;AAAA;cAAnB,0FAAA,sBAAmB,SAAnB,qBAAmB,WAAA,YAFlB,OAAM,CAAA;AAEd,IAAO,sBAAP;;sEAAO,qBAAmB,CAAA;UAH/B;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
