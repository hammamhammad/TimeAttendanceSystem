{
  "version": 3,
  "sources": ["src/app/pages/employees/employees.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\nimport {\n  EmployeeDto,\n  CreateEmployeeRequest,\n  UpdateEmployeeRequest,\n  EmployeesFilter,\n  PagedResult,\n  BranchDto,\n  DepartmentDto,\n  EmployeeSelectOption\n} from '../../shared/models/employee.model';\nimport { UpdateEmployeeShiftRequest } from '../../shared/models/shift.model';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeesService {\n  private http = inject(HttpClient);\n  private baseUrl = `${environment.apiUrl}/api/v1/employees`;\n  private branchesUrl = `${environment.apiUrl}/api/v1/branches`;\n  private departmentsUrl = `${environment.apiUrl}/api/v1/departments`;\n\n  getEmployees(filter: EmployeesFilter = {}): Observable<PagedResult<EmployeeDto>> {\n    let httpParams = new HttpParams();\n    \n    if (filter.page) httpParams = httpParams.set('page', filter.page.toString());\n    if (filter.pageSize) httpParams = httpParams.set('pageSize', filter.pageSize.toString());\n    if (filter.search) httpParams = httpParams.set('search', filter.search);\n    if (filter.branchId) httpParams = httpParams.set('branchId', filter.branchId.toString());\n    if (filter.departmentId) httpParams = httpParams.set('departmentId', filter.departmentId.toString());\n    if (filter.managerId) httpParams = httpParams.set('managerId', filter.managerId.toString());\n    if (filter.isActive !== undefined) httpParams = httpParams.set('isActive', filter.isActive.toString());\n    if (filter.employmentStatus) httpParams = httpParams.set('employmentStatus', filter.employmentStatus);\n\n    return this.http.get<PagedResult<EmployeeDto>>(this.baseUrl, { params: httpParams });\n  }\n\n  getEmployeeById(id: number): Observable<EmployeeDto> {\n    return this.http.get<EmployeeDto>(`${this.baseUrl}/${id}`);\n  }\n\n  getCurrentEmployee(): Observable<EmployeeDto> {\n    return this.http.get<EmployeeDto>(`${this.baseUrl}/current`);\n  }\n\n  createEmployee(request: CreateEmployeeRequest): Observable<{ id: number }> {\n    return this.http.post<{ id: number }>(this.baseUrl, request);\n  }\n\n  updateEmployee(id: number, request: UpdateEmployeeRequest): Observable<void> {\n    return this.http.put<void>(`${this.baseUrl}/${id}`, request);\n  }\n\n  deleteEmployee(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\n  }\n\n  updateEmployeeShift(employeeId: number, request: UpdateEmployeeShiftRequest): Observable<{success: boolean, message: string}> {\n    return this.http.post<{success: boolean, message: string}>(`${this.baseUrl}/${employeeId}/shift`, request);\n  }\n\n  changeEmployeeShift(shiftData: any): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/${shiftData.employeeId}/change-shift`, shiftData);\n  }\n\n  // Helper methods for dropdowns\n  getBranches(): Observable<PagedResult<BranchDto>> {\n    let httpParams = new HttpParams()\n      .set('page', '1')\n      .set('pageSize', '100')\n      .set('isActive', 'true');\n    \n    return this.http.get<PagedResult<BranchDto>>(this.branchesUrl, { params: httpParams });\n  }\n\n  getDepartments(branchId?: number): Observable<DepartmentDto[]> {\n    let httpParams = new HttpParams();\n    if (branchId) {\n      httpParams = httpParams.set('branchId', branchId.toString());\n    }\n    \n    return this.http.get<DepartmentDto[]>(this.departmentsUrl, { params: httpParams });\n  }\n\n  getEmployeesForSelection(branchId?: number): Observable<EmployeeSelectOption[]> {\n    let httpParams = new HttpParams()\n      .set('page', '1')\n      .set('pageSize', '1000')\n      .set('isActive', 'true');\n\n    if (branchId) {\n      httpParams = httpParams.set('branchId', branchId.toString());\n    }\n\n    return this.http.get<PagedResult<EmployeeDto>>(this.baseUrl, { params: httpParams })\n      .pipe(\n        map(result => result.items.map(emp => ({\n          id: emp.id,\n          name: emp.fullName,\n          employeeNumber: emp.employeeNumber\n        })))\n      );\n  }\n\n  getEmployeesDropdown(): Observable<Array<{id: number, name: string, employeeNumber: string}>> {\n    return this.http.get<Array<{id: number, name: string, employeeNumber: string}>>(`${this.baseUrl}/dropdown`);\n  }\n\n  getManagers(branchId?: number): Observable<EmployeeSelectOption[]> {\n    let httpParams = new HttpParams()\n      .set('page', '1')\n      .set('pageSize', '1000')\n      .set('isActive', 'true');\n\n    if (branchId) {\n      httpParams = httpParams.set('branchId', branchId.toString());\n    }\n\n    return this.http.get<PagedResult<EmployeeDto>>(this.baseUrl, { params: httpParams })\n      .pipe(\n        map(result => result.items.map(emp => ({\n          id: emp.id,\n          name: emp.fullName,\n          employeeNumber: emp.employeeNumber\n        })))\n      );\n  }\n}"],
  "mappings": "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",
  "names": []
}
